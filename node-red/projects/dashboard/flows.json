[
    {
        "id": "1b667c6443413ced",
        "type": "tab",
        "label": "Home dashboard2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ab58b3fd0e6bcd77",
        "type": "tab",
        "label": "Preview",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "190b0c9aa75e8843",
        "type": "tab",
        "label": "Metadata",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "35d7387466dd0bc0",
        "type": "tab",
        "label": "Acquisition",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0fd76ac156d78937",
        "type": "tab",
        "label": "Segmentation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "14f8c9b5ce1235cc",
        "type": "tab",
        "label": "Visualization",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2d14eef8a9f51595",
        "type": "tab",
        "label": "Export",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8555b76c53e789e0",
        "type": "tab",
        "label": "[TEST] EcoTaxa",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8018bd5586fd4054",
        "type": "tab",
        "label": "Calibration",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6426e7bea6900426",
        "type": "tab",
        "label": "Calibration - Saturation Level",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "14c685bd04db8be5",
        "type": "tab",
        "label": "Calibration - Lightness",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3afb1d2b21be9114",
        "type": "tab",
        "label": "Calibration - Pixel size",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d5b2c64b84f8ed4f",
        "type": "tab",
        "label": "Calibration - Pump",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a02961610bc3982a",
        "type": "tab",
        "label": "[TEST] PlanktoScope nodes",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "807baf16b84dfb29",
        "type": "tab",
        "label": "Settings",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1b99100829ae7f41",
        "type": "tab",
        "label": "Hardware",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "83b2474231efac73",
        "type": "tab",
        "label": "Cron",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "4ed26b8b.253504",
        "type": "subflow",
        "name": "Save hardware config",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "53d163be.47cf24"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b7861ce703215a01",
        "type": "subflow",
        "name": "Load hardware config",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "0f16258953fae292"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 40,
                "wires": [
                    {
                        "id": "d0fbcd200cd09981",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "63c85b96537b7355",
        "type": "subflow",
        "name": "Config",
        "info": "An input to this subflow will get the configuration to be saved to disk.\n\nOn startup, this node outputs the loaded configuration",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 160,
                "wires": [
                    {
                        "id": "5248e5e225d854d1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 60,
                "wires": [
                    {
                        "id": "f1c0a882a9e3d927",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "910e195536aea223",
        "type": "group",
        "z": "83b2474231efac73",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a197bfa71c1761b4",
            "495e1733d60d5651",
            "0fdba9b9b11427db",
            "019662c5bf05e430",
            "8dc5b8c9bfd7cc87",
            "1c782af30d1ff770",
            "5f5dec5ac53119ae",
            "61dde05d9a3f805e",
            "b17728471bdfc61e",
            "e4719fcedaa61149",
            "9301eaa353ece507",
            "67bcd7bd5a4c38cc",
            "2a55ae214f1e7273",
            "8447c9830c3aed1e"
        ],
        "x": -6,
        "y": 19,
        "w": 1412,
        "h": 577
    },
    {
        "id": "751429d7682830be",
        "type": "group",
        "z": "83b2474231efac73",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "caf377d323526d14",
            "316dae6f231575b7",
            "9e169af039fc8031",
            "1bc303a19fc9e38b",
            "ff83a2795f988098",
            "fd3ae27267703c27",
            "527165cd7171fe26",
            "50629a570b41196e",
            "0aef9a09d59e574c",
            "a9701575d8df4ce1",
            "60d1ad2a7e54e60e",
            "f8df009e737eb044",
            "e6eb3b16a1d6bf22",
            "1997fd46811f0331",
            "5f091b11b5c9fa40",
            "0650e037776b3d8a"
        ],
        "x": 14,
        "y": 739,
        "w": 1812,
        "h": 522
    },
    {
        "id": "f591255fbfc6c466",
        "type": "group",
        "z": "6426e7bea6900426",
        "name": "Step Bar",
        "style": {
            "label": true
        },
        "nodes": [
            "062a3af5e12e8445",
            "e5da27b9abdcb156"
        ],
        "x": 994,
        "y": 19,
        "w": 372,
        "h": 82
    },
    {
        "id": "da1cb3ed0c90bb56",
        "type": "group",
        "z": "3afb1d2b21be9114",
        "name": "Step Bar",
        "style": {
            "label": true
        },
        "nodes": [
            "05a5a9c4530d07ea",
            "419cccaf23eb2548"
        ],
        "x": 994,
        "y": 19,
        "w": 372,
        "h": 82
    },
    {
        "id": "0861054b07c3373d",
        "type": "group",
        "z": "d5b2c64b84f8ed4f",
        "name": "Step Bar",
        "style": {
            "label": true
        },
        "nodes": [
            "c92cd7e25b01278d",
            "f8db1578262f6bc8"
        ],
        "x": 994,
        "y": 19,
        "w": 372,
        "h": 82
    },
    {
        "id": "426f6cef77fbb290",
        "type": "group",
        "z": "14c685bd04db8be5",
        "name": "Step Bar",
        "style": {
            "label": true
        },
        "nodes": [
            "5fbdba7e61973f9a",
            "25cb0163587aee15"
        ],
        "x": 994,
        "y": 19,
        "w": 372,
        "h": 82
    },
    {
        "id": "3bb20cd87e85a6b8",
        "type": "group",
        "z": "a02961610bc3982a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "abc662f31074fc22",
            "d082d59bfaddcd80",
            "9f5061a034f606a3",
            "1f6f854383bffbc8",
            "0e1835e8b7c470ee"
        ],
        "x": 14,
        "y": 19,
        "w": 752,
        "h": 202
    },
    {
        "id": "153af3e4645145a8",
        "type": "group",
        "z": "a02961610bc3982a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7ccb5c8c66ad170a",
            "7bf0f35f3f491657",
            "89c198d4d49eca98",
            "2fe0de4d0d304630",
            "bcdab829fb50bc57"
        ],
        "x": 14,
        "y": 239,
        "w": 812,
        "h": 202
    },
    {
        "id": "cef91df1f697848e",
        "type": "group",
        "z": "a02961610bc3982a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "29b3163c363f83d7",
            "19da48e7c9119862",
            "28f8ab1b6c179786",
            "4966524cdc764174",
            "f640495d00bb68b9"
        ],
        "x": 14,
        "y": 459,
        "w": 932,
        "h": 182
    },
    {
        "id": "3fe3efd04fb1a41a",
        "type": "group",
        "z": "a02961610bc3982a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1433d7bb97c2b52e",
            "58b352badddb48f5",
            "1f1c86a14bf3ac61"
        ],
        "x": 14,
        "y": 659,
        "w": 552,
        "h": 142
    },
    {
        "id": "9c49d230dea06fdf",
        "type": "group",
        "z": "a02961610bc3982a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "79d35d7ad73f89f9",
            "39cd9534b43ef484",
            "7e293f564d4fbfc4"
        ],
        "x": 14,
        "y": 819,
        "w": 352,
        "h": 142
    },
    {
        "id": "27e22d982f0bcb2f",
        "type": "group",
        "z": "a02961610bc3982a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "959839bc2c390088",
            "0d10e66bb2b9d1cc",
            "53516cda8e4f5a3c"
        ],
        "x": 434,
        "y": 819,
        "w": 372,
        "h": 142
    },
    {
        "id": "fc6b573a63d6dfaa",
        "type": "group",
        "z": "a02961610bc3982a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c34bff0e83b45e68",
            "dc07c747a235da10",
            "f12fd63508bb1b63",
            "2babe27c1bf9d6ef",
            "15f16463c05bb479",
            "b552ca516cc07737",
            "94a433cec8b54203"
        ],
        "x": 934,
        "y": 39,
        "w": 352,
        "h": 262
    },
    {
        "id": "dc792afbab434446",
        "type": "group",
        "z": "a02961610bc3982a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "50128147f802f133",
            "b9c2e0abaad12bd9",
            "61ebceb724041fb2"
        ],
        "x": 994,
        "y": 339,
        "w": 392,
        "h": 142
    },
    {
        "id": "dc307bb5d26c60f4",
        "type": "group",
        "z": "a02961610bc3982a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "300343e6b56f088e",
            "da645aa8ebbed646",
            "7d1f9414be49d7c3"
        ],
        "x": 994,
        "y": 519,
        "w": 412,
        "h": 142
    },
    {
        "id": "855d9ef468b5db0f",
        "type": "group",
        "z": "a02961610bc3982a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f7c18ab2aa687120",
            "ede7a86fd97b5e1b",
            "af8ce4702c170449"
        ],
        "x": 14,
        "y": 979,
        "w": 412,
        "h": 142
    },
    {
        "id": "979647e2e34284fb",
        "type": "group",
        "z": "14f8c9b5ce1235cc",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f530763503fdc7d1",
            "e5a0432fc7b35b29",
            "ba8045b3448d5bbf",
            "f0313532a2b77337",
            "e045f6939008f23f",
            "68fe28f50beb2add",
            "a20376f0ac08af8e",
            "694187e7d85faec3",
            "693e1ad09770bdf5",
            "82a3257cd0a3815d",
            "44ef242ece9b6b4b",
            "7433aae2400b7f78",
            "a90099cfe7a37a37",
            "df0dcb1175b8bd5f",
            "c6c66ebc50dd5d90"
        ],
        "x": 14,
        "y": 279,
        "w": 1172,
        "h": 542
    },
    {
        "id": "e6ae26617c24c3ea",
        "type": "ui-base",
        "name": "PlanktoScope GUI v.2",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": true,
        "headerContent": "dashpage",
        "navigationStyle": "icon",
        "titleBarStyle": "fixed",
        "showReconnectNotification": true,
        "notificationDisplayTime": "1",
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "8dc3722c.06efa8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0.0.0.0",
        "port": "1883",
        "clientid": "Client_node",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "81a80e32347ff991",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#5900ce",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#5900ce",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#7e1bff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#5900ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "PlanktoScope",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "Y-MM-DD",
            "sizes": {
                "sx": 55,
                "sy": 55,
                "gx": 4,
                "gy": 4,
                "cx": 4,
                "cy": 4,
                "px": 4,
                "py": 4
            }
        }
    },
    {
        "id": "f7770f0b818c3a67",
        "type": "ui-theme",
        "name": "PlanktoScope GUI 2",
        "colors": {
            "surface": "#ffffff",
            "primary": "#1976d2",
            "bgPage": "#dedede",
            "groupBg": "#ffffff",
            "groupOutline": "#9c9c9c"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "11px",
            "groupBorderRadius": "4px",
            "widgetGap": "13px"
        }
    },
    {
        "id": "73070e06474249b4",
        "type": "ui-page",
        "name": "Metadata",
        "ui": "e6ae26617c24c3ea",
        "path": "/metadata",
        "icon": "information-outline",
        "layout": "grid",
        "theme": "f7770f0b818c3a67",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "dd015fda7456b9b0",
        "type": "ui-group",
        "name": "Navigation Top",
        "page": "73070e06474249b4",
        "width": "12",
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "69c772603e9cec0d",
        "type": "ui-group",
        "name": "Sample Information",
        "page": "73070e06474249b4",
        "width": "12",
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "6fab47af451c6d95",
        "type": "ui-group",
        "name": "Starting point",
        "page": "73070e06474249b4",
        "width": "6",
        "height": 1,
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "1cfe3062a8353012",
        "type": "ui-group",
        "name": "Ending point",
        "page": "73070e06474249b4",
        "width": "6",
        "height": 1,
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "cb3521392eb4e9ed",
        "type": "ui-group",
        "name": "Net Specificity",
        "page": "73070e06474249b4",
        "width": "12",
        "height": 1,
        "order": 5,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "dd4d9707051041c9",
        "type": "ui-group",
        "name": "Other informations",
        "page": "73070e06474249b4",
        "width": "12",
        "height": 1,
        "order": 6,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "59ce6abfbb7f8683",
        "type": "ui-group",
        "name": "Navigation Bottom",
        "page": "73070e06474249b4",
        "width": "12",
        "height": 1,
        "order": 7,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "7a4e042a60b734a6",
        "type": "ui-page",
        "name": "Segmentation",
        "ui": "e6ae26617c24c3ea",
        "path": "/segmentation",
        "icon": "crop",
        "layout": "grid",
        "theme": "f7770f0b818c3a67",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 5,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "bfd4acb7b243514f",
        "type": "ui-group",
        "name": "Table",
        "page": "7a4e042a60b734a6",
        "width": "8",
        "height": 1,
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "c8bb5168bda76add",
        "type": "ui-page",
        "d": true,
        "name": "Cron Experiment",
        "ui": "e6ae26617c24c3ea",
        "path": "/plots",
        "icon": "sync",
        "layout": "grid",
        "theme": "f7770f0b818c3a67",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 8,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "4a8738206c62b02e",
        "type": "ui-group",
        "name": "Plots",
        "page": "c8bb5168bda76add",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "7edf5f14f6ca0bdd",
        "type": "ui-group",
        "name": "Feed",
        "page": "c8bb5168bda76add",
        "width": 6,
        "height": 1,
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "e41267c4a14ba4af",
        "type": "ui-spacer",
        "group": "4a8738206c62b02e",
        "name": "spacer",
        "tooltip": "",
        "order": 4,
        "width": "6",
        "height": 1,
        "className": ""
    },
    {
        "id": "9d9ac37fd36c358e",
        "type": "ui-spacer",
        "group": "4a8738206c62b02e",
        "name": "spacer",
        "tooltip": "",
        "order": 7,
        "width": "6",
        "height": 1,
        "className": ""
    },
    {
        "id": "db02fe254c34125f",
        "type": "ui-spacer",
        "group": "4a8738206c62b02e",
        "name": "spacer",
        "tooltip": "",
        "order": 10,
        "width": "6",
        "height": 1,
        "className": ""
    },
    {
        "id": "ff024f7a460585b4",
        "type": "ui-spacer",
        "group": "4a8738206c62b02e",
        "name": "spacer",
        "tooltip": "",
        "order": 1,
        "width": "6",
        "height": 1,
        "className": ""
    },
    {
        "id": "f22f627015431032",
        "type": "ui-page",
        "name": "Calibration - Lightness",
        "ui": "e6ae26617c24c3ea",
        "path": "/calibration_lightness",
        "icon": "target-variant",
        "layout": "grid",
        "theme": "f7770f0b818c3a67",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 11,
        "className": "",
        "visible": "false",
        "disabled": "false"
    },
    {
        "id": "728c7ed3d63dfcee",
        "type": "ui-group",
        "name": "Settings",
        "page": "f22f627015431032",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "aa9ba6cedf56d2cd",
        "type": "ui-page",
        "name": "Calibration - Pixel size",
        "ui": "e6ae26617c24c3ea",
        "path": "/calibration_pixel_size",
        "icon": "target-variant",
        "layout": "grid",
        "theme": "f7770f0b818c3a67",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 12,
        "className": "",
        "visible": "false",
        "disabled": "false"
    },
    {
        "id": "c966455a52d121c0",
        "type": "ui-group",
        "name": "Settings",
        "page": "aa9ba6cedf56d2cd",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "48216bc1f7c53a75",
        "type": "ui-page",
        "name": "Calibration - Pump",
        "ui": "e6ae26617c24c3ea",
        "path": "/calibration_pump",
        "icon": "target-variant",
        "layout": "grid",
        "theme": "f7770f0b818c3a67",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 13,
        "className": "",
        "visible": "false",
        "disabled": "false"
    },
    {
        "id": "6039d653304537af",
        "type": "ui-group",
        "name": "Settings",
        "page": "48216bc1f7c53a75",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "803aa402d5c66b73",
        "type": "ui-page",
        "name": "Calibration - Saturation Level",
        "ui": "e6ae26617c24c3ea",
        "path": "/calibration_saturation_level",
        "icon": "target-variant",
        "layout": "grid",
        "theme": "f7770f0b818c3a67",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 10,
        "className": "",
        "visible": "false",
        "disabled": "false"
    },
    {
        "id": "af8acdfe9afbad74",
        "type": "ui-group",
        "name": "Settings",
        "page": "803aa402d5c66b73",
        "width": "12",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "f8dd620721c6d70b",
        "type": "ui-page",
        "name": "Calibration",
        "ui": "e6ae26617c24c3ea",
        "path": "/calibration",
        "icon": "mdi-tune",
        "layout": "grid",
        "theme": "f7770f0b818c3a67",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 9,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "c29c835a70533b69",
        "type": "ui-group",
        "name": "header",
        "page": "f8dd620721c6d70b",
        "width": "12",
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "822cdc5b6ef13f39",
        "type": "ui-group",
        "name": "body",
        "page": "f8dd620721c6d70b",
        "width": "12",
        "height": 1,
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "518a4242f548c1f2",
        "type": "ui-group",
        "name": "links",
        "page": "f8dd620721c6d70b",
        "width": "12",
        "height": 1,
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "bcc78241b99ba27f",
        "type": "ui-page",
        "name": "Preview",
        "ui": "e6ae26617c24c3ea",
        "path": "/preview",
        "icon": "mdi-eye",
        "layout": "grid",
        "theme": "f7770f0b818c3a67",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "58ab4d5e3dd68192",
        "type": "ui-group",
        "name": "Streaming",
        "page": "bcc78241b99ba27f",
        "width": "7",
        "height": 1,
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "39cbd2658f16d608",
        "type": "ui-group",
        "name": "Settings",
        "page": "bcc78241b99ba27f",
        "width": "5",
        "height": 1,
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "5c3e73c675caac42",
        "type": "ui-page",
        "name": "Acquisition",
        "ui": "e6ae26617c24c3ea",
        "path": "/acquisition",
        "icon": "video-image",
        "layout": "grid",
        "theme": "f7770f0b818c3a67",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 4,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "b274327af3807b79",
        "type": "ui-group",
        "name": "Streaming",
        "page": "5c3e73c675caac42",
        "width": "7",
        "height": 1,
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "d2f77573ed4317e4",
        "type": "ui-group",
        "name": "Acquisition settings",
        "page": "5c3e73c675caac42",
        "width": "5",
        "height": 1,
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "632260133d581caa",
        "type": "ui-page",
        "name": "Home",
        "ui": "e6ae26617c24c3ea",
        "path": "/home",
        "icon": "home",
        "layout": "grid",
        "theme": "f7770f0b818c3a67",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "713fd4c3b9030f45",
        "type": "ui-group",
        "name": "body",
        "page": "632260133d581caa",
        "width": "12",
        "height": "1",
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "5d39a98563150f22",
        "type": "ui-group",
        "name": "header",
        "page": "632260133d581caa",
        "width": "12",
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "7572915171e440cd",
        "type": "ui-group",
        "name": "Navigation Top",
        "page": "bcc78241b99ba27f",
        "width": "12",
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "3ae252a2e5abca89",
        "type": "ui-group",
        "name": "Navigation Top",
        "page": "5c3e73c675caac42",
        "width": "12",
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "55c2fe64e681037d",
        "type": "ui-group",
        "name": "Navigation bottom",
        "page": "bcc78241b99ba27f",
        "width": "12",
        "height": 1,
        "order": 4,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "3d88a1872dbbf8a7",
        "type": "ui-group",
        "name": "Navigation bottom",
        "page": "5c3e73c675caac42",
        "width": "12",
        "height": 1,
        "order": 4,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "9b992ca6515ed058",
        "type": "ui-group",
        "name": "Navigation Top",
        "page": "7a4e042a60b734a6",
        "width": "12",
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "9f00807878a32dd5",
        "type": "ui-group",
        "name": "Navigation Bottom",
        "page": "7a4e042a60b734a6",
        "width": "12",
        "height": 1,
        "order": 4,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "d129fac8e7742d5b",
        "type": "ui-page",
        "name": "Visualization",
        "ui": "e6ae26617c24c3ea",
        "path": "/visualization",
        "icon": "chart-scatter-plot",
        "layout": "grid",
        "theme": "f7770f0b818c3a67",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 6,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "b570f76ef526af45",
        "type": "ui-group",
        "name": "Navigation Top",
        "page": "d129fac8e7742d5b",
        "width": "12",
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "1d3abb201c51ff47",
        "type": "ui-group",
        "name": "Navigation Bottom",
        "page": "d129fac8e7742d5b",
        "width": "12",
        "height": 1,
        "order": 5,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "fa6393a7d7e3b7d7",
        "type": "ui-group",
        "name": "Plots Left",
        "page": "d129fac8e7742d5b",
        "width": 6,
        "height": 1,
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "d9e5a1ba9059ca02",
        "type": "ui-page",
        "name": "Export",
        "ui": "e6ae26617c24c3ea",
        "path": "/export",
        "icon": "export",
        "layout": "grid",
        "theme": "f7770f0b818c3a67",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 7,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "1c2cd2bf4d4ab815",
        "type": "ui-group",
        "name": "Navigation Top",
        "page": "d9e5a1ba9059ca02",
        "width": "12",
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "5d3c24612267b256",
        "type": "ui-group",
        "name": "Navigation bottom",
        "page": "d9e5a1ba9059ca02",
        "width": "12",
        "height": 1,
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "d1c2dcd580716d02",
        "type": "ui-group",
        "name": "Viewer",
        "page": "d9e5a1ba9059ca02",
        "width": "12",
        "height": 1,
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "ed357f41cdf951bc",
        "type": "ui-group",
        "name": "x vs y",
        "page": "d129fac8e7742d5b",
        "width": "12",
        "height": 1,
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "bdcb68c6cff2da73",
        "type": "ui-group",
        "name": "Plot Right",
        "page": "d129fac8e7742d5b",
        "width": 6,
        "height": 1,
        "order": 4,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "402b3d24c87ab0d2",
        "type": "ui-group",
        "name": "Group 53",
        "page": "7a4e042a60b734a6",
        "width": "4",
        "height": 1,
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "5447fb7a420dfdc6",
        "type": "ui-page",
        "name": "Settings",
        "ui": "e6ae26617c24c3ea",
        "path": "/settings",
        "icon": "cog",
        "layout": "grid",
        "theme": "f7770f0b818c3a67",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 14,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "070185f2b69cf66d",
        "type": "ui-group",
        "name": "admin",
        "page": "5447fb7a420dfdc6",
        "width": "12",
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "e11ae78aee22fab5",
        "type": "ui-page",
        "name": "Hardware",
        "ui": "e6ae26617c24c3ea",
        "path": "/hardware",
        "icon": "robot",
        "layout": "grid",
        "theme": "f7770f0b818c3a67",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 15,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "9d212165f2367f01",
        "type": "ui-group",
        "name": "Group 51",
        "page": "e11ae78aee22fab5",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "82099021.9ceb08",
        "type": "file",
        "z": "4ed26b8b.253504",
        "name": "",
        "filename": "/home/pi/PlanktoScope/hardware.json",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 660,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "bb0a8725.a1849",
        "type": "json",
        "z": "4ed26b8b.253504",
        "name": "Create JSON",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 490,
        "y": 40,
        "wires": [
            [
                "82099021.9ceb08"
            ]
        ]
    },
    {
        "id": "53d163be.47cf24",
        "type": "function",
        "z": "4ed26b8b.253504",
        "name": "Update and retrieve hardware_conf",
        "func": "// change global\nhardware_conf = global.get(\"hardware_conf\");\n\nif (msg.topic == \"process_pixel_fixed\" && msg.payload == 0){\n    delete hardware_conf[msg.topic]\n    delete msg.topic\n}\n\nif (msg.topic !== null && msg.topic !== undefined){\n    hardware_conf[msg.topic] = msg.payload;\n    global.set(\"hardware_conf\", hardware_conf);\n}\n\nreturn {\"payload\": hardware_conf};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 40,
        "wires": [
            [
                "bb0a8725.a1849"
            ]
        ]
    },
    {
        "id": "0f16258953fae292",
        "type": "file in",
        "z": "b7861ce703215a01",
        "name": "",
        "filename": "/home/pi/PlanktoScope/hardware.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 250,
        "y": 40,
        "wires": [
            [
                "81c516291ab19acd"
            ]
        ],
        "info": "# PlanktoScope Help\nThis Node will read the content of the file named **config.txt** containing all the input placeholders.\n"
    },
    {
        "id": "81c516291ab19acd",
        "type": "json",
        "z": "b7861ce703215a01",
        "name": "Parse JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 40,
        "wires": [
            [
                "d0fbcd200cd09981"
            ]
        ]
    },
    {
        "id": "d0fbcd200cd09981",
        "type": "change",
        "z": "b7861ce703215a01",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "hardware_conf",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "730b2780ac215a52",
        "type": "file in",
        "z": "63c85b96537b7355",
        "name": "",
        "filename": "/home/pi/PlanktoScope/config.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 560,
        "y": 60,
        "wires": [
            [
                "e0b7238a0c5d4ed0"
            ]
        ],
        "info": "# PlanktoScope Help\nThis Node will read the content of the file named **config.txt** containing all the input placeholders.\n"
    },
    {
        "id": "e0b7238a0c5d4ed0",
        "type": "json",
        "z": "63c85b96537b7355",
        "name": "config.json",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 730,
        "y": 60,
        "wires": [
            [
                "f1c0a882a9e3d927"
            ]
        ]
    },
    {
        "id": "b8109badf5f39d35",
        "type": "file",
        "z": "63c85b96537b7355",
        "name": "",
        "filename": "/home/pi/PlanktoScope/config.json",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 990,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "31ae9b857627673c",
        "type": "json",
        "z": "63c85b96537b7355",
        "name": "config.json",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 730,
        "y": 160,
        "wires": [
            [
                "b8109badf5f39d35"
            ]
        ]
    },
    {
        "id": "f1c0a882a9e3d927",
        "type": "function",
        "z": "63c85b96537b7355",
        "name": "Global Set",
        "func": "global.set(\"config_keys\", Object.keys(msg.payload));\n\nfor (const key in msg.payload) {\n    global.set(key, msg.payload[key]);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "24ea99bb02eeffa2",
        "type": "inject",
        "z": "63c85b96537b7355",
        "name": "Load config",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 230,
        "y": 60,
        "wires": [
            [
                "730b2780ac215a52"
            ]
        ]
    },
    {
        "id": "5248e5e225d854d1",
        "type": "function",
        "z": "63c85b96537b7355",
        "name": "get config payload",
        "func": "keys = global.get(\"config_keys\")\n\nvar payload = {}\n\nkeys.forEach(function(item, index, array) {\n  payload[item] = global.get(item);\n})\n\nreturn {\"payload\": payload};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": [
            [
                "31ae9b857627673c"
            ]
        ]
    },
    {
        "id": "97f8a94e71055782",
        "type": "ui_ui_control",
        "z": "63c85b96537b7355",
        "name": "Connect Event",
        "events": "connect",
        "x": 220,
        "y": 100,
        "wires": [
            [
                "730b2780ac215a52"
            ]
        ]
    },
    {
        "id": "39c370d8a50f3acc",
        "type": "ui-template",
        "z": "1b667c6443413ced",
        "group": "713fd4c3b9030f45",
        "page": "",
        "ui": "",
        "name": "body",
        "order": 1,
        "width": "12",
        "height": "8",
        "head": "",
        "format": "<template>\n    <v-container>\n      <v-row>\n        <!-- First Row: Larger cards with icon centered above title -->\n        <v-col cols=\"12\" md=\"4\">\n          <v-card\n            href=\"preview\"\n            class=\"text-center py-2\"\n            variant=\"flat\"\n          >\n            <v-icon size=\"64\" color=\"primary\">mdi-eye</v-icon>\n            <v-card-title class=\"text-h6\">Launch the Preview</v-card-title>\n            <v-card-text>Access a real-time, high-resolution preview to inspect the contents of your current water sample.</v-card-text>\n          </v-card>\n        </v-col>\n\n        <v-col cols=\"12\" md=\"4\">\n          <v-card\n            href=\"metadata\"\n            class=\"text-center py-2\"\n            variant=\"outlined\"\n          >\n            <v-icon size=\"64\" color=\"primary\">mdi-play-circle</v-icon>\n            <v-card-title class=\"text-h6\">Start Acquisition</v-card-title>\n            <v-card-text>Start a new acquisition process to continuously collect images and metadata from your PlanktoScope.</v-card-text>\n          </v-card>\n        </v-col>\n\n        <v-col cols=\"12\" md=\"4\">\n          <v-card\n            href=\"visualization\"\n            target=\"_blank\"\n            class=\"text-center py-2\"\n            variant=\"outlined\"\n          >\n            <v-icon size=\"64\" color=\"primary\">mdi-database-search</v-icon>\n            <v-card-title class=\"text-h6\">Explore Your Data</v-card-title>\n            <v-card-text>Open the data explorer to review, categorize, and interpret all previously captured sample information.</v-card-text>\n          </v-card>\n        </v-col>\n      </v-row>\n\n      <!-- Second Row: Standard size cards -->\n      <v-row>\n        <v-col cols=\"12\" md=\"4\">\n          <v-card\n            href=\"/ps/docs/operation/protocol-v4.pdf\"\n            target=\"_blank\"\n            variant=\"outlined\"\n          >\n            <v-card-title>\n              <v-icon class=\"mr-2\" color=\"primary\">mdi-book-open-variant</v-icon>\n              Learn the Basics\n            </v-card-title>\n            <v-card-text>Find detailed instructions on using your PlanktoScope.</v-card-text>\n          </v-card>\n        </v-col>\n\n        <v-col cols=\"12\" md=\"4\">\n          <v-card\n            href=\"http://pkscope-rich-kettle-10463.local/admin/grafana/d/host-summary/host-summary?orgId=1&from=now-5m&to=now&timezone=browser&var-DS_PROMETHEUS=PBFA97CFB590B2093&var-job=node-exporter&var-node=host.docker.internal:9100&var-diskdevices=%5Ba-z%5D%2B%7Cnvme%5B0-9%5D%2Bn%5B0-9%5D%2B%7Cmmcblk%5B0-9%5D%2B&refresh=5s\"\n            target=\"_blank\"\n            variant=\"outlined\"\n          >\n            <v-card-title>\n              <v-icon class=\"mr-2\" color=\"primary\">mdi-speedometer</v-icon>\n              Monitoring\n            </v-card-title>\n            <v-card-text>Keep track of system status and performance metrics.</v-card-text>\n          </v-card>\n        </v-col>\n\n        <v-col cols=\"12\" md=\"4\">\n          <v-card\n            href=\"calibration\"\n            variant=\"outlined\"\n          >\n            <v-card-title>\n              <v-icon class=\"mr-2\" color=\"primary\">mdi-tune</v-icon>\n              Calibration\n            </v-card-title>\n            <v-card-text>Adjust and verify settings for consistent results.</v-card-text>\n          </v-card>\n        </v-col>\n      </v-row>\n\n      <!-- Third Row: Standard size cards -->\n      <v-row>\n        <v-col :cols=\"12\" :md=\"msg.payload.machine_info.serial_number ? 3 : 4\">\n          <v-card variant=\"tonal\">\n            <v-card-title>\n              <v-icon class=\"mr-2\" color=\"primary\">mdi-cube-outline</v-icon>\n              Model of your machine\n            </v-card-title>\n            <v-card-text>{{ msg.payload.machine_info.hardware_version }}</v-card-text>\n          </v-card>\n        </v-col>\n\n        <v-col cols=\"12\" md=\"3\" v-if=\"msg.payload.machine_info.serial_number\">\n          <v-card variant=\"tonal\">\n            <v-card-title>\n              <v-icon class=\"mr-2\" color=\"primary\">mdi-barcode-scan</v-icon>\n              Serial number\n            </v-card-title>\n            <v-card-text>{{ msg.payload.machine_info.serial_number }}</v-card-text>\n          </v-card>\n        </v-col>\n\n        <v-col :cols=\"12\" :md=\"msg.payload.machine_info.serial_number ? 3 : 4\">\n          <v-card variant=\"tonal\">\n            <v-card-title>\n              <v-icon class=\"mr-2\" color=\"primary\">mdi-label-outline</v-icon>\n              Name of your machine\n            </v-card-title>\n            <v-card-text>{{ msg.payload.machine_info.machine_name }}</v-card-text>\n          </v-card>\n        </v-col>\n\n        <v-col :cols=\"12\" :md=\"msg.payload.machine_info.serial_number ? 3 : 4\">\n          <v-card variant=\"tonal\">\n            <v-card-title>\n              <v-icon class=\"mr-2\" color=\"primary\">mdi-code-tags</v-icon>\n              Software version\n            </v-card-title>\n            <v-card-text>{{ msg.payload.machine_info.software_version }}</v-card-text>\n          </v-card>\n        </v-col>\n      </v-row>\n\n    </v-container>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 370,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "1cf1b20e425ec126",
        "type": "ui-template",
        "z": "1b667c6443413ced",
        "group": "",
        "page": "",
        "ui": "e6ae26617c24c3ea",
        "name": "footer",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-footer class=\"pa-6\">\n    <v-container>\n      <!-- Top Section -->\n      <v-row justify=\"space-between\" align=\"start\">\n        <!-- Branding -->\n        <v-col cols=\"12\" md=\"4\">\n          <h4 class=\"font-weight-bold mb-2\">PlanktoScope</h4>\n          <p class=\"mb-3\">\n            Open and Affordable Quantitative Imaging Platform.\n          </p>\n        </v-col>\n\n        <!-- Action Links -->\n        <v-col cols=\"12\" md=\"8\" class=\"d-flex flex-wrap justify-end\">\n          <v-chip\n            size=\"small\"\n            color=\"grey-darken-3\"\n            href=\"https://www.fairscope.com/\"\n            target=\"_blank\"\n            class=\"mx-2 my-1\"\n          >\n            <v-icon color=\"blue\" class=\"mr-1\">mdi-earth</v-icon>\n            Visit FairScope\n          </v-chip>\n\n          <v-chip\n            size=\"small\"\n            color=\"grey-darken-3\"\n            href=\"https://www.figma.com/design/KXH3qkalr7eeFbyGsutZKt/PlanktoScope-Dashboard-v2?node-id=6-2&m=dev&t=Nn2N1o9OJveQCSco-1\"\n            target=\"_blank\"\n            class=\"mx-2 my-1\"\n          >\n            <v-icon color=\"primary\" class=\"mr-1\">mdi-image</v-icon>\n            Figma Design\n          </v-chip>\n\n          <v-chip\n            size=\"small\"\n            color=\"grey-darken-3\"\n            href=\"https://github.com/PlanktoScope/PlanktoScope/issues/new?template=software-bug-report.md\"\n            target=\"_blank\"\n            class=\"mx-2 my-1\"\n          >\n            <v-icon color=\"red\" class=\"mr-1\">mdi-bug</v-icon>\n            Report a Bug\n          </v-chip>\n\n          <v-chip\n            size=\"small\"\n            color=\"grey-darken-3\"\n            href=\"https://github.com/PlanktoScope/PlanktoScope/issues\"\n            target=\"_blank\"\n            class=\"mx-2 my-1\"\n          >\n            <v-icon color=\"orange\" class=\"mr-1\">mdi-information-outline</v-icon>\n            Open Issues\n          </v-chip>\n\n          <v-chip\n            size=\"small\"\n            color=\"grey-darken-3\"\n            href=\"https://github.com/PlanktoScope/dashboard\"\n            target=\"_blank\"\n            class=\"mx-2 my-1\"\n          >\n            <v-icon color=\"black\" class=\"mr-1\">mdi-github</v-icon>\n            GitHub Repo\n          </v-chip>\n\n          <v-chip\n            size=\"small\"\n            color=\"grey-darken-3\"\n            href=\"https://github.com/PlanktoScope/PlanktoScope/graphs/contributors\"\n            target=\"_blank\"\n            class=\"mx-2 my-1\"\n          >\n            <v-icon color=\"green\" class=\"mr-1\">mdi-account-group</v-icon>\n            Contributors\n          </v-chip>\n        </v-col>\n      </v-row>\n\n      <v-divider class=\"my-4 opacity-50\"></v-divider>\n\n      <!-- Bottom Section -->\n      <v-row justify=\"space-between\" align=\"center\">\n      <v-col cols=\"12\" md=\"6\">\n        © {{ new Date().getFullYear() }} PlanktoScope — made by \n        <a href=\"https://fairscope.co\" target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration: none; color: inherit;\">\n          FairScope\n        </a>\n      </v-col>\n\n      </v-row>\n    </v-container>\n  </v-footer>\n</template>\n\n<script>\nexport default {\n  name: 'AppFooter',\n}\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "widget:ui",
        "className": "",
        "x": 370,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "cd5cd3a0277b8dba",
        "type": "ui-template",
        "z": "1b667c6443413ced",
        "group": "5d39a98563150f22",
        "page": "",
        "ui": "",
        "name": "header",
        "order": 1,
        "width": "12",
        "height": "6",
        "head": "",
        "format": "<template>\n  <v-empty-state\n    headline=\"Welcome on the PlanktoScope GUI,\"\n    icon=\"$vuetify\"\n    title=\"What would you like to do today?\"\n  >\n  </v-empty-state>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 370,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "67b871e8f9c64c2b",
        "type": "switch",
        "z": "1b667c6443413ced",
        "name": "msg.payload.page.path === \"/home\"",
        "property": "payload.page.path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/home",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 570,
        "y": 40,
        "wires": [
            [
                "abe86c4e9dedb557"
            ]
        ]
    },
    {
        "id": "e74e4d04e4a79458",
        "type": "switch",
        "z": "1b667c6443413ced",
        "name": "msg.topic === \"$pageview\"",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$pageview",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 40,
        "wires": [
            [
                "67b871e8f9c64c2b"
            ]
        ]
    },
    {
        "id": "7c16cbd0b2c40ea4",
        "type": "ui-event",
        "z": "1b667c6443413ced",
        "ui": "e6ae26617c24c3ea",
        "name": "UI Event",
        "x": 80,
        "y": 40,
        "wires": [
            [
                "e74e4d04e4a79458"
            ]
        ]
    },
    {
        "id": "5d4e95854b504124",
        "type": "ui-template",
        "z": "1b667c6443413ced",
        "group": "",
        "page": "",
        "ui": "e6ae26617c24c3ea",
        "name": "CSS (All Pages)",
        "order": 0,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "  .v-btn--variant-outlined.v-btn--active {\n    background-color: #1976d2 !important;\n    color: white !important;\n  }\n\n\n.v-row+.v-row {\n    margin-top: 0px !important;\n}\n\n.v-row {\n    margin: 0px !important;\n}",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "site:style",
        "className": "",
        "x": 1300,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "abe86c4e9dedb557",
        "type": "get machine info",
        "z": "1b667c6443413ced",
        "name": "",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "39c370d8a50f3acc"
            ]
        ]
    },
    {
        "id": "a57a165cd0ce511b",
        "type": "ui-template",
        "z": "ab58b3fd0e6bcd77",
        "group": "58ab4d5e3dd68192",
        "page": "",
        "ui": "",
        "name": "Streaming",
        "order": 1,
        "width": "7",
        "height": "18",
        "head": "",
        "format": "  <iframe \n    src=\"/preview\" \n>\n  </iframe>\n  <style>\n    iframe {\n      width: 100%;\n      height: 100%;\n      margin: 0;\n      border: none;\n    }\n  </style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1310,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "c8de0186a0a927e8",
        "type": "function",
        "z": "ab58b3fd0e6bcd77",
        "name": "Get Global Variables",
        "func": "const keys = global.keys(); // Get all global variable keys\nmsg.payload = {}; // Initialize the payload object\n\nkeys.forEach(key => {\n    // Ignore keys that start with \"$\"\n    if (!key.startsWith('$')) {\n        msg.payload[key] = global.get(key);\n    }\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 140,
        "wires": [
            [
                "f514a138d38d3c61"
            ]
        ]
    },
    {
        "id": "927b92eee9edfcbe",
        "type": "ui-template",
        "z": "ab58b3fd0e6bcd77",
        "group": "7572915171e440cd",
        "page": "",
        "ui": "",
        "name": "Navigation Top",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-container fluid class=\"ma-0 pa-0\">\n    <v-row align=\"center\" justify=\"space-between\" class=\"px-2\">\n      <!-- Back to Home -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"home\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          <v-icon start>mdi-chevron-left</v-icon>\n          Home\n        </v-btn>\n      </v-col>\n\n      <!-- Forward to Metadata -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"metadata\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          Metadata\n          <v-icon end>mdi-chevron-right</v-icon>\n        </v-btn>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1300,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "8d5eadf60a2fd54b",
        "type": "switch",
        "z": "ab58b3fd0e6bcd77",
        "name": "msg.topic === \"$pageview\"",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$pageview",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 40,
        "wires": [
            [
                "6074fc31218f9a74"
            ]
        ]
    },
    {
        "id": "da4fbaab826b0d62",
        "type": "ui-event",
        "z": "ab58b3fd0e6bcd77",
        "ui": "e6ae26617c24c3ea",
        "name": "UI Event",
        "x": 80,
        "y": 40,
        "wires": [
            [
                "8d5eadf60a2fd54b"
            ]
        ]
    },
    {
        "id": "6074fc31218f9a74",
        "type": "switch",
        "z": "ab58b3fd0e6bcd77",
        "name": "msg.payload.page.path === \"/preview\"",
        "property": "payload.page.path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/preview",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 580,
        "y": 40,
        "wires": [
            [
                "c8de0186a0a927e8"
            ]
        ]
    },
    {
        "id": "6d0408bb7ca6e5f3",
        "type": "function",
        "z": "ab58b3fd0e6bcd77",
        "name": "set pump settings",
        "func": "if (msg.topic) {\n    global.set(\"pump_flowrate\", msg.payload.pump_flowrate);\n    global.set(\"pump_manual_volume\", msg.payload.pump_manual_volume);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "4a208e0233bea4ae",
        "type": "function",
        "z": "ab58b3fd0e6bcd77",
        "name": "set focus settings",
        "func": "if (msg.topic) {\n    global.set(\"focus_distance\", msg.payload.focus_distance);\n\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ea8e81951587e46d",
        "type": "mqtt out",
        "z": "ab58b3fd0e6bcd77",
        "name": "MQTT",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8dc3722c.06efa8",
        "x": 770,
        "y": 340,
        "wires": []
    },
    {
        "id": "4112a93b1b129756",
        "type": "switch",
        "z": "ab58b3fd0e6bcd77",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "set_global/pump",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "actuator/pump",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set_global/focus",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "actuator/focus",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "light",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 550,
        "y": 160,
        "wires": [
            [
                "6d0408bb7ca6e5f3"
            ],
            [
                "ea8e81951587e46d"
            ],
            [
                "4a208e0233bea4ae"
            ],
            [
                "ea8e81951587e46d"
            ],
            [
                "ea8e81951587e46d",
                "1d591029bae11418"
            ]
        ]
    },
    {
        "id": "f514a138d38d3c61",
        "type": "ui-template",
        "z": "ab58b3fd0e6bcd77",
        "group": "39cbd2658f16d608",
        "page": "",
        "ui": "",
        "name": "Settings",
        "order": 1,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<template>\n  <v-container fluid>\n    <!-- PUMP CONTROL -->\n    <v-card class=\"mb-6\" variant=\"outlined\">\n      <v-card-title>\n        Pump Control\n      </v-card-title>\n      <v-card-text>\n        <!-- Flowrate -->\n        <v-row align=\"center\">\n          <v-col :cols=\"isTablet ? 4 : 8\">\n            <v-slider\n              v-model.number=\"pump_flowrate\"\n              :min=\"minFlow\"\n              :max=\"maxFlow\"\n              :step=\"0.2\"\n              hide-details\n              :thumb-size=\"isTablet ? 12 : 20\"\n              :track-size=\"isTablet ? 2 : 4\"\n            />\n          </v-col>\n          <v-col :cols=\"isTablet ? 8 : 4\">\n            <v-text-field\n              v-model.number=\"pump_flowrate\"\n              type=\"number\"\n              variant=\"outlined\"\n              hide-details\n              suffix=\"ml/min\"\n              :density=\"isTablet ? 'comfortable' : 'default'\"\n              :style=\"isTablet ? 'font-size: 1.3rem; width: 100%;' : ''\"\n              append-icon=\"mdi-information\"\n              @click:append=\"showInfo('pump_flowrate')\"\n            />\n          </v-col>\n        </v-row>\n\n        <!-- Flowrate presets -->\n        <v-row>\n          <v-col cols=\"12\">\n            <v-btn-toggle\n              v-model=\"pump_flowrate_preset\"\n              class=\"d-flex justify-space-between\"\n              color=\"primary\"\n              variant=\"outlined\"\n              divided\n              shaped\n              mandatory\n              @update:model-value=\"onFlowrateToggle\"\n            >\n              <v-btn\n                v-for=\"value in pump_flowrate_presets\"\n                :key=\"'flowrate-' + value\"\n                :value=\"value\"\n                class=\"flex-grow-1\"\n              >\n                {{ value }}\n              </v-btn>\n            </v-btn-toggle>\n          </v-col>\n        </v-row>\n\n        <!-- Volume -->\n        <v-row align=\"center\">\n          <v-col :cols=\"isTablet ? 4 : 8\">\n            <v-slider\n              v-model.number=\"pump_manual_volume\"\n              :min=\"minFlow\"\n              :max=\"maxFlow\"\n              :step=\"0.2\"\n              hide-details\n              :thumb-size=\"isTablet ? 12 : 20\"\n              :track-size=\"isTablet ? 2 : 4\"\n            />\n          </v-col>\n          <v-col :cols=\"isTablet ? 8 : 4\">\n            <v-text-field\n              v-model.number=\"pump_manual_volume\"\n              type=\"number\"\n              variant=\"outlined\"\n              hide-details\n              suffix=\"ml\"\n              :density=\"isTablet ? 'comfortable' : 'default'\"\n              :style=\"isTablet ? 'font-size: 1.3rem; width: 100%;' : ''\"\n              append-icon=\"mdi-information\"\n              @click:append=\"showInfo('pump_manual_volume')\"\n            />\n          </v-col>\n        </v-row>\n\n        <!-- Volume presets -->\n        <v-row>\n          <v-col cols=\"12\">\n            <v-btn-toggle\n              v-model=\"pump_volume_preset\"\n              class=\"d-flex justify-space-between\"\n              variant=\"outlined\"\n              color=\"primary\"\n              divided\n              shaped\n              mandatory\n              @update:model-value=\"onVolumeToggle\"\n            >\n              <v-btn\n                v-for=\"value in pump_volume_presets\"\n                :key=\"'volume-' + value\"\n                :value=\"value\"\n                class=\"flex-grow-1\"\n              >\n                {{ value }}\n              </v-btn>\n            </v-btn-toggle>\n          </v-col>\n        </v-row>\n\n        <!-- Pump direction -->\n        <v-row>\n          <v-col cols=\"12\">\n            <v-btn-toggle\n              variant=\"outlined\"\n              v-model=\"pump_direction\"\n              color=\"primary\"\n              mandatory\n              divided\n              shaped\n              class=\"d-flex justify-space-between\"\n              @update:model-value=\"on_pump_direction_change\"\n            >\n              <v-btn class=\"flex-grow-1\" :value=\"'backward'\">Backward</v-btn>\n              <v-btn class=\"flex-grow-1\" :value=\"'stop'\">Stop</v-btn>\n              <v-btn class=\"flex-grow-1\" :value=\"'forward'\">Forward</v-btn>\n            </v-btn-toggle>\n          </v-col>\n        </v-row>\n      </v-card-text>\n    </v-card>\n\n    <!-- FOCUS CONTROL -->\n    <v-card class=\"mb-6\" variant=\"outlined\">\n      <v-card-title>\n        Focus Control\n      </v-card-title>\n      <v-card-text>\n        <!-- Focus slider -->\n        <v-row align=\"center\">\n          <v-col :cols=\"isTablet ? 4 : 8\">\n            <v-slider\n              v-model.number=\"focus_distance\"\n              :max=\"maxFocus\"\n              :min=\"minFocus\"\n              :step=\"25\"\n              hide-details\n              :thumb-size=\"isTablet ? 12 : 20\"\n              :track-size=\"isTablet ? 2 : 4\"\n            />\n          </v-col>\n          <v-col :cols=\"isTablet ? 8 : 4\">\n            <v-text-field\n              v-model.number=\"focus_distance\"\n              type=\"number\"\n              variant=\"outlined\"\n              hide-details\n              suffix=\"μm\"\n              :density=\"isTablet ? 'comfortable' : 'default'\"\n              :style=\"isTablet ? 'font-size: 1.3rem; width: 100%;' : ''\"\n              append-icon=\"mdi-information\"\n              @click:append=\"showInfo('focus_speed')\"\n            />\n          </v-col>\n        </v-row>\n\n        <!-- Presets -->\n        <v-row>\n          <v-col cols=\"12\">\n            <v-btn-toggle\n              variant=\"outlined\"\n              v-model=\"focus_distance_preset\"\n              divided\n              shaped\n              color=\"primary\"\n              class=\"d-flex justify-space-between\"\n              mandatory\n              @update:model-value=\"on_focus_distance_toggle\"\n            >\n              <v-btn\n                v-for=\"value in focus_distance_presets\"\n                :key=\"'distance-' + value\"\n                :value=\"value\"\n                class=\"flex-grow-1\"\n              >\n                {{ value }}\n              </v-btn>\n            </v-btn-toggle>\n          </v-col>\n        </v-row>\n\n        <!-- Focus direction -->\n        <v-row>\n          <v-col cols=\"12\">\n            <v-btn-toggle\n              variant=\"outlined\"\n              v-model=\"focus_direction\"\n              color=\"primary\"\n              mandatory\n              divided\n              shaped\n              class=\"d-flex justify-space-between\"\n              @update:model-value=\"on_focus_direction_change\"\n            >\n              <v-btn class=\"flex-grow-1\" :value=\"'UP'\">UP</v-btn>\n              <v-btn class=\"flex-grow-1\" :value=\"'stop'\">Stop</v-btn>\n              <v-btn class=\"flex-grow-1\" :value=\"'DOWN'\">DOWN</v-btn>\n            </v-btn-toggle>\n          </v-col>\n        </v-row>\n      </v-card-text>\n    </v-card>\n\n    <!-- LED CONTROL -->\n    <v-card class=\"mb-6\" variant=\"outlined\">\n      <v-card-title>\n        LED Control\n      </v-card-title>\n      <v-card-text>\n        <v-row>\n          <v-col cols=\"12\">\n            <v-btn-toggle\n              variant=\"outlined\"\n              v-model=\"led_state\"\n              color=\"primary\"\n              mandatory\n              divided\n              shaped\n              class=\"d-flex justify-space-between\"\n              @update:model-value=\"on_led_toggle\"\n            >\n              <v-btn class=\"flex-grow-1\" :value=\"'off'\">Off</v-btn>\n              <v-btn class=\"flex-grow-1\" :value=\"'on'\">On</v-btn>\n            </v-btn-toggle>\n          </v-col>\n        </v-row>\n      </v-card-text>\n    </v-card>\n    \n<!-- CALIBRATION INFO -->\n<v-card variant=\"tonal\">\n  <v-card-title>\n    <v-icon class=\"mr-2\" color=\"primary\" size=\"large\">mdi-tune</v-icon>\n    Calibration\n  </v-card-title>\n  <v-card-text>\n    Modify your camera settings through the\n    <a href=\"calibration\" style=\"color: primary; text-decoration: underline;\">\n      calibration page\n    </a>.\n    Adjust optical parameters to ensure accurate imaging.\n  </v-card-text>\n</v-card>\n\n\n\n\n    <!-- INFO DIALOG -->\n    <v-dialog v-model=\"infoDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"text-h6\">{{ infoContent.title }}</v-card-title>\n        <v-card-text>\n          <p><strong>Unit:</strong> {{ infoContent.unit }}</p>\n          <p><strong>Description:</strong> {{ infoContent.description }}</p>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"primary\" text @click=\"infoDialog = false\">Close</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  props: { msg: { type: Object, default: () => ({}) } },\n  data() {\n    return {\n      minFlow: 0.02,\n      maxFlow: 30,\n      pump_flowrate: 0,\n      pump_manual_volume: 0,\n      pump_flowrate_presets: [0.02, 0.2, 2, 20],\n      pump_volume_presets: [0.004, 0.2, 2, 20],\n      pump_flowrate_preset: null,\n      pump_volume_preset: null,\n      pump_direction: \"stop\",\n      minFocus: 25,\n      maxFocus: 5000,\n      focus_distance: 25,\n      focus_distance_presets: [25, 150, 500, 5000],\n      focus_distance_preset: null,\n      focus_direction: \"stop\",\n      led_state: \"off\",\n      infoDialog: false,\n      infoContent: { title: \"\", unit: \"\", description: \"\" },\n    };\n  },\n  computed: {\n    isTablet() {\n      return this.$vuetify.display.mdAndDown;\n    },\n  },\n  created() {\n    this.hydrateFromMsg(this.msg);\n  },\n  watch: {\n    msg: { handler(newMsg) { this.hydrateFromMsg(newMsg); }, deep: true },\n    pump_flowrate(newVal) {\n      this.pump_flowrate_preset =\n        this.pump_flowrate_presets.find((val) => val === newVal) ?? null;\n      this.sendPumpParams();\n    },\n    pump_manual_volume(newVal) {\n      this.pump_volume_preset =\n        this.pump_volume_presets.find((val) => val === newVal) ?? null;\n      this.sendPumpParams();\n    },\n    focus_distance(newVal) {\n      this.focus_distance_preset =\n        this.focus_distance_presets.find((val) => val === newVal) ?? null;\n      this.sendFocusParams();\n    },\n  },\n  methods: {\n    hydrateFromMsg(m) {\n    const p = m?.payload ?? {};\n\n    // ✅ Handle status messages FIRST so toggle reverts correctly\n    if (m.topic === \"status/pump\" && p.status === \"Done\") {\n    this.pump_direction = \"stop\";\n    return;\n    }\n    if (m.topic === \"status/focus\" && p.status === \"Done\") {\n    this.focus_direction = \"stop\";\n    return;\n    }\n\n    // ✅ Handle LED status message (boot + runtime sync)\n    if (m.topic === \"status/light\" && \"status\" in p) {\n      const s = String(p.status).toLowerCase().trim();\n\n      if ([\"on\", \"true\", \"1\"].includes(s)) {\n        this.led_state = \"on\";\n      } else if ([\"off\", \"false\", \"0\"].includes(s)) {\n        this.led_state = \"off\";\n      } else {\n        this.led_state = \"off\";\n      }\n\n      return;\n    }\n\n\n    // 🔸 Regular actuator/global messages\n    this.pump_flowrate = p.flowrate ?? p.pump_flowrate ?? this.pump_flowrate;\n    this.pump_manual_volume = p.volume ?? p.pump_manual_volume ?? this.pump_manual_volume;\n\n    if ([\"backward\", \"stop\", \"forward\"].includes(p.command)) {\n    this.pump_direction = p.command;\n    }\n\n    this.focus_distance =\n    typeof p.focus_distance === \"number\" ? p.focus_distance : this.focus_distance;\n\n    if ([\"UP\", \"stop\", \"DOWN\"].includes(p.command)) {\n    this.focus_direction = p.command;\n    }\n\n    if (typeof p.ledState === \"string\") this.led_state = p.ledState;\n    else if (typeof p.action === \"string\" && [\"on\", \"off\"].includes(p.action))\n    this.led_state = p.action;\n    },\n\n\n    onFlowrateToggle(val) { if (val != null) this.pump_flowrate = val; },\n    onVolumeToggle(val) { if (val != null) this.pump_manual_volume = val; },\n    sendPumpParams() {\n      this.send({\n        topic: \"set_global/pump\",\n        payload: {\n          pump_flowrate: Number(this.pump_flowrate) || 0,\n          pump_manual_volume: Number(this.pump_manual_volume) || 0,\n        },\n      });\n    },\n    on_pump_direction_change(val) {\n      this.pump_direction = val;\n      if (val === \"stop\") {\n        this.send({ topic: \"actuator/pump\", payload: { action: \"stop\" } });\n      } else {\n        const dirUpper = val === \"forward\" ? \"FORWARD\" : \"BACKWARD\";\n        this.send({\n          topic: \"actuator/pump\",\n          payload: {\n            action: \"move\",\n            direction: dirUpper,\n            volume: Number(this.pump_manual_volume) || 0,\n            flowrate: Number(this.pump_flowrate) || 0,\n          },\n        });\n      }\n    },\n    on_focus_distance_toggle(val) { if (val != null) this.focus_distance = val; },\n    speedFromDistance(d) {\n      const x1 = 100, y1 = 1000, x2 = 1000, y2 = 2000, x3 = 5000, y3 = 5000;\n      if (d <= x1) return y1;\n      if (d >= x3) return y3;\n      if (d <= x2) {\n        const m = (y2 - y1) / (x2 - x1);\n        return Math.round(y1 + m * (d - x1));\n      }\n      const m = (y3 - y2) / (x3 - x2);\n      return Math.round(y2 + m * (d - x2));\n    },\n    sendFocusParams() {\n      const d = Number(this.focus_distance) || 25;\n      const speed = this.speedFromDistance(d);\n      this.send({\n        topic: \"set_global/focus\",\n        payload: { focus_distance: d, focus_speed: speed },\n      });\n    },\n    on_focus_direction_change(val) {\n      this.focus_direction = val;\n      if (val === \"stop\") {\n        this.send({ topic: \"actuator/focus\", payload: { action: \"stop\" } });\n      } else {\n        const d = Number(this.focus_distance) || 25;\n        const speed = this.speedFromDistance(d);\n        this.send({\n          topic: \"actuator/focus\",\n          payload: {\n            action: \"move\",\n            direction: val,\n            distance: d / 1000,\n            speed: speed / 1000,\n          },\n        });\n      }\n    },\n    on_led_toggle(val) {\n      if (!val) return;\n      this.led_state = val;\n      this.send({ topic: \"light\", payload: { action: val } });\n    },\n    showInfo(type) {\n      const infoMap = {\n        pump_flowrate: {\n          title: \"Flowrate (ml/min)\",\n          unit: \"ml/min\",\n          description: \"Flowrate of the pump during manual exploration\",\n        },\n        pump_manual_volume: {\n          title: \"Volume to pass (ml)\",\n          unit: \"ml\",\n          description: \"Volume displaced by the pump during manual exploration\",\n        },\n        focus_speed: {\n          title: \"Focus Speed (µm/sec)\",\n          unit: \"μm/s\",\n          description: \"Speed of the displacement by the focus plate during manual exploration\",\n        },\n      };\n      this.infoContent = infoMap[type] || {};\n      this.infoDialog = true;\n    },\n  },\n};\n</script>\n\n<style scoped>\n@media (max-width: 1024px) {\n  .v-text-field input {\n    font-size: 1.3rem !important;\n  }\n  .v-slider {\n    height: 2px !important;\n  }\n}\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 380,
        "y": 140,
        "wires": [
            [
                "4112a93b1b129756"
            ]
        ]
    },
    {
        "id": "cf663463da2a47a1",
        "type": "mqtt in",
        "z": "ab58b3fd0e6bcd77",
        "name": "",
        "topic": "status/pump",
        "qos": "0",
        "datatype": "json",
        "broker": "8dc3722c.06efa8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 90,
        "y": 200,
        "wires": [
            [
                "f514a138d38d3c61"
            ]
        ]
    },
    {
        "id": "1b2c14f14bbf80c2",
        "type": "mqtt in",
        "z": "ab58b3fd0e6bcd77",
        "name": "",
        "topic": "status/focus",
        "qos": "0",
        "datatype": "json",
        "broker": "8dc3722c.06efa8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 90,
        "y": 260,
        "wires": [
            [
                "f514a138d38d3c61"
            ]
        ]
    },
    {
        "id": "2321977c636b9849",
        "type": "ui-template",
        "z": "ab58b3fd0e6bcd77",
        "group": "55c2fe64e681037d",
        "page": "",
        "ui": "",
        "name": "Navigation Bottom",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-container fluid class=\"ma-0 pa-0\">\n    <v-row align=\"center\" justify=\"space-between\" class=\"px-2\">\n      <!-- Back to Home -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"home\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          <v-icon start>mdi-chevron-left</v-icon>\n          Home\n        </v-btn>\n      </v-col>\n\n      <!-- Forward to Metadata -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"metadata\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          Metadata\n          <v-icon end>mdi-chevron-right</v-icon>\n        </v-btn>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1290,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "1d591029bae11418",
        "type": "function",
        "z": "ab58b3fd0e6bcd77",
        "name": "set focus settings",
        "func": "if (msg.topic) {\n    global.set(\"led_status\", msg.payload.action);\n\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "44438204d4b0d21e",
        "type": "mqtt in",
        "z": "ab58b3fd0e6bcd77",
        "name": "",
        "topic": "status/light",
        "qos": "0",
        "datatype": "json",
        "broker": "8dc3722c.06efa8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 80,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "349d0f7644f26a62",
        "type": "ui-template",
        "z": "190b0c9aa75e8843",
        "group": "dd015fda7456b9b0",
        "page": "",
        "ui": "",
        "name": "Navigation Top",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "\n<template>\n  <v-container fluid class=\"ma-0 pa-0\">\n    <v-row align=\"center\" justify=\"space-between\" class=\"px-2\">\n      <!-- Back to Preview -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"preview\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          <v-icon start>mdi-chevron-left</v-icon>\n          Preview\n        </v-btn>\n      </v-col>\n\n      <!-- Forward to Acquisition -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"acquisition\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          Acquisition\n          <v-icon end>mdi-chevron-right</v-icon>\n        </v-btn>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1300,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "279f3ddada9cadaa",
        "type": "ui-template",
        "z": "190b0c9aa75e8843",
        "group": "69c772603e9cec0d",
        "page": "",
        "ui": "",
        "name": "Sample Information",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <!-- Project Metadata Inputs -->\n  <v-row class=\"mt-2\">\n    <!-- Project Name -->\n    <v-col cols=\"12\" md=\"4\">\n      <v-text-field v-model=\"sample_project\" label=\"Name of the project\" placeholder=\"ex : Tara Pacifique\"\n        variant=\"outlined\" hint=\"Enter the research project or expedition name this sample is part of.\"\n        @input=\"sendUpdate\">\n        <template #append>\n          <v-icon class=\"cursor-pointer\" @click=\"openHint(\n              'Name of the project',\n              'Enter the research project or expedition name this sample is part of.'\n            )\">\n            mdi-information\n          </v-icon>\n        </template>\n      </v-text-field>\n    </v-col>\n\n    <!-- Sample ID -->\n    <v-col cols=\"12\" md=\"4\">\n      <v-text-field \n      v-model.number=\"sample_id\"\n      type=\"number\"\n      label=\"Sample ID\"\n      prefix=\"S_\"\n      placeholder=\"ex : S001\"\n      variant=\"outlined\"\n        hint=\"Provide a unique identifier for this sample (e.g., S001).\" @input=\"sendUpdate\">\n        <template #append>\n          <v-icon class=\"cursor-pointer\" @click=\"openHint(\n              'Sample ID',\n              'Provide a unique identifier for this sample (e.g., S001).'\n            )\">\n            mdi-information\n          </v-icon>\n        </template>\n      </v-text-field>\n    </v-col>\n\n    <!-- Operator Name -->\n    <v-col cols=\"12\" md=\"4\">\n      <v-text-field v-model=\"sample_operator\" label=\"Operator name\" placeholder=\"ex : Manu Prakash\" variant=\"outlined\"\n        hint=\"Name of the person who collected the sample.\" @input=\"sendUpdate\">\n        <template #append>\n          <v-icon class=\"cursor-pointer\" @click=\"openHint(\n              'Operator name',\n              'Name of the person who collected the sample.'\n            )\">\n            mdi-information\n          </v-icon>\n        </template>\n      </v-text-field>\n    </v-col>\n  </v-row>\n\n  <!-- Sampling Gear Selector -->\n  <v-row class=\"mt-4\">\n    <v-col cols=\"12\">\n      <div class=\"d-flex align-center mb-2\">\n        <label class=\"text-subtitle-2 font-weight-medium me-2\">\n          Sampling Gear\n        </label>\n        <v-icon class=\"cursor-pointer\" color=\"#666666\" @click=\"openHint(\n            'Sampling Gear',\n            'The type of gear used to collect the sample. This field describes the specific equipment used during the sampling process and provides context about the sampling method and conditions.'\n          )\">\n          mdi-information\n        </v-icon>\n      </div>\n\n      <div style=\"overflow-x: auto;\">\n        <v-btn-toggle v-model=\"sample_gear\" variant=\"outlined\" mandatory divided shaped class=\"d-flex\"\n          style=\"min-width: max-content; min-height: 100px\" @update:model-value=\"sendUpdate\">\n          <v-btn value=\"Horizontal Net\" prepend-icon=\"mdi-arrow-right-bold\" stacked>\n            Horizontal Net\n          </v-btn>\n          <v-btn value=\"Vertical Net\" prepend-icon=\"mdi-arrow-up-bold\" stacked>\n            Vertical Net\n          </v-btn>\n          <v-btn value=\"Niskin bottle\" prepend-icon=\"mdi-bottle-tonic\" stacked>\n            Niskin bottle\n          </v-btn>\n          <v-btn value=\"Lab culture\" prepend-icon=\"mdi-flask-outline\" stacked>\n            Lab culture\n          </v-btn>\n          <v-btn value=\"Demo / Test\" prepend-icon=\"mdi-beaker-outline\" stacked>\n            Demo / Test\n          </v-btn>\n        </v-btn-toggle>\n      </div>\n\n      <div class=\"text-caption text-medium-emphasis mt-1\">\n        The type of gear used to collect the sample. This field describes the specific equipment used during the\n        sampling process and provides context about the sampling method and conditions.\n      </div>\n    </v-col>\n  </v-row>\n\n  <!-- Hint Popup -->\n  <v-dialog v-model=\"hintDialog\" max-width=\"400\">\n    <v-card>\n      <v-card-title class=\"text-h6\">{{ hintTitle }}</v-card-title>\n      <v-card-text>{{ hintText }}</v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn text color=\"primary\" @click=\"hintDialog = false\">Close</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\n  export default {\n  props: [\"msg\"],\n  data() {\n    return {\n      sample_project: \"\",\n      sample_id: \"\",\n      sample_operator: \"\",\n      sample_gear: null,\n      hintDialog: false,\n      hintTitle: \"\",\n      hintText: \"\",\n      topic: \"sample_project_meta\", // single topic\n    };\n  },\n  watch: {\n    msg: {\n      handler(newMsg) {\n        const p = newMsg?.payload || {};\n        if (p.sample_project !== undefined) this.sample_project = p.sample_project;\n        if (p.sample_id !== undefined) {\n          // Supprime le préfixe éventuel avant d'afficher\n          this.sample_id = String(p.sample_id).replace(/^S[_-]?/, \"\");\n        }\n\n        if (p.sample_operator !== undefined)\n          this.sample_operator = p.sample_operator;\n        if (p.sample_gear !== undefined) this.sample_gear = p.sample_gear;\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    /**\n     * Send grouped payload for all fields under one topic.\n     */\n    sendUpdate(extra = {}) {\n      this.send({\n        topic: this.topic,\n        payload: {\n          sample_project: this.sample_project || \"\",\n          sample_id: this.sample_id ? `S_${this.sample_id}` : \"\",\n          sample_operator: this.sample_operator || \"\",\n          sample_gear: this.sample_gear || \"\",\n          ...extra,\n        },\n      });\n    },\n\n    openHint(title, text) {\n      this.hintTitle = title;\n      this.hintText = text;\n      this.hintDialog = true;\n    },\n  },\n};\n</script>\n\n<style scoped>\n  .cursor-pointer {\n    cursor: pointer;\n  }\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 410,
        "y": 140,
        "wires": [
            [
                "13f96cf49ae6d6a6"
            ]
        ]
    },
    {
        "id": "96550b272e3da513",
        "type": "ui-template",
        "z": "190b0c9aa75e8843",
        "group": "6fab47af451c6d95",
        "page": "",
        "ui": "",
        "name": "Starting point",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-container class=\"pa-4\">\n    <!-- Date & Time -->\n    <v-row>\n      <v-col cols=\"12\"><strong>Date and Time</strong></v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"12\" md=\"6\">\n        <v-text-field\n          v-model=\"object_date\"\n          label=\"Date (UTC)\"\n          variant=\"outlined\"\n          type=\"date\"\n          hide-details=\"auto\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          :style=\"isTablet ? 'font-size:1.2rem;width:100%;' : ''\"\n          @input=\"sendUpdate('object_datetime')\"\n        />\n      </v-col>\n\n      <v-col cols=\"12\" md=\"6\">\n        <v-text-field\n          v-model=\"object_time\"\n          label=\"Time (UTC)\"\n          variant=\"outlined\"\n          type=\"time\"\n          hide-details=\"auto\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          :style=\"isTablet ? 'font-size:1.2rem;width:100%;' : ''\"\n          @input=\"sendUpdate('object_datetime')\"\n        >\n          <template #append>\n            <v-icon class=\"cursor-pointer\" @click=\"openHint('datetime')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n    </v-row>\n\n    <!-- LATITUDE SECTION -->\n    <v-row>\n      <v-col cols=\"12\"><strong>Latitude</strong></v-col>\n    </v-row>\n    <v-row class=\"mt-4\" align=\"start\">\n      <v-col :cols=\"isTablet ? 3 : 1\">\n        <v-text-field\n          v-model=\"latitude_D\"\n          label=\"°\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"0\"\n          max=\"90\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @input=\"syncDecimal\"\n        />\n      </v-col>\n      <v-col :cols=\"isTablet ? 3 : 1\">\n        <v-text-field\n          v-model=\"latitude_M\"\n          label=\"′\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"0\"\n          max=\"59\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @input=\"syncDecimal\"\n        />\n      </v-col>\n      <v-col :cols=\"isTablet ? 3 : 2\">\n        <v-text-field\n          v-model=\"latitude_S\"\n          label=\"″\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"0\"\n          max=\"59\"\n          step=\"0.001\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @input=\"syncDecimal\"\n        />\n      </v-col>\n      <v-col :cols=\"isTablet ? 3 : 2\">\n        <v-select\n          v-model=\"latDir\"\n          :items=\"['N','S']\"\n          label=\"Dir\"\n          variant=\"outlined\"\n          hide-details\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @update:model-value=\"syncDecimal\"\n        />\n      </v-col>\n\n      <!-- Latitude Decimal -->\n      <v-col cols=\"12\" lg=\"6\">\n        <v-text-field\n          v-model.number=\"object_lat\"\n          label=\"Latitude (decimal)\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"-90\"\n          max=\"90\"\n          step=\"0.000001\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          :style=\"isTablet ? 'font-size:1.2rem;width:100%;' : ''\"\n          @input=\"updateFromDecimal('lat')\"\n        >\n          <template #append>\n            <v-icon class=\"cursor-pointer\" @click=\"openHint('latitude')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n    </v-row>\n\n    <!-- LONGITUDE SECTION -->\n    <v-row>\n      <v-col cols=\"12\"><strong>Longitude</strong></v-col>\n    </v-row>\n    <v-row class=\"mt-4\" align=\"start\">\n      <v-col :cols=\"isTablet ? 3 : 1\">\n        <v-text-field\n          v-model=\"longitude_D\"\n          label=\"°\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"0\"\n          max=\"180\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @input=\"syncDecimal\"\n        />\n      </v-col>\n      <v-col :cols=\"isTablet ? 3 : 1\">\n        <v-text-field\n          v-model=\"longitude_M\"\n          label=\"′\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"0\"\n          max=\"59\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @input=\"syncDecimal\"\n        />\n      </v-col>\n      <v-col :cols=\"isTablet ? 3 : 2\">\n        <v-text-field\n          v-model=\"longitude_S\"\n          label=\"″\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"0\"\n          max=\"59\"\n          step=\"0.001\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @input=\"syncDecimal\"\n        />\n      </v-col>\n      <v-col :cols=\"isTablet ? 3 : 2\">\n        <v-select\n          v-model=\"lonDir\"\n          :items=\"['E','W']\"\n          label=\"Dir\"\n          variant=\"outlined\"\n          hide-details\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @update:model-value=\"syncDecimal\"\n        />\n      </v-col>\n\n      <!-- Longitude Decimal -->\n      <v-col cols=\"12\" lg=\"6\">\n        <v-text-field\n          v-model.number=\"object_lon\"\n          label=\"Longitude (decimal)\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"-180\"\n          max=\"180\"\n          step=\"0.000001\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          :style=\"isTablet ? 'font-size:1.2rem;width:100%;' : ''\"\n          @input=\"updateFromDecimal('lon')\"\n        >\n          <template #append>\n            <v-icon class=\"cursor-pointer\" @click=\"openHint('longitude')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n    </v-row>\n\n    <!-- Canvas Map -->\n    <v-row class=\"mt-6\" style=\"position: relative;\">\n      <v-col cols=\"12\" class=\"text-center\" style=\"position: relative;\">\n        <canvas\n          id=\"mapCanvas\"\n          width=\"800\"\n          height=\"500\"\n          style=\"width:100%;max-width:1200px;border:1px solid #999;border-radius:8px;background:#c5ecff;cursor:grab;\"\n          @wheel.prevent=\"onWheel\"\n        ></canvas>\n\n        <!-- Zoom controls -->\n        <div\n          style=\"position:absolute;bottom:25px;right:18px;display:flex;flex-direction:column;gap:6px;\"\n        >\n          <v-btn icon :size=\"isTablet ? 'large' : 'default'\" @click=\"zoomIn\"><span>+</span></v-btn>\n          <v-btn icon :size=\"isTablet ? 'large' : 'default'\" @click=\"zoomOut\"><span>−</span></v-btn>\n        </div>\n      </v-col>\n    </v-row>\n\n    <!-- MID-INFO POPUP -->\n    <v-dialog v-model=\"hintDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"text-h6\">{{ hintTitle }}</v-card-title>\n        <v-card-text>{{ hintText }}</v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"primary\" text @click=\"hintDialog = false\">Got it</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  props: [\"msg\"],\n  data() {\n    return {\n      object_date: \"\",\n      object_time: \"\",\n      object_lat: 0,\n      object_lon: 0,\n      latitude_D: \"0\",\n      latitude_M: \"0\",\n      latitude_S: \"0\",\n      latDir: \"N\",\n      longitude_D: \"0\",\n      longitude_M: \"0\",\n      longitude_S: \"0\",\n      lonDir: \"E\",\n      ctx: null,\n      mapImage: null,\n      imageLoaded: false,\n      zoom: 1,\n      offsetX: 0,\n      offsetY: 0,\n      sample_gear: \"\", // ajouté\n      hintDialog: false,\n      hintTitle: \"\",\n      hintText: \"\",\n    };\n  },\n  computed: {\n    isTablet() {\n      return this.$vuetify.display.mdAndDown;\n    },\n  },\n  watch: {\n    msg: {\n      handler(newMsg) {\n        const p = newMsg?.payload || {};\n        if (p.sample_gear !== undefined) {\n          this.sample_gear = p.sample_gear;\n\n          // ✅ Si \"Lab culture\" ou \"Demo / Test\", remplir automatiquement date/heure et GPS\n          if ([\"Lab culture\", \"Demo / Test\"].includes(this.sample_gear)) {\n            const now = new Date();\n            this.object_date = now.toISOString().split(\"T\")[0];\n            this.object_time = now.toISOString().split(\"T\")[1].slice(0, 5);\n            this.object_lat = 0;\n            this.object_lon = 0;\n            this.updateFromDecimal(\"lat\");\n            this.updateFromDecimal(\"lon\");\n            this.sendUpdate(\"object_datetime\", {\n              object_lat: 0,\n              object_lon: 0,\n            });\n          }\n        }\n\n        if (p.object_date !== undefined) this.object_date = p.object_date;\n        if (p.object_time !== undefined) {\n          // Conversion \"HHMM\" → \"HH:MM\"\n          const t = p.object_time.toString();\n          if (t.length === 4) this.object_time = `${t.slice(0,2)}:${t.slice(2,4)}`;\n          else this.object_time = t; // fallback si format déjà HH:MM\n        }\n\n        if (p.object_lat !== undefined)\n          this.object_lat = parseFloat(p.object_lat.toFixed(6));\n        if (p.object_lon !== undefined)\n          this.object_lon = parseFloat(p.object_lon.toFixed(6));\n        if (p.object_lat !== undefined || p.object_lon !== undefined) {\n          this.updateFromDecimal(\"lat\");\n          this.updateFromDecimal(\"lon\");\n        }\n        this.centerOnMarker();\n      },\n      deep: true,\n    },\n  },\n  mounted() {\n    const canvas = document.getElementById(\"mapCanvas\");\n    this.ctx = canvas.getContext(\"2d\");\n    this.mapImage = new Image();\n    this.mapImage.src = \"/world-map.svg\";\n    this.mapImage.onload = () => {\n      this.imageLoaded = true;\n      this.centerOnMarker();\n    };\n  },\n  methods: {\n    openHint(type) {\n      if (type === \"datetime\") {\n        this.hintTitle = \"Date and Time (UTC)\";\n      this.hintText =\n        \"Enter the observation timestamp in Coordinated Universal Time (UTC). \" +\n        \"Use YYYY-MM-DD for date and HH:MM (24-hour). The saved format will be HHMM (without colon).\";\n\n      } else if (type === \"latitude\") {\n        this.hintTitle = \"Latitude\";\n        this.hintText =\n          \"Latitude defines how far north or south you are from the equator.\";\n      } else if (type === \"longitude\") {\n        this.hintTitle = \"Longitude\";\n        this.hintText =\n          \"Longitude defines how far east or west you are from the Prime Meridian.\";\n      }\n      this.hintDialog = true;\n    },\n    sendUpdate(topic, extra = {}) {\n      // Conversion \"HH:MM\" → \"HHMM\"\n      const formattedTime = this.object_time ? this.object_time.replace(\":\", \"\") : \"\";\n      this.send({\n        topic,\n        payload: {\n          object_date: this.object_date,\n          object_time: formattedTime,\n          ...extra,\n        },\n      });\n    },\n    syncDecimal() {\n      this.object_lon = parseFloat(\n        this.toDecimal(this.longitude_D, this.longitude_M, this.longitude_S, this.lonDir).toFixed(6)\n      );\n      this.object_lat = parseFloat(\n        this.toDecimal(this.latitude_D, this.latitude_M, this.latitude_S, this.latDir).toFixed(6)\n      );\n      this.centerOnMarker();\n      this.sendUpdate(\"object_latlon\", {\n        object_lat: this.object_lat,\n        object_lon: this.object_lon,\n      });\n    },\n    updateFromDecimal(which) {\n      if (which === \"lon\") {\n        this.object_lon = parseFloat(this.object_lon.toFixed(6));\n        const { D, M, S, dir } = this.fromDecimal(this.object_lon, \"lon\");\n        this.longitude_D = D;\n        this.longitude_M = M;\n        this.longitude_S = S;\n        this.lonDir = dir;\n      } else {\n        this.object_lat = parseFloat(this.object_lat.toFixed(6));\n        const { D, M, S, dir } = this.fromDecimal(this.object_lat, \"lat\");\n        this.latitude_D = D;\n        this.latitude_M = M;\n        this.latitude_S = S;\n        this.latDir = dir;\n      }\n      this.centerOnMarker();\n      this.sendUpdate(\"object_latlon\", {\n        object_lat: this.object_lat,\n        object_lon: this.object_lon,\n      });\n    },\n    toDecimal(D, M, S, dir) {\n      const d = parseFloat(D) || 0;\n      const m = parseFloat(M) || 0;\n      const s = parseFloat(S) || 0;\n      let val = d + m / 60 + s / 3600;\n      if (dir === \"S\" || dir === \"W\") val *= -1;\n      return val;\n    },\n    fromDecimal(dec, type) {\n      const dirPositive = type === \"lat\" ? \"N\" : \"E\";\n      const dirNegative = type === \"lat\" ? \"S\" : \"W\";\n      const absVal = Math.abs(dec);\n      const D = Math.floor(absVal);\n      const M = Math.floor((absVal - D) * 60);\n      const S = ((absVal - D - M / 60) * 3600).toFixed(3);\n      const dir = dec >= 0 ? dirPositive : dirNegative;\n      return { D, M, S, dir };\n    },\n    onWheel(e) {\n      if (e.deltaY < 0) this.zoomIn();\n      else this.zoomOut();\n    },\n    zoomIn() {\n      this.zoom = Math.min(this.zoom * 1.25, 10);\n      this.centerOnMarker();\n    },\n    zoomOut() {\n      this.zoom = Math.max(this.zoom / 1.25, 0.5);\n      this.centerOnMarker();\n    },\n    centerOnMarker() {\n      const w = 800;\n      const h = 500;\n      const lat = this.object_lat;\n      const lon = this.object_lon;\n      const x = w / 2 + (lon / 180) * (w / 2);\n      const y = h / 2 - (lat / 90) * (h / 2);\n      this.offsetX = w / 2 - x;\n      this.offsetY = h / 2 - y;\n      this.drawPoint();\n    },\n    drawMap(w, h) {\n      const ctx = this.ctx;\n      ctx.clearRect(0, 0, w, h);\n      ctx.save();\n      ctx.translate(\n        this.offsetX * this.zoom + (w / 2) * (1 - this.zoom),\n        this.offsetY * this.zoom + (h / 2) * (1 - this.zoom)\n      );\n      ctx.scale(this.zoom, this.zoom);\n      if (this.imageLoaded) ctx.drawImage(this.mapImage, 0, 0, w, h);\n      else {\n        ctx.fillStyle = \"#000\";\n        ctx.fillRect(0, 0, w, h);\n      }\n      ctx.restore();\n    },\n    drawPoint() {\n      const w = 800;\n      const h = 500;\n      const ctx = this.ctx;\n      if (!ctx) return;\n      this.drawMap(w, h);\n      const lat = this.object_lat;\n      const lon = this.object_lon;\n      const x = w / 2 + (lon / 180) * (w / 2);\n      const y = h / 2 - (lat / 90) * (h / 2);\n      ctx.save();\n      ctx.translate(\n        this.offsetX * this.zoom + (w / 2) * (1 - this.zoom),\n        this.offsetY * this.zoom + (h / 2) * (1 - this.zoom)\n      );\n      ctx.scale(this.zoom, this.zoom);\n      ctx.fillStyle = \"blue\";\n      ctx.beginPath();\n      ctx.arc(x, y, 6 / this.zoom, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.fillStyle = \"black\";\n      ctx.font = `${13 / this.zoom}px sans-serif`;\n      ctx.fillText(`${lat.toFixed(4)}°, ${lon.toFixed(4)}°`, x + 10 / this.zoom, y - 10 / this.zoom);\n      ctx.restore();\n    },\n  },\n};\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 400,
        "y": 200,
        "wires": [
            [
                "9780c3e7b1792160"
            ]
        ]
    },
    {
        "id": "1c90e219a749e53e",
        "type": "ui-template",
        "z": "190b0c9aa75e8843",
        "group": "1cfe3062a8353012",
        "page": "",
        "ui": "",
        "name": "Ending point",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <!-- Le conteneur principal devient désactivé si sample_gear n'est pas \"Horizontal Net\" -->\n  <v-container\n    class=\"pa-4\"\n    :disabled=\"isDisabled\"\n    :style=\"{\n      pointerEvents: isDisabled ? 'none' : 'auto',\n      opacity: isDisabled ? 0.5 : 1,\n    }\"\n  >\n    <!-- Date & Time (End) -->\n    <v-row>\n      <v-col cols=\"12\"><strong>End Date and Time</strong></v-col>\n    </v-row>\n\n    <v-row>\n      <v-col cols=\"12\" md=\"6\">\n        <v-text-field\n          v-model=\"object_date_end\"\n          label=\"Date (UTC)\"\n          variant=\"outlined\"\n          type=\"date\"\n          hide-details=\"auto\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          :style=\"isTablet ? 'font-size:1.2rem;width:100%;' : ''\"\n          @input=\"sendUpdateEnd('object_datetime_end')\"\n        />\n      </v-col>\n\n      <v-col cols=\"12\" md=\"6\">\n        <v-text-field\n          v-model=\"object_time_end\"\n          label=\"Time (UTC)\"\n          variant=\"outlined\"\n          type=\"time\"\n          hide-details=\"auto\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          :style=\"isTablet ? 'font-size:1.2rem;width:100%;' : ''\"\n          @input=\"sendUpdateEnd('object_datetime_end')\"\n        >\n          <template #append>\n            <v-icon class=\"cursor-pointer\" @click=\"openHintEnd('datetime')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n    </v-row>\n\n    <!-- LATITUDE END SECTION -->\n    <v-row>\n      <v-col cols=\"12\"><strong>Latitude (End)</strong></v-col>\n    </v-row>\n    <v-row class=\"mt-4\" align=\"start\">\n      <v-col :cols=\"isTablet ? 3 : 1\">\n        <v-text-field\n          v-model=\"latitude_D_end\"\n          label=\"°\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"0\"\n          max=\"90\"\n          @input=\"syncDecimalEnd\"\n        />\n      </v-col>\n      <v-col :cols=\"isTablet ? 3 : 1\">\n        <v-text-field\n          v-model=\"latitude_M_end\"\n          label=\"′\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"0\"\n          max=\"59\"\n          @input=\"syncDecimalEnd\"\n        />\n      </v-col>\n      <v-col :cols=\"isTablet ? 3 : 2\">\n        <v-text-field\n          v-model=\"latitude_S_end\"\n          label=\"″\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"0\"\n          max=\"59\"\n          step=\"0.001\"\n          @input=\"syncDecimalEnd\"\n        />\n      </v-col>\n      <v-col :cols=\"isTablet ? 3 : 2\">\n        <v-select\n          v-model=\"latDir_end\"\n          :items=\"['N','S']\"\n          label=\"Dir\"\n          variant=\"outlined\"\n          hide-details\n          @update:model-value=\"syncDecimalEnd\"\n        />\n      </v-col>\n\n      <!-- Latitude Decimal -->\n      <v-col cols=\"12\" lg=\"6\">\n        <v-text-field\n          v-model.number=\"object_lat_end\"\n          label=\"Latitude (decimal)\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"-90\"\n          max=\"90\"\n          step=\"0.000001\"\n          @input=\"updateFromDecimalEnd('lat')\"\n        >\n          <template #append>\n            <v-icon class=\"cursor-pointer\" @click=\"openHintEnd('latitude')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n    </v-row>\n\n    <!-- LONGITUDE END SECTION -->\n    <v-row>\n      <v-col cols=\"12\"><strong>Longitude (End)</strong></v-col>\n    </v-row>\n    <v-row class=\"mt-4\" align=\"start\">\n      <v-col :cols=\"isTablet ? 3 : 1\">\n        <v-text-field\n          v-model=\"longitude_D_end\"\n          label=\"°\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"0\"\n          max=\"180\"\n          @input=\"syncDecimalEnd\"\n        />\n      </v-col>\n      <v-col :cols=\"isTablet ? 3 : 1\">\n        <v-text-field\n          v-model=\"longitude_M_end\"\n          label=\"′\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"0\"\n          max=\"59\"\n          @input=\"syncDecimalEnd\"\n        />\n      </v-col>\n      <v-col :cols=\"isTablet ? 3 : 2\">\n        <v-text-field\n          v-model=\"longitude_S_end\"\n          label=\"″\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"0\"\n          max=\"59\"\n          step=\"0.001\"\n          @input=\"syncDecimalEnd\"\n        />\n      </v-col>\n      <v-col :cols=\"isTablet ? 3 : 2\">\n        <v-select\n          v-model=\"lonDir_end\"\n          :items=\"['E','W']\"\n          label=\"Dir\"\n          variant=\"outlined\"\n          hide-details\n          @update:model-value=\"syncDecimalEnd\"\n        />\n      </v-col>\n\n      <!-- Longitude Decimal -->\n      <v-col cols=\"12\" lg=\"6\">\n        <v-text-field\n          v-model.number=\"object_lon_end\"\n          label=\"Longitude (decimal)\"\n          variant=\"outlined\"\n          hide-details\n          type=\"number\"\n          min=\"-180\"\n          max=\"180\"\n          step=\"0.000001\"\n          @input=\"updateFromDecimalEnd('lon')\"\n        >\n          <template #append>\n            <v-icon class=\"cursor-pointer\" @click=\"openHintEnd('longitude')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n    </v-row>\n\n    <!-- Canvas Map (End) -->\n    <v-row class=\"mt-6\" style=\"position: relative;\">\n      <v-col cols=\"12\" class=\"text-center\" style=\"position: relative;\">\n        <canvas\n          id=\"mapCanvas_end\"\n          width=\"800\"\n          height=\"500\"\n          style=\"width:100%;max-width:1200px;border:1px solid #999;border-radius:8px;background:#c5ecff;cursor:grab;\"\n          @wheel.prevent=\"onWheelEnd\"\n        ></canvas>\n\n        <!-- Zoom controls -->\n        <div\n          style=\"position:absolute;bottom:25px;right:18px;display:flex;flex-direction:column;gap:6px;\"\n        >\n          <v-btn icon :size=\"isTablet ? 'large' : 'default'\" @click=\"zoomInEnd\"><span>+</span></v-btn>\n          <v-btn icon :size=\"isTablet ? 'large' : 'default'\" @click=\"zoomOutEnd\"><span>−</span></v-btn>\n        </div>\n      </v-col>\n    </v-row>\n\n    <!-- MID-INFO POPUP -->\n    <v-dialog v-model=\"hintDialogEnd\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"text-h6\">{{ hintTitleEnd }}</v-card-title>\n        <v-card-text>{{ hintTextEnd }}</v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"primary\" text @click=\"hintDialogEnd = false\">Got it</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  props: [\"msg\"],\n  data() {\n    return {\n      object_date_end: \"\",\n      object_time_end: \"\",\n      object_lat_end: 0,\n      object_lon_end: 0,\n      latitude_D_end: \"0\",\n      latitude_M_end: \"0\",\n      latitude_S_end: \"0\",\n      latDir_end: \"N\",\n      longitude_D_end: \"0\",\n      longitude_M_end: \"0\",\n      longitude_S_end: \"0\",\n      lonDir_end: \"E\",\n      ctx_end: null,\n      mapImage_end: null,\n      imageLoaded_end: false,\n      zoom_end: 1,\n      offsetX_end: 0,\n      offsetY_end: 0,\n      sample_gear: \"\", // <-- ajouté ici\n      // Popup fields\n      hintDialogEnd: false,\n      hintTitleEnd: \"\",\n      hintTextEnd: \"\",\n    };\n  },\n  computed: {\n    isTablet() {\n      return this.$vuetify.display.mdAndDown;\n    },\n    isDisabled() {\n      // Désactive tout le formulaire si sample_gear n’est pas \"Horizontal Net\"\n      return this.sample_gear !== \"Horizontal Net\";\n    },\n  },\n  watch: {\n    msg: {\n      handler(newMsg) {\n        const p = newMsg?.payload || {};\n        if (p.sample_gear !== undefined) this.sample_gear = p.sample_gear; // <-- surveille la valeur reçue\n        if (p.object_date_end !== undefined) this.object_date_end = p.object_date_end;\n        if (p.object_time_end !== undefined) {\n          // Conversion \"HHMM\" → \"HH:MM\" pour affichage dans le champ <input type=\"time\">\n          const t = p.object_time_end.toString();\n          if (t.length === 4) this.object_time_end = `${t.slice(0, 2)}:${t.slice(2, 4)}`;\n          else this.object_time_end = t; // si déjà au format HH:MM\n        }\n\n        if (p.object_lat_end !== undefined)\n          this.object_lat_end = parseFloat(p.object_lat_end.toFixed(6));\n        if (p.object_lon_end !== undefined)\n          this.object_lon_end = parseFloat(p.object_lon_end.toFixed(6));\n        if (p.object_lat_end !== undefined || p.object_lon_end !== undefined) {\n          this.updateFromDecimalEnd(\"lat\");\n          this.updateFromDecimalEnd(\"lon\");\n        }\n        this.centerOnMarkerEnd();\n      },\n      deep: true,\n    },\n  },\n  mounted() {\n    const canvas = document.getElementById(\"mapCanvas_end\");\n    this.ctx_end = canvas.getContext(\"2d\");\n    this.mapImage_end = new Image();\n    this.mapImage_end.src = \"/world-map.svg\";\n    this.mapImage_end.onload = () => {\n      this.imageLoaded_end = true;\n      this.centerOnMarkerEnd();\n    };\n  },\n  methods: {\n    /** Info Popup **/\n    openHintEnd(type) {\n      if (type === \"datetime\") {\n        this.hintTitleEnd = \"End Date and Time (UTC)\";\n        this.hintTextEnd =\n          \"Enter the end time of your observation in Coordinated Universal Time (UTC). \" +\n          \"Use YYYY-MM-DD for date and HH:MM (24-hour) for time.\";\n      } else if (type === \"latitude\") {\n        this.hintTitleEnd = \"End Latitude\";\n        this.hintTextEnd =\n          \"Latitude specifies how far north or south your end location is from the equator. \" +\n          \"Use degrees (°), minutes (′), and seconds (″) with N/S direction, or directly enter a decimal between -90 and +90.\";\n      } else if (type === \"longitude\") {\n        this.hintTitleEnd = \"End Longitude\";\n        this.hintTextEnd =\n          \"Longitude specifies how far east or west your end location is from the Prime Meridian. \" +\n          \"You can enter DMS (° ′ ″) with E/W direction or a decimal between -180 and +180.\";\n      }\n      this.hintDialogEnd = true;\n    },\n\n    sendUpdateEnd(topic, extra = {}) {\n      // Conversion \"HH:MM\" → \"HHMM\" avant sauvegarde\n      const formattedTimeEnd = this.object_time_end\n        ? this.object_time_end.replace(\":\", \"\")\n        : \"\";      \n      this.send({\n        topic,\n        payload: {\n          object_date_end: this.object_date_end,\n          object_time_end: formattedTimeEnd,\n          ...extra,\n        },\n      });\n    },\n    syncDecimalEnd() {\n      this.object_lon_end = parseFloat(\n        this.toDecimal(this.longitude_D_end, this.longitude_M_end, this.longitude_S_end, this.lonDir_end).toFixed(6)\n      );\n      this.object_lat_end = parseFloat(\n        this.toDecimal(this.latitude_D_end, this.latitude_M_end, this.latitude_S_end, this.latDir_end).toFixed(6)\n      );\n      this.centerOnMarkerEnd();\n      this.sendUpdateEnd(\"object_latlon_end\", {\n        object_lat_end: this.object_lat_end,\n        object_lon_end: this.object_lon_end,\n      });\n    },\n    updateFromDecimalEnd(which) {\n      if (which === \"lon\") {\n        this.object_lon_end = parseFloat(this.object_lon_end.toFixed(6));\n        const { D, M, S, dir } = this.fromDecimal(this.object_lon_end, \"lon\");\n        this.longitude_D_end = D;\n        this.longitude_M_end = M;\n        this.longitude_S_end = S;\n        this.lonDir_end = dir;\n      } else {\n        this.object_lat_end = parseFloat(this.object_lat_end.toFixed(6));\n        const { D, M, S, dir } = this.fromDecimal(this.object_lat_end, \"lat\");\n        this.latitude_D_end = D;\n        this.latitude_M_end = M;\n        this.latitude_S_end = S;\n        this.latDir_end = dir;\n      }\n      this.centerOnMarkerEnd();\n      this.sendUpdateEnd(\"object_latlon_end\", {\n        object_lat_end: this.object_lat_end,\n        object_lon_end: this.object_lon_end,\n      });\n    },\n    toDecimal(D, M, S, dir) {\n      const d = parseFloat(D) || 0;\n      const m = parseFloat(M) || 0;\n      const s = parseFloat(S) || 0;\n      let val = d + m / 60 + s / 3600;\n      if (dir === \"S\" || dir === \"W\") val *= -1;\n      return val;\n    },\n    fromDecimal(dec, type) {\n      const dirPositive = type === \"lat\" ? \"N\" : \"E\";\n      const dirNegative = type === \"lat\" ? \"S\" : \"W\";\n      const absVal = Math.abs(dec);\n      const D = Math.floor(absVal);\n      const M = Math.floor((absVal - D) * 60);\n      const S = ((absVal - D - M / 60) * 3600).toFixed(3);\n      const dir = dec >= 0 ? dirPositive : dirNegative;\n      return { D, M, S, dir };\n    },\n    onWheelEnd(e) {\n      if (e.deltaY < 0) this.zoomInEnd();\n      else this.zoomOutEnd();\n    },\n    zoomInEnd() {\n      this.zoom_end = Math.min(this.zoom_end * 1.25, 10);\n      this.centerOnMarkerEnd();\n    },\n    zoomOutEnd() {\n      this.zoom_end = Math.max(this.zoom_end / 1.25, 0.5);\n      this.centerOnMarkerEnd();\n    },\n    centerOnMarkerEnd() {\n      const w = 800;\n      const h = 500;\n      const lat = this.object_lat_end;\n      const lon = this.object_lon_end;\n      const x = w / 2 + (lon / 180) * (w / 2);\n      const y = h / 2 - (lat / 90) * (h / 2);\n      this.offsetX_end = w / 2 - x;\n      this.offsetY_end = h / 2 - y;\n      this.drawPointEnd();\n    },\n    drawMapEnd(w, h) {\n      const ctx = this.ctx_end;\n      ctx.clearRect(0, 0, w, h);\n      ctx.save();\n      ctx.translate(\n        this.offsetX_end * this.zoom_end + (w / 2) * (1 - this.zoom_end),\n        this.offsetY_end * this.zoom_end + (h / 2) * (1 - this.zoom_end)\n      );\n      ctx.scale(this.zoom_end, this.zoom_end);\n      if (this.imageLoaded_end) ctx.drawImage(this.mapImage_end, 0, 0, w, h);\n      else {\n        ctx.fillStyle = \"#000\";\n        ctx.fillRect(0, 0, w, h);\n      }\n      ctx.restore();\n    },\n    drawPointEnd() {\n      const w = 800;\n      const h = 500;\n      const ctx = this.ctx_end;\n      if (!ctx) return;\n      this.drawMapEnd(w, h);\n      const lat = this.object_lat_end;\n      const lon = this.object_lon_end;\n      const x = w / 2 + (lon / 180) * (w / 2);\n      const y = h / 2 - (lat / 90) * (h / 2);\n      ctx.save();\n      ctx.translate(\n        this.offsetX_end * this.zoom_end + (w / 2) * (1 - this.zoom_end),\n        this.offsetY_end * this.zoom_end + (h / 2) * (1 - this.zoom_end)\n      );\n      ctx.scale(this.zoom_end, this.zoom_end);\n      ctx.fillStyle = \"red\";\n      ctx.beginPath();\n      ctx.arc(x, y, 6 / this.zoom_end, 0, 2 * Math.PI);\n      ctx.fill();\n      ctx.fillStyle = \"black\";\n      ctx.font = `${13 / this.zoom_end}px sans-serif`;\n      ctx.fillText(`${lat.toFixed(4)}°, ${lon.toFixed(4)}°`, x + 10 / this.zoom_end, y - 10 / this.zoom_end);\n      ctx.restore();\n    },\n  },\n};\n</script>\n\n<style scoped>\n@media (max-width: 1024px) {\n  .v-text-field input,\n  .v-select input {\n    font-size: 1.2rem !important;\n  }\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 390,
        "y": 300,
        "wires": [
            [
                "1d06a5e5a5877d24"
            ]
        ]
    },
    {
        "id": "09b551fa202d8029",
        "type": "ui-template",
        "z": "190b0c9aa75e8843",
        "group": "cb3521392eb4e9ed",
        "page": "",
        "ui": "",
        "name": "Net Specificity",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <!-- Conteneur principal désactivé si sample_gear n'est ni Horizontal Net ni Vertical Net -->\n    <v-container\n      fluid\n      class=\"pa-2\"\n      :disabled=\"isDisabled\"\n      :style=\"{\n        pointerEvents: isDisabled ? 'none' : 'auto',\n        opacity: isDisabled ? 0.5 : 1,\n        width: '100%',\n      }\"\n    >\n\n    <v-row class=\"mt-2\">\n      <!-- Net Mouth Diameter -->\n      <v-col cols=\"12\" md=\"3\">\n        <v-text-field\n          label=\"Mouth Opening Diameter\"\n          v-model.number=\"sample_net_mouth_diameter\"\n          :min=\"0\"\n          :max=\"1000\"\n          :step=\"1\"\n          suffix=\"cm\"\n          type=\"number\"\n          variant=\"outlined\"\n          hide-details=\"auto\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @input=\"sendUpdate('sample_net_params')\"\n        >\n          <template #append>\n            <v-icon class=\"cursor-pointer\" @click=\"openHint('mouth_diameter')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n\n      <!-- Net Length -->\n      <v-col cols=\"12\" md=\"3\">\n        <v-text-field\n          label=\"Length of the Net\"\n          v-model.number=\"sample_net_length\"\n          :min=\"0\"\n          :max=\"1000\"\n          :step=\"1\"\n          suffix=\"cm\"\n          type=\"number\"\n          variant=\"outlined\"\n          hide-details=\"auto\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @input=\"sendUpdate('sample_net_params')\"\n        >\n          <template #append>\n            <v-icon class=\"cursor-pointer\" @click=\"openHint('net_length')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n\n      <!-- Mesh Size -->\n      <v-col cols=\"12\" md=\"3\">\n        <v-text-field\n          label=\"Net Mesh Size\"\n          v-model.number=\"sample_net_mesh_size\"\n          :min=\"0\"\n          :max=\"1000\"\n          :step=\"1\"\n          suffix=\"μm\"\n          type=\"number\"\n          variant=\"outlined\"\n          hide-details=\"auto\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @input=\"sendUpdate('sample_net_params')\"\n        >\n          <template #append>\n            <v-icon class=\"cursor-pointer\" @click=\"openHint('mesh_size')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n\n      <!-- Collector Volume -->\n      <v-col cols=\"12\" md=\"3\">\n        <v-text-field\n          label=\"Volume of the Collector\"\n          v-model.number=\"sample_collected_volume\"\n          :min=\"0\"\n          :max=\"1000\"\n          :step=\"1\"\n          suffix=\"mL\"\n          type=\"number\"\n          variant=\"outlined\"\n          hide-details=\"auto\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @input=\"sendUpdate('sample_net_params')\"\n        >\n          <template #append>\n            <v-icon class=\"cursor-pointer\" @click=\"openHint('collector_volume')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n    </v-row>\n\n    <!-- MID-INFO POPUP -->\n    <v-dialog v-model=\"hintDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"text-h6\">{{ hintTitle }}</v-card-title>\n        <v-card-text>{{ hintText }}</v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"primary\" text @click=\"hintDialog = false\">Got it</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  props: [\"msg\"],\n  data() {\n    return {\n      sample_net_mouth_diameter: \"\",\n      sample_net_length: \"\",\n      sample_net_mesh_size: \"\",\n      sample_collected_volume: \"\",\n      sample_gear: \"\",\n      hintDialog: false,\n      hintTitle: \"\",\n      hintText: \"\",\n    };\n  },\n  computed: {\n    isTablet() {\n      return this.$vuetify.display.mdAndDown;\n    },\n    isDisabled() {\n      // Désactiver si sample_gear n'est pas \"Horizontal Net\" ou \"Vertical Net\"\n      return ![\"Horizontal Net\", \"Vertical Net\"].includes(this.sample_gear);\n    },\n  },\n  watch: {\n    msg: {\n      handler(newMsg) {\n        const p = newMsg?.payload || {};\n        if (p.sample_gear !== undefined) this.sample_gear = p.sample_gear; // <-- récupère la valeur reçue\n        if (p.sample_net_mouth_diameter !== undefined)\n          this.sample_net_mouth_diameter = Number(p.sample_net_mouth_diameter);\n        if (p.sample_net_length !== undefined)\n          this.sample_net_length = Number(p.sample_net_length);\n        if (p.sample_net_mesh_size !== undefined)\n          this.sample_net_mesh_size = Number(p.sample_net_mesh_size);\n        if (p.sample_collected_volume !== undefined)\n          this.sample_collected_volume = Number(p.sample_collected_volume);\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    /**\n     * Send updates (ensures all values are numbers)\n     */\n    sendUpdate(topic, extra = {}) {\n      this.send({\n        topic,\n        payload: {\n          sample_net_mouth_diameter: Number(this.sample_net_mouth_diameter) || 0,\n          sample_net_length: Number(this.sample_net_length) || 0,\n          sample_net_mesh_size: Number(this.sample_net_mesh_size) || 0,\n          sample_collected_volume: Number(this.sample_collected_volume) || 0,\n          ...extra,\n        },\n      });\n    },\n\n    /**\n     * Info popup — consistent with previous templates\n     */\n    openHint(type) {\n      if (type === \"mouth_diameter\") {\n        this.hintTitle = \"Mouth Opening Diameter\";\n        this.hintText =\n          \"Enter the diameter of the net’s mouth — the circular opening where water enters the net — measured in centimeters (cm). \" +\n          \"Typical plankton nets range from 20–60 cm in diameter. Larger diameters capture more water volume.\";\n      } else if (type === \"net_length\") {\n        this.hintTitle = \"Length of the Net\";\n        this.hintText =\n          \"Specify the total length of the net from the mouth opening to the collector. \" +\n          \"Measure in centimeters (cm). This helps calculate the water volume filtered and affects flow resistance.\";\n      } else if (type === \"mesh_size\") {\n        this.hintTitle = \"Net Mesh Size\";\n        this.hintText =\n          \"Enter the mesh size of the net in micrometers (μm). \" +\n          \"This defines the smallest particles or plankton that can pass through. For example, a 20 μm mesh captures microplankton but not bacteria.\";\n      } else if (type === \"collector_volume\") {\n        this.hintTitle = \"Volume of the Collector\";\n        this.hintText =\n          \"Specify the amount of sample collected after towing or pumping, measured in milliliters (mL). \" +\n          \"It should correspond to the water filtered and ensures proper concentration calculations.\";\n      }\n      this.hintDialog = true;\n    },\n  },\n};\n</script>\n\n<style scoped>\n@media (max-width: 1024px) {\n  .v-text-field input,\n  .v-select input {\n    font-size: 1.2rem !important;\n  }\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 400,
        "y": 400,
        "wires": [
            [
                "2ef0ae85c43d66d6"
            ]
        ]
    },
    {
        "id": "93a68ffbce74d70d",
        "type": "ui-template",
        "z": "190b0c9aa75e8843",
        "group": "dd4d9707051041c9",
        "page": "",
        "ui": "",
        "name": "Other Informations",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-container fluid class=\"pa-2\">\n    <v-row class=\"mt-2\">\n      <!-- Filtered Volume -->\n      <v-col cols=\"12\" md=\"3\">\n        <v-text-field\n          label=\"Filtered Volume\"\n          v-model.number=\"sample_filtered_volume\"\n          :min=\"0\"\n          :max=\"100000\"\n          :step=\"1\"\n          suffix=\"L\"\n          type=\"number\"\n          variant=\"outlined\"\n          hide-details=\"auto\"\n          :disabled=\"isDisabled\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @input=\"sendUpdate('sample_water_params')\"\n        >\n          <template #append>\n            <v-icon class=\"cursor-pointer\" @click=\"openHint('filtered_volume')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n\n      <!-- Concentration Factor -->\n      <v-col cols=\"12\" md=\"3\">\n        <v-text-field\n          label=\"Concentration Factor\"\n          v-model.number=\"sample_concentration_factor\"\n          :min=\"0\"\n          :max=\"100\"\n          :step=\"0.01\"\n          suffix=\"×\"\n          type=\"number\"\n          variant=\"outlined\"\n          hide-details=\"auto\"\n          :disabled=\"isDisabled\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @input=\"sendUpdate('sample_water_params')\"\n        >\n          <template #append>\n            <v-icon class=\"cursor-pointer\" @click=\"openHint('concentration_factor')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n\n      <!-- Sieve Mesh Size -->\n      <v-col cols=\"12\" md=\"3\">\n        <v-text-field\n          label=\"Sieve Mesh Size\"\n          v-model.number=\"sample_sieve_mesh_size\"\n          :min=\"1\"\n          :max=\"1000\"\n          :step=\"10\"\n          suffix=\"μm\"\n          type=\"number\"\n          variant=\"outlined\"\n          hide-details=\"auto\"\n          :disabled=\"isDisabled\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @input=\"sendUpdate('sample_water_params')\"\n        >\n          <template #append>\n            <v-icon class=\"cursor-pointer\" @click=\"openHint('sieve_mesh_size')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n\n      <!-- Sample Depth -->\n      <v-col cols=\"12\" md=\"3\">\n        <v-text-field\n          label=\"Depth of the Sample\"\n          v-model.number=\"sample_depth\"\n          :min=\"0\"\n          :max=\"10935\"\n          :step=\"1\"\n          suffix=\"m\"\n          type=\"number\"\n          variant=\"outlined\"\n          hide-details=\"auto\"\n          :disabled=\"isDisabled\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @input=\"sendUpdate('sample_water_params')\"\n        >\n          <template #append>\n            <v-icon class=\"cursor-pointer\" @click=\"openHint('sample_depth')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n    </v-row>\n\n    <!-- Sample Comment (Toujours actif) -->\n    <v-row>\n      <v-col cols=\"12\">\n        <v-textarea\n          label=\"Sample Comment\"\n          v-model=\"sample_comment\"\n          variant=\"outlined\"\n          rows=\"2\"\n          :density=\"isTablet ? 'comfortable' : 'default'\"\n          @input=\"sendUpdate('sample_water_params')\"\n        >\n          <template #append>\n            <v-icon class=\"cursor-pointer\" @click=\"openHint('sample_comment')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-textarea>\n      </v-col>\n    </v-row>\n\n    <!-- MID-INFO POPUP -->\n    <v-dialog v-model=\"hintDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title class=\"text-h6\">{{ hintTitle }}</v-card-title>\n        <v-card-text>{{ hintText }}</v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"primary\" text @click=\"hintDialog = false\">Got it</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  props: [\"msg\"],\n  data() {\n    return {\n      sample_filtered_volume: \"\",\n      sample_concentration_factor: \"\",\n      sample_sieve_mesh_size: \"\",\n      sample_depth: \"\",\n      sample_comment: \"\",\n      sample_gear: \"\", // <-- ajout\n      hintDialog: false,\n      hintTitle: \"\",\n      hintText: \"\",\n    };\n  },\n  computed: {\n    isTablet() {\n      return this.$vuetify.display.mdAndDown;\n    },\n    // ✅ Disable fields if Lab culture or Demo / Test\n    isDisabled() {\n      return [\"Lab culture\", \"Demo / Test\"].includes(this.sample_gear);\n    },\n  },\n  watch: {\n    msg: {\n      handler(newMsg) {\n        const p = newMsg?.payload || {};\n        if (p.sample_gear !== undefined) this.sample_gear = p.sample_gear;\n        if (p.sample_filtered_volume !== undefined)\n          this.sample_filtered_volume = Number(p.sample_filtered_volume);\n        if (p.sample_concentration_factor !== undefined)\n          this.sample_concentration_factor = Number(p.sample_concentration_factor);\n        if (p.sample_sieve_mesh_size !== undefined)\n          this.sample_sieve_mesh_size = Number(p.sample_sieve_mesh_size);\n        if (p.sample_depth !== undefined)\n          this.sample_depth = Number(p.sample_depth);\n        if (p.sample_comment !== undefined)\n          this.sample_comment = String(p.sample_comment);\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    sendUpdate(topic, extra = {}) {\n      this.send({\n        topic,\n        payload: {\n          sample_filtered_volume: Number(this.sample_filtered_volume) || 0,\n          sample_concentration_factor: Number(this.sample_concentration_factor) || 0,\n          sample_sieve_mesh_size: Number(this.sample_sieve_mesh_size) || 0,\n          sample_depth: Number(this.sample_depth) || 0,\n          sample_comment: this.sample_comment || \"\",\n          ...extra,\n        },\n      });\n    },\n\n    openHint(type) {\n      if (type === \"filtered_volume\") {\n        this.hintTitle = \"Filtered Volume\";\n        this.hintText =\n          \"Enter the total volume of water that passed through the net or filter during sampling, measured in liters (L).\";\n      } else if (type === \"concentration_factor\") {\n        this.hintTitle = \"Concentration Factor\";\n        this.hintText =\n          \"Specify the ratio by which the filtered water volume was concentrated into the final collected sample.\";\n      } else if (type === \"sieve_mesh_size\") {\n        this.hintTitle = \"Sieve Mesh Size\";\n        this.hintText =\n          \"Indicate the mesh size of the sieve used to separate particles or organisms, in micrometers (μm).\";\n      } else if (type === \"sample_depth\") {\n        this.hintTitle = \"Depth of the Sample\";\n        this.hintText =\n          \"Specify the depth (in meters) at which the sample was collected.\";\n      } else if (type === \"sample_comment\") {\n        this.hintTitle = \"Sample Comment\";\n        this.hintText =\n          \"Add any notes or context about the sample (e.g., weather, color, debris, issues).\";\n      }\n      this.hintDialog = true;\n    },\n  },\n};\n</script>\n\n<style scoped>\n@media (max-width: 1024px) {\n  .v-text-field input,\n  .v-textarea textarea {\n    font-size: 1.2rem !important;\n  }\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 410,
        "y": 460,
        "wires": [
            [
                "d216b35a8b521fe5"
            ]
        ]
    },
    {
        "id": "8e3eed5be42ad41f",
        "type": "ui-template",
        "z": "190b0c9aa75e8843",
        "group": "59ce6abfbb7f8683",
        "page": "",
        "ui": "",
        "name": "Navigation Bottom",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "\n<template>\n  <v-container fluid class=\"ma-0 pa-0\">\n    <v-row align=\"center\" justify=\"space-between\" class=\"px-2\">\n      <!-- Back to Preview -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"preview\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          <v-icon start>mdi-chevron-left</v-icon>\n          Preview\n        </v-btn>\n      </v-col>\n\n      <!-- Forward to Acquisition -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"acquisition\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          Acquisition\n          <v-icon end>mdi-chevron-right</v-icon>\n        </v-btn>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1290,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "a6bc59e4c830d424",
        "type": "function",
        "z": "190b0c9aa75e8843",
        "name": "Get Global Variables",
        "func": "const keys = global.keys(); // Get all global variable keys\nmsg.payload = {}; // Initialize the payload object\n\nkeys.forEach(key => {\n    // Ignore keys that start with \"$\"\n    if (!key.startsWith('$')) {\n        msg.payload[key] = global.get(key);\n    }\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 140,
        "wires": [
            [
                "279f3ddada9cadaa",
                "96550b272e3da513",
                "1c90e219a749e53e",
                "09b551fa202d8029",
                "93a68ffbce74d70d"
            ]
        ]
    },
    {
        "id": "0931106adf64b43d",
        "type": "ui-event",
        "z": "190b0c9aa75e8843",
        "ui": "e6ae26617c24c3ea",
        "name": "UI Event",
        "x": 80,
        "y": 40,
        "wires": [
            [
                "a68e52177173f690"
            ]
        ]
    },
    {
        "id": "a68e52177173f690",
        "type": "switch",
        "z": "190b0c9aa75e8843",
        "name": "msg.topic === \"$pageview\"",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$pageview",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 40,
        "wires": [
            [
                "b1a74fe5569d418a"
            ]
        ]
    },
    {
        "id": "b1a74fe5569d418a",
        "type": "switch",
        "z": "190b0c9aa75e8843",
        "name": "msg.payload.page.path === \"/metadata\"",
        "property": "payload.page.path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/metadata",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 580,
        "y": 40,
        "wires": [
            [
                "a6bc59e4c830d424"
            ]
        ]
    },
    {
        "id": "9780c3e7b1792160",
        "type": "switch",
        "z": "190b0c9aa75e8843",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "object_datetime",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "object_latlon",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 200,
        "wires": [
            [
                "ae90b33dfda74614"
            ],
            [
                "875b74e16870159d"
            ]
        ]
    },
    {
        "id": "875b74e16870159d",
        "type": "function",
        "z": "190b0c9aa75e8843",
        "name": "set object_latlon",
        "func": "if (msg.topic) {\n    global.set(\"object_lat\", msg.payload.object_lat);\n    global.set(\"object_lon\", msg.payload.object_lon);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "ae90b33dfda74614",
        "type": "function",
        "z": "190b0c9aa75e8843",
        "name": "set object_datetime",
        "func": "if (msg.topic) {\n    global.set(\"object_date\", msg.payload.object_date);\n    global.set(\"object_time\", msg.payload.object_time);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "1d06a5e5a5877d24",
        "type": "switch",
        "z": "190b0c9aa75e8843",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "object_datetime_end",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "object_latlon_end",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 300,
        "wires": [
            [
                "42d27ae01c6fd201"
            ],
            [
                "23f3059257ce93f6"
            ]
        ]
    },
    {
        "id": "23f3059257ce93f6",
        "type": "function",
        "z": "190b0c9aa75e8843",
        "name": "set object_latlon_end",
        "func": "if (msg.topic) {\n    global.set(\"object_lat_end\", msg.payload.object_lat_end);\n    global.set(\"object_lon_end\", msg.payload.object_lon_end);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "42d27ae01c6fd201",
        "type": "function",
        "z": "190b0c9aa75e8843",
        "name": "set object_datetime_end",
        "func": "if (msg.topic) {\n    global.set(\"object_date_end\", msg.payload.object_date_end);\n    global.set(\"object_time_end\", msg.payload.object_time_end);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "2ef0ae85c43d66d6",
        "type": "switch",
        "z": "190b0c9aa75e8843",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sample_net_params",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 570,
        "y": 400,
        "wires": [
            [
                "e32fbe7bc4987b3c"
            ]
        ]
    },
    {
        "id": "e32fbe7bc4987b3c",
        "type": "function",
        "z": "190b0c9aa75e8843",
        "name": "set sample_net_params",
        "func": "if (msg.topic) {\n    global.set(\"sample_net_mouth_diameter\", msg.payload.sample_net_mouth_diameter);\n    global.set(\"sample_net_length\", msg.payload.sample_net_length);\n    global.set(\"sample_net_mesh_size\", msg.payload.sample_net_mesh_size);\n    global.set(\"sample_collected_volume\", msg.payload.sample_collected_volume);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "d216b35a8b521fe5",
        "type": "switch",
        "z": "190b0c9aa75e8843",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sample_water_params",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 570,
        "y": 460,
        "wires": [
            [
                "419e682def601ef5"
            ]
        ]
    },
    {
        "id": "419e682def601ef5",
        "type": "function",
        "z": "190b0c9aa75e8843",
        "name": "set sample_water_params",
        "func": "if (msg.topic) {\n    global.set(\"sample_filtered_volume\", msg.payload.sample_filtered_volume);\n    global.set(\"sample_concentration_factor\", msg.payload.sample_concentration_factor);\n    global.set(\"sample_sieve_mesh_size\", msg.payload.sample_sieve_mesh_size);\n    global.set(\"sample_depth\", msg.payload.sample_depth);\n    global.set(\"sample_comment\", msg.payload.sample_comment);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "13f96cf49ae6d6a6",
        "type": "switch",
        "z": "190b0c9aa75e8843",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sample_project_meta",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 570,
        "y": 140,
        "wires": [
            [
                "da13300e5bcb0c26",
                "1c90e219a749e53e",
                "09b551fa202d8029",
                "96550b272e3da513",
                "93a68ffbce74d70d"
            ]
        ]
    },
    {
        "id": "da13300e5bcb0c26",
        "type": "function",
        "z": "190b0c9aa75e8843",
        "name": "set sample_project_meta",
        "func": "if (msg.topic) {\n    global.set(\"sample_project\", msg.payload.sample_project);\n    global.set(\"sample_operator\", msg.payload.sample_operator);\n    global.set(\"sample_id\", msg.payload.sample_id);\n    global.set(\"sample_gear\", msg.payload.sample_gear);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "ffe728d961068c62",
        "type": "ui-template",
        "z": "35d7387466dd0bc0",
        "group": "b274327af3807b79",
        "page": "",
        "ui": "",
        "name": "Streaming",
        "order": 1,
        "width": "7",
        "height": "18",
        "head": "",
        "format": "  <iframe \n    src=\"/preview\" \n    >\n  </iframe>\n  <style>\n    iframe {\n      width: 100%;\n      height: 100%;\n      margin: 0;\n      border: none;\n    }\n  </style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1310,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "aa6924c7e0aff26c",
        "type": "ui-template",
        "z": "35d7387466dd0bc0",
        "group": "d2f77573ed4317e4",
        "page": "",
        "ui": "",
        "name": "Acquisition settings",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <v-container fluid class=\"pa-2\">\n    <!-- Acquisition ID -->\n    <v-row>\n      <v-col cols=\"12\">\n        <v-text-field\n          v-model.number=\"acq_id\"\n          type=\"number\"\n          label=\"Acquisition ID\"\n          variant=\"outlined\"\n          placeholder=\"ex : 001\"\n          class=\"aligned-input\"\n          @input=\"sendUpdate()\"\n          prefix=\"A_\"\n        >\n          <template #append>\n            <v-icon color=\"primary\" class=\"cursor-pointer\"\n              @click=\"openHint('Acquisition ID','Unique identifier for each acquisition run.')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n    </v-row>\n\n    <!-- Number of Images -->\n    <v-row>\n      <v-col cols=\"12\" sm=\"8\">\n        <v-slider\n          v-model.number=\"acq_nb_frame\"\n          :max=\"10000\"\n          :min=\"1\"\n          :step=\"1\"\n          label=\"Number of Images\"\n          hide-details\n          @update:model-value=\"autoCalculateVolumes\"\n        />\n      </v-col>\n      <v-col cols=\"12\" sm=\"4\">\n        <v-text-field\n          v-model.number=\"acq_nb_frame\"\n          type=\"number\"\n          variant=\"outlined\"\n          hide-details\n          suffix=\"img\"\n          class=\"aligned-input\"\n          @input=\"autoCalculateVolumes\"\n        >\n          <template #append>\n            <v-icon color=\"primary\" class=\"cursor-pointer\"\n              @click=\"openHint('Number of Images','Total number of images captured during acquisition.')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n    </v-row>\n\n    <!-- Interimage Volume -->\n    <v-row>\n      <v-col cols=\"12\" sm=\"8\">\n        <v-slider\n          v-model.number=\"acq_interframe_volume\"\n          :max=\"100\"\n          :min=\"0\"\n          :step=\"1\"\n          label=\"Volume between images\"\n          hide-details\n          @update:model-value=\"autoCalculateVolumes\"\n        />\n      </v-col>\n      <v-col cols=\"12\" sm=\"4\">\n        <v-text-field\n          v-model.number=\"acq_interframe_volume\"\n          type=\"number\"\n          variant=\"outlined\"\n          hide-details\n          suffix=\"µL\"\n          class=\"aligned-input\"\n          @input=\"autoCalculateVolumes\"\n        >\n          <template #append>\n            <v-icon color=\"primary\" class=\"cursor-pointer\"\n              @click=\"openHint('Volume between images','Sample volume displaced between consecutive images (µL).')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n    </v-row>\n\n    <!-- Volume Imaged -->\n    <v-row class=\"aligned-row\">\n      <v-col cols=\"12\" sm=\"8\" class=\"d-flex align-center\">\n        <span class=\"text-subtitle-1 text-medium-emphasis ma-2\">Volume Imaged :</span>\n      </v-col>\n      <v-col cols=\"12\" sm=\"4\" class=\"d-flex align-center\">\n        <v-text-field\n          :model-value=\"fmt(acq_imaged_volume)\"\n          suffix=\"mL\"\n          variant=\"outlined\"\n          hide-details\n          readonly\n          class=\"aligned-input mr-1\"\n        >\n          <template #append>\n            <v-icon color=\"primary\" class=\"cursor-pointer\" @click=\"showVolumeImagedHint()\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n    </v-row>\n\n    <!-- Total Volume Displaced -->\n    <v-row class=\"aligned-row\">\n      <v-col cols=\"12\" sm=\"8\" class=\"d-flex align-center\">\n        <span class=\"text-subtitle-1 text-medium-emphasis ma-2\">Total Volume Displaced :</span>\n      </v-col>\n      <v-col cols=\"12\" sm=\"4\" class=\"d-flex align-center\">\n        <v-text-field\n          :model-value=\"fmt(acq_pumped_volume)\"\n          suffix=\"mL\"\n          variant=\"outlined\"\n          hide-details\n          readonly\n          class=\"aligned-input mr-1\"\n        >\n          <template #append>\n            <v-icon color=\"primary\" class=\"cursor-pointer\" @click=\"showVolumeDisplacedHint()\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-text-field>\n      </v-col>\n    </v-row>\n\n    <!-- Comment -->\n    <v-row>\n      <v-col cols=\"12\">\n        <v-textarea\n          v-model=\"acq_comment\"\n          label=\"Acquisition Comment\"\n          variant=\"outlined\"\n          rows=\"2\"\n          @input=\"sendUpdate()\"\n        >\n          <template #append>\n            <v-icon color=\"primary\" class=\"cursor-pointer\"\n              @click=\"openHint('Acquisition Comment','Notes or remarks about this acquisition.')\">\n              mdi-information\n            </v-icon>\n          </template>\n        </v-textarea>\n      </v-col>\n    </v-row>\n\n    <!-- Progress Bar -->\n    <v-row>\n      <v-col cols=\"12\">\n        <v-progress-linear\n          :model-value=\"acq_progression\"\n          color=\"primary\"\n          height=\"24\"\n          rounded\n          striped\n          class=\"mt-2 mb-2\"\n        >\n          <template #default=\"{ value }\">\n            <strong>{{ Math.min(100, Math.ceil(value || 0)) }}%</strong>\n          </template>\n        </v-progress-linear>\n      </v-col>\n    </v-row>\n\n    <!-- Estimated Duration -->\n    <v-row class=\"aligned-row\">\n      <v-col cols=\"12\" sm=\"8\" class=\"d-flex align-center\">\n        <span class=\"text-subtitle-1 text-medium-emphasis ma-2\">Estimated duration left :</span>\n      </v-col>\n      <v-col cols=\"12\" sm=\"4\" class=\"d-flex align-center\">\n        <v-text-field\n          :model-value=\"formatDuration(acq_duration_left)\"\n          variant=\"plain\"\n          hide-details\n          readonly\n          class=\"aligned-input\"\n        />\n      </v-col>\n    </v-row>\n\n    <!-- Status Alert -->\n    <v-row>\n      <v-col cols=\"12\">\n        <v-alert\n          v-if=\"acq_status_message\"\n          :type=\"statusType\"\n          :color=\"statusColor\"\n          border=\"start\"\n          variant=\"tonal\"\n          class=\"text-subtitle-1\"\n          prominent\n        >\n          {{ formattedStatus }}\n        </v-alert>\n      </v-col>\n    </v-row>\n\n    <!-- Start / Stop Toggle -->\n    <v-row>\n      <v-col cols=\"12\">\n        <v-btn-toggle\n          v-model=\"acq_status\"\n          variant=\"outlined\"\n          mandatory\n          divided\n          shaped\n          class=\"d-flex justify-space-between mt-4\"\n          @update:model-value=\"handleAcqStatusChange\"\n        >\n          <v-btn class=\"flex-grow-1\" value=\"off\" color=\"red\">Stop</v-btn>\n          <v-btn class=\"flex-grow-1\" value=\"on\" color=\"green\">Start</v-btn>\n        </v-btn-toggle>\n      </v-col>\n    </v-row>\n\n    <!-- Hint Dialog -->\n    <v-dialog v-model=\"hintDialog\" max-width=\"600\">\n      <v-card>\n        <v-card-title class=\"text-h6\">{{ hintTitle }}</v-card-title>\n        <v-card-text v-html=\"hintText\" class=\"text-body-2\"></v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn text color=\"primary\" @click=\"hintDialog = false\">Close</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  props: [\"msg\"],\n  data() {\n    return {\n      acq_id: \"\",\n      acq_nb_frame: \"\",\n      acq_interframe_volume: 0,\n      acq_imaged_volume: 0,\n      acq_pumped_volume: 0,\n      acq_comment: \"\",\n      acq_progression: 0,\n      acq_duration_left: 0,\n      acq_status: \"off\",\n      acq_status_message: \"\",\n      calibration_pixel_size: 0,\n      calibration_sensor_width: 0,\n      calibration_sensor_height: 0,\n      acq_flowcell_thickness: 0,\n      frame_volume_um3: 0,\n      topic: \"acq_params\",\n      hintDialog: false,\n      hintTitle: \"\",\n      hintText: \"\",\n      lastUpdateTime: null,\n    };\n  },\n  computed: {\n    sensor_width_um() { return (this.calibration_sensor_width || 0) * (this.calibration_pixel_size || 0); },\n    sensor_height_um() { return (this.calibration_sensor_height || 0) * (this.calibration_pixel_size || 0); },\n    frame_volume_ml() { return this.frame_volume_um3 / 1e12; },\n    formattedStatus() {\n      const s = this.acq_status_message;\n      if (s === \"Started\") return \"Image capture process has started successfully.\";\n      if (s === \"Done\") return \"Acquisition completed successfully.\";\n      return s;\n    },\n    statusColor() {\n      const s = this.acq_status_message || \"\";\n      if (!s) return \"grey\";\n      if (s.startsWith(\"Error\")) return \"red\";\n      if (s.startsWith(\"Configuration update error\")) return \"orange\";\n      if (s.includes(\"WAS NOT CAPTURED\")) return \"red\";\n      if ([\"Started\", \"Done\"].includes(s)) return \"green\";\n      return \"grey\";\n    },\n    statusType() {\n      if (this.statusColor === \"green\") return \"success\";\n      if (this.statusColor === \"orange\") return \"warning\";\n      if (this.statusColor === \"red\") return \"error\";\n      return \"info\";\n    },\n  },\n  watch: {\n    msg: {\n      handler(newMsg) {\n        const p = newMsg?.payload || {};\n        const topic = newMsg?.topic;\n        if (p.acq_id !== undefined) this.acq_id = String(p.acq_id).replace(/^A[_-]?/, \"\");\n        if (p.acq_nb_frame !== undefined) this.acq_nb_frame = Number(p.acq_nb_frame);\n        if (p.acq_interframe_volume !== undefined) this.acq_interframe_volume = Number(p.acq_interframe_volume);\n        if (p.calibration_pixel_size !== undefined) this.calibration_pixel_size = Number(p.calibration_pixel_size);\n        if (p.calibration_sensor_width !== undefined) this.calibration_sensor_width = Number(p.calibration_sensor_width);\n        if (p.calibration_sensor_height !== undefined) this.calibration_sensor_height = Number(p.calibration_sensor_height);\n        if (p.acq_flowcell_thickness !== undefined) this.acq_flowcell_thickness = Number(p.acq_flowcell_thickness);\n        if (p.status !== undefined) {\n          this.acq_status_message = p.status;\n          const s = String(p.status).toLowerCase();\n          if (s.includes(\"started\") || s.includes(\"running\") || s.includes(\"capturing\")) {\n            this.resetProgress();\n            this.acq_status = \"on\";\n          } else if (s.includes(\"done\") || s.includes(\"idle\") || s.includes(\"stopped\") || s.includes(\"error\") || s.includes(\"not capturing\")) {\n            this.acq_status = \"off\";\n          }\n        }\n        if (topic === \"status/imager\" && p.status === \"Done\") {\n          this.incrementAcqId();\n          this.resetProgress();\n        }\n        this.autoCalculateVolumes();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    fmt(v) { return Number(v || 0).toFixed(3); },\n    formatDuration(mins) {\n      const totalSeconds = Math.max(0, Math.round(mins * 60));\n      const h = String(Math.floor(totalSeconds / 3600)).padStart(2, \"0\");\n      const m = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2, \"0\");\n      const s = String(totalSeconds % 60).padStart(2, \"0\");\n      return `${h}:${m}:${s}`;\n    },\n    resetProgress() { this.acq_progression = 0; this.acq_duration_left = 0; this.lastUpdateTime = Date.now(); },\n    incrementAcqId() { const next = String(Number(this.acq_id || 0) + 1).padStart(1, \"0\"); this.acq_id = next; this.sendUpdate(); },\n    autoCalculateVolumes() {\n      if (this.calibration_sensor_width > 0 && this.calibration_sensor_height > 0 && this.calibration_pixel_size > 0 && this.acq_flowcell_thickness > 0) {\n        const w = this.calibration_sensor_width * this.calibration_pixel_size;\n        const h = this.calibration_sensor_height * this.calibration_pixel_size;\n        const t = this.acq_flowcell_thickness;\n        this.frame_volume_um3 = w * h * t;\n        const frame_ml = this.frame_volume_um3 / 1e12;\n        this.acq_imaged_volume = frame_ml * (this.acq_nb_frame || 0);\n      }\n      const interimage_total_ml = (this.acq_interframe_volume || 0) * (this.acq_nb_frame || 0) / 1000;\n      this.acq_pumped_volume = this.acq_imaged_volume + interimage_total_ml;\n      this.updateProgress();\n      this.sendUpdate();\n    },\n    updateProgress() {\n      if (this.acq_status === \"on\" && this.acq_nb_frame > 0) {\n        const elapsed = (Date.now() - (this.lastUpdateTime || Date.now())) / 1000;\n        if (elapsed > 0) {\n          this.acq_progression = Math.min(100, this.acq_progression + (elapsed / this.acq_nb_frame) * 100);\n          this.acq_duration_left = ((100 - this.acq_progression) / 100) * (this.acq_nb_frame / 60);\n        }\n        this.lastUpdateTime = Date.now();\n      }\n    },\n    handleAcqStatusChange(value) {\n      this.acq_status = value;\n      if (value === \"on\") this.resetProgress();\n      if (value === \"off\") this.incrementAcqId();\n      if (typeof this.send === \"function\") this.send({ topic: \"imager/image\", payload: { status: value } });\n    },\n    showVolumeImagedHint() {\n      const area = this.sensor_width_um * this.sensor_height_um;\n      const html = `\n        <p><b>Volume Imaged</b> represents the total fluid volume optically captured.</p>\n        <hr>\n        <ul>\n          <li><b>Sensor width:</b> ${Math.round(this.calibration_sensor_width)} px → ${Math.round(this.sensor_width_um)} µm</li>\n          <li><b>Sensor height:</b> ${Math.round(this.calibration_sensor_height)} px → ${Math.round(this.sensor_height_um)} µm</li>\n          <li>\n            <b>Flowcell thickness:</b>\n            ${Math.round(this.acq_flowcell_thickness)} µm\n            <a href=\"hardware\" target=\"_blank\" style=\"margin-left:6px;\">\n              If different, modify your check hardware here.\n            </a>\n          </li>\n        </ul>\n\n\n        <p><b>Step-by-step calculation:</b></p>\n        <ol>\n          <li>Area per image = width × height = ${Math.round(this.sensor_width_um)} × ${Math.round(this.sensor_height_um)} = ${Math.round(area)} µm²</li>\n          <li>Volume per image = area × thickness = ${Math.round(area)} × ${Math.round(this.acq_flowcell_thickness)} = ${Math.round(area * this.acq_flowcell_thickness)} µm³</li>\n          <li>Convert µm³ → mL: divide by 1e12 → ${this.fmt(this.frame_volume_ml)} mL per image</li>\n          <li>Total = ${this.acq_nb_frame} × ${this.fmt(this.frame_volume_ml)} mL = <b>${this.fmt(this.acq_imaged_volume)} mL</b></li>\n        </ol>`;\n      this.openHint(\"Volume Imaged\", html);\n    },\n    showVolumeDisplacedHint() {\n      const inter_ml = (this.acq_nb_frame * this.acq_interframe_volume) / 1000;\n      const html = `\n        <p><b>Total Volume Displaced</b> includes both the imaged volume and the extra fluid moved between images.</p>\n        <hr>\n        <ul>\n          <li><b>Interimage displacement:</b> ${this.acq_nb_frame} × ${this.fmt(this.acq_interframe_volume)} µL = ${this.fmt(inter_ml)} mL</li>\n          <li><b>Imaged volume:</b> ${this.fmt(this.acq_imaged_volume)} mL</li>\n        </ul>\n        <p><b>Total:</b> ${this.fmt(this.acq_imaged_volume)} + ${this.fmt(inter_ml)} = <b>${this.fmt(this.acq_pumped_volume)} mL</b></p>`;\n      this.openHint(\"Total Volume Displaced\", html);\n    },\n    openHint(title, text) { this.hintTitle = title; this.hintText = text; this.hintDialog = true; },\n    sendUpdate(extra = {}) {\n      if (typeof this.send !== \"function\") return;\n      this.send({\n        topic: this.topic,\n        payload: {\n          acq_id: `A_${this.acq_id}`,\n          acq_nb_frame: this.acq_nb_frame,\n          acq_interframe_volume: this.acq_interframe_volume,\n          acq_imaged_volume: Number(this.acq_imaged_volume.toFixed(2)),\n          acq_pumped_volume: Number(this.acq_pumped_volume.toFixed(2)),\n          acq_comment: this.acq_comment,\n          acq_progression: this.acq_progression,\n          acq_duration_left: this.acq_duration_left,\n          acq_status: this.acq_status,\n          status: this.acq_status_message,\n          calibration_pixel_size: this.calibration_pixel_size,\n          calibration_sensor_width: this.calibration_sensor_width,\n          calibration_sensor_height: this.calibration_sensor_height,\n          acq_flowcell_thickness: this.acq_flowcell_thickness,\n          ...extra,\n        },\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.cursor-pointer { cursor: pointer; }\n.aligned-input >>> .v-input__control { align-items: center !important; }\n.aligned-row { align-items: center !important; }\n.v-card-text table td { padding: 4px 8px; border-bottom: 1px solid #ddd; }\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 410,
        "y": 140,
        "wires": [
            [
                "56b3c60c6d4ffd87"
            ]
        ]
    },
    {
        "id": "a39e07fd1a86ac84",
        "type": "ui-template",
        "z": "35d7387466dd0bc0",
        "group": "3ae252a2e5abca89",
        "page": "",
        "ui": "",
        "name": "Navigation Top",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "\n<template>\n  <v-container fluid class=\"ma-0 pa-0\">\n    <v-row align=\"center\" justify=\"space-between\" class=\"px-2\">\n      <!-- Back to Preview -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"metadata\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          <v-icon start>mdi-chevron-left</v-icon>\n          Metadata\n        </v-btn>\n      </v-col>\n\n      <!-- Forward to Acquisition -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"segmentation\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          Segmentation\n          <v-icon end>mdi-chevron-right</v-icon>\n        </v-btn>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1300,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "56b3c60c6d4ffd87",
        "type": "switch",
        "z": "35d7387466dd0bc0",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "acq_params",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "imager/image",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 140,
        "wires": [
            [
                "f841ebf999dd8cb3"
            ],
            [
                "09ecc922fe2214a8"
            ]
        ]
    },
    {
        "id": "f841ebf999dd8cb3",
        "type": "function",
        "z": "35d7387466dd0bc0",
        "name": "set acq_params",
        "func": "if (msg.topic) {\n    global.set(\"acq_id\", msg.payload.acq_id);\n    global.set(\"acq_nb_frame\", msg.payload.acq_nb_frame);\n    global.set(\"acq_interframe_volume\", msg.payload.acq_interframe_volume);\n    global.set(\"acq_imaged_volume\", msg.payload.acq_imaged_volume);\n    global.set(\"acq_pumped_volume\", msg.payload.acq_pumped_volume);\n    global.set(\"acq_comment\", msg.payload.acq_comment);\n    global.set(\"acq_progression\", msg.payload.acq_progression);\n    global.set(\"acq_duration_left\", msg.payload.acq_duration_left);\n    global.set(\"acq_status\", msg.payload.acq_status);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "e3c084164002f23f",
        "type": "ui-event",
        "z": "35d7387466dd0bc0",
        "ui": "e6ae26617c24c3ea",
        "name": "UI Event",
        "x": 80,
        "y": 40,
        "wires": [
            [
                "5bea829ec02ded61"
            ]
        ]
    },
    {
        "id": "5bea829ec02ded61",
        "type": "switch",
        "z": "35d7387466dd0bc0",
        "name": "msg.topic === \"$pageview\"",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$pageview",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 40,
        "wires": [
            [
                "54ae95ca6088f307"
            ]
        ]
    },
    {
        "id": "54ae95ca6088f307",
        "type": "switch",
        "z": "35d7387466dd0bc0",
        "name": "msg.payload.page.path === \"/acquisition\"",
        "property": "payload.page.path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/acquisition",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 40,
        "wires": [
            [
                "113085f8dd63df0c"
            ]
        ]
    },
    {
        "id": "113085f8dd63df0c",
        "type": "function",
        "z": "35d7387466dd0bc0",
        "name": "Get Global Variables",
        "func": "const keys = global.keys(); // Get all global variable keys\nmsg.payload = {}; // Initialize the payload object\n\nkeys.forEach(key => {\n    // Ignore keys that start with \"$\"\n    if (!key.startsWith('$')) {\n        msg.payload[key] = global.get(key);\n    }\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 140,
        "wires": [
            [
                "aa6924c7e0aff26c"
            ]
        ]
    },
    {
        "id": "8ceee00f68df186c",
        "type": "mqtt in",
        "z": "35d7387466dd0bc0",
        "name": "",
        "topic": "status/imager",
        "qos": "0",
        "datatype": "json",
        "broker": "8dc3722c.06efa8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 90,
        "y": 200,
        "wires": [
            [
                "aa6924c7e0aff26c"
            ]
        ]
    },
    {
        "id": "425d72ed91ea264e",
        "type": "ui-template",
        "z": "35d7387466dd0bc0",
        "group": "3d88a1872dbbf8a7",
        "page": "",
        "ui": "",
        "name": "Navigation Bottom",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "\n<template>\n  <v-container fluid class=\"ma-0 pa-0\">\n    <v-row align=\"center\" justify=\"space-between\" class=\"px-2\">\n      <!-- Back to Preview -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"metadata\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          <v-icon start>mdi-chevron-left</v-icon>\n          Metadata\n        </v-btn>\n      </v-col>\n\n      <!-- Forward to Acquisition -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"segmentation\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          Segmentation\n          <v-icon end>mdi-chevron-right</v-icon>\n        </v-btn>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1290,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "46b98c54eb680c2e",
        "type": "mqtt out",
        "z": "35d7387466dd0bc0",
        "name": "MQTT",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8dc3722c.06efa8",
        "x": 1070,
        "y": 200,
        "wires": []
    },
    {
        "id": "7d28a539738ca73a",
        "type": "function",
        "z": "35d7387466dd0bc0",
        "name": "update_config",
        "func": "const keys = global.keys(); // Récupère toutes les clés des variables globales\nlet config = {}; // Objet pour stocker la configuration\n\nkeys.forEach(key => {\n    // Ignore les clés qui commencent par \"$\"\n    if (!key.startsWith('$')) {\n        // Ne garde que celles qui commencent par les préfixes demandés\n        if (\n            key.startsWith('sample_') ||\n            key.startsWith('acq_') ||\n            key.startsWith('object_') ||\n            key.startsWith('process_') ||\n            key.startsWith('img_')\n        ) {\n            config[key] = global.get(key);\n        }\n    }\n});\n\n// Crée le payload final\nmsg.payload = {\n    action: \"update_config\",\n    config: config\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 200,
        "wires": [
            [
                "46b98c54eb680c2e"
            ]
        ]
    },
    {
        "id": "09ecc922fe2214a8",
        "type": "switch",
        "z": "35d7387466dd0bc0",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 200,
        "wires": [
            [
                "7d28a539738ca73a",
                "bb2825f419cc6526"
            ],
            [
                "44c8ea6299e13784"
            ]
        ]
    },
    {
        "id": "44c8ea6299e13784",
        "type": "function",
        "z": "35d7387466dd0bc0",
        "name": "stop acquisition",
        "func": "\nmsg.payload = {\n    action: \"stop\"\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 240,
        "wires": [
            [
                "46b98c54eb680c2e"
            ]
        ]
    },
    {
        "id": "bb2825f419cc6526",
        "type": "function",
        "z": "35d7387466dd0bc0",
        "name": "start acquisition",
        "func": "const acq_interframe_volume = global.get(\"acq_interframe_volume\") || 0;\nconst acq_nb_frame = global.get(\"acq_nb_frame\") || 0;\n\n\n// Crée le payload final\nmsg.payload = {\n    action: \"image\",\n    pump_direction: \"FORWARD\",\n    volume: acq_interframe_volume/1000,\n    nb_frame: acq_nb_frame,\n    sleep: 0.1\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 280,
        "wires": [
            [
                "ce5cca3b8fe34379"
            ]
        ]
    },
    {
        "id": "ce5cca3b8fe34379",
        "type": "delay",
        "z": "35d7387466dd0bc0",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 280,
        "wires": [
            [
                "46b98c54eb680c2e"
            ]
        ]
    },
    {
        "id": "250979b4672d81b6",
        "type": "ui-event",
        "z": "0fd76ac156d78937",
        "ui": "e6ae26617c24c3ea",
        "name": "UI Event",
        "x": 80,
        "y": 40,
        "wires": [
            [
                "72421c36bb0418bc"
            ]
        ]
    },
    {
        "id": "72421c36bb0418bc",
        "type": "switch",
        "z": "0fd76ac156d78937",
        "name": "msg.topic === \"$pageview\"",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$pageview",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 40,
        "wires": [
            [
                "66d295cc27d69cec"
            ]
        ]
    },
    {
        "id": "66d295cc27d69cec",
        "type": "switch",
        "z": "0fd76ac156d78937",
        "name": "msg.payload.page.path === \"/segmentation\"",
        "property": "payload.page.path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/segmentation",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 40,
        "wires": [
            [
                "d4129bf3f5622aa6",
                "33c0d1b8251b5d00",
                "921be0438de344ac"
            ]
        ]
    },
    {
        "id": "61c2c281b1c6e055",
        "type": "ui-table",
        "z": "0fd76ac156d78937",
        "group": "bfd4acb7b243514f",
        "name": "",
        "label": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "maxrows": "10",
        "passthru": false,
        "autocols": false,
        "showSearch": false,
        "deselect": true,
        "selectionType": "click",
        "columns": [
            {
                "title": "Project name",
                "key": "project_name",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Sample ID",
                "key": "sample_id",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Acquisition ID",
                "key": "acquisition_id",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Operator Name",
                "key": "operator_name",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Number of images",
                "key": "image_acquired_count",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Path",
                "key": "path",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "start"
            },
            {
                "title": "Segmented",
                "key": "is_segmented",
                "keyType": "key",
                "type": "tickcross",
                "width": "",
                "align": "start"
            }
        ],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "replace",
        "x": 370,
        "y": 140,
        "wires": [
            [
                "cdb586337f186494"
            ]
        ]
    },
    {
        "id": "d4129bf3f5622aa6",
        "type": "list acquisitions",
        "z": "0fd76ac156d78937",
        "name": "",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "61c2c281b1c6e055"
            ]
        ]
    },
    {
        "id": "9e44bf9a44615e20",
        "type": "ui-template",
        "z": "0fd76ac156d78937",
        "group": "9f00807878a32dd5",
        "page": "",
        "ui": "",
        "name": "Navigation Bottom",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "\n<template>\n  <v-container fluid class=\"ma-0 pa-0\">\n    <v-row align=\"center\" justify=\"space-between\" class=\"px-2\">\n      <!-- Back to Preview -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"acquisition\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          <v-icon start>mdi-chevron-left</v-icon>\n          Acquisition\n        </v-btn>\n      </v-col>\n\n      <!-- Forward to Acquisition -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"visualization\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          Visualization\n          <v-icon end>mdi-chevron-right</v-icon>\n        </v-btn>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1290,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "d11906e048438931",
        "type": "ui-template",
        "z": "0fd76ac156d78937",
        "group": "9b992ca6515ed058",
        "page": "",
        "ui": "",
        "name": "Navigation Top",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "\n<template>\n  <v-container fluid class=\"ma-0 pa-0\">\n    <v-row align=\"center\" justify=\"space-between\" class=\"px-2\">\n      <!-- Back to Preview -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"acquisition\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          <v-icon start>mdi-chevron-left</v-icon>\n          Acquisition\n        </v-btn>\n      </v-col>\n\n      <!-- Forward to Acquisition -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"visualization\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          Visualization\n          <v-icon end>mdi-chevron-right</v-icon>\n        </v-btn>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1300,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "26074b8d8ad8abf9",
        "type": "ui-template",
        "z": "0fd76ac156d78937",
        "group": "bfd4acb7b243514f",
        "page": "",
        "ui": "",
        "name": "List of Acquisitions",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "\n<template>\n  <!-- Dialog only -->\n  <v-dialog v-model=\"showDialog\" max-width=\"500\">\n    <v-card>\n      <v-card-title class=\"font-weight-bold\">\n        Segmentation Required\n      </v-card-title>\n\n      <v-card-text>\n        <p>\n          The selected sample has not been segmented yet.<br>\n          Do you want to start segmentation now?\n        </p>\n\n        <v-divider class=\"my-3\"></v-divider>\n\n        <v-list density=\"compact\">\n          <v-list-item>\n            <v-list-item-title><b>Project:</b> {{ payload.project_name }}</v-list-item-title>\n          </v-list-item>\n          <v-list-item>\n            <v-list-item-title><b>Sample:</b> {{ payload.sample_id }}</v-list-item-title>\n          </v-list-item>\n          <v-list-item>\n            <v-list-item-title><b>Acquisition:</b> {{ payload.acquisition_id }}</v-list-item-title>\n          </v-list-item>\n          <v-list-item>\n            <v-list-item-title><b>Operator:</b> {{ payload.operator_name }}</v-list-item-title>\n          </v-list-item>\n          <v-list-item>\n            <v-list-item-title><b>Images acquired:</b> {{ payload.image_acquired_count }}</v-list-item-title>\n          </v-list-item>\n          <v-list-item>\n            <v-list-item-title><b>Path:</b> {{ payload.path }}</v-list-item-title>\n          </v-list-item>\n        </v-list>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"grey\" variant=\"tonal\" @click=\"showDialog = false\">\n          Cancel\n        </v-btn>\n        <v-btn color=\"primary\" variant=\"flat\" @click=\"sendSegment\">\n          Segment\n        </v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\n  export default {\n  data() {\n    return {\n      payload: {},\n      showDialog: false,\n    };\n  },\n  watch: {\n    msg: {\n      immediate: true,\n      handler(msg) {\n        if (!msg || !msg.payload) return;\n        this.payload = msg.payload;\n        this.showDialog = msg.payload.is_segmented === false;\n      },\n    },\n  },\n  methods: {\n    sendSegment() {\n      const outMsg = {\n        topic: \"segmenter/segment\",\n        payload: {\n          action: \"segment\",\n          path: [this.payload.path],\n          settings: {\n            force: false,\n            recursive: true,\n            ecotaxa: true,\n            keep: true,\n            process_id: 1,\n          },\n          // 👇 Inject dataset info cleanly under a new key\n          dataset: {\n            project_name: this.payload.project_name,\n            sample_id: this.payload.sample_id,\n            acquisition_id: this.payload.acquisition_id,\n            operator_name: this.payload.sample_operator,\n            image_acquired_count: this.payload.acq_nb_frame,\n            path: this.payload.path,\n          },\n        },\n      };\n\n      this.send(outMsg);\n      this.showDialog = false;\n    },\n  },\n};\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 690,
        "y": 140,
        "wires": [
            [
                "24c71b69e60e41bd"
            ]
        ]
    },
    {
        "id": "4bdd8a4afcdb704b",
        "type": "mqtt out",
        "z": "0fd76ac156d78937",
        "name": "MQTT",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8dc3722c.06efa8",
        "x": 990,
        "y": 140,
        "wires": []
    },
    {
        "id": "24c71b69e60e41bd",
        "type": "switch",
        "z": "0fd76ac156d78937",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "segmenter/segment",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 850,
        "y": 140,
        "wires": [
            [
                "4bdd8a4afcdb704b",
                "33c0d1b8251b5d00",
                "f8f4b34842d35713"
            ]
        ]
    },
    {
        "id": "34f6f23f1a46da67",
        "type": "mqtt in",
        "z": "0fd76ac156d78937",
        "name": "",
        "topic": "status/segmenter",
        "qos": "0",
        "datatype": "json",
        "broker": "8dc3722c.06efa8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 100,
        "y": 200,
        "wires": [
            [
                "33c0d1b8251b5d00"
            ]
        ]
    },
    {
        "id": "33c0d1b8251b5d00",
        "type": "ui-template",
        "z": "0fd76ac156d78937",
        "group": "402b3d24c87ab0d2",
        "page": "",
        "ui": "",
        "name": "Details of Segmentation",
        "order": 1,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<template>\n  <!-- Dataset Info: shown only when segmentation is currently active -->\n  <v-list\n    density=\"compact\"\n    v-if=\"isSegmenting && segment.dataset.project_name\"\n  >\n    <v-list-item>\n      <v-list-item-title>\n        <b>Project:</b> {{ segment.dataset.project_name }}\n      </v-list-item-title>\n    </v-list-item>\n    <v-list-item>\n      <v-list-item-title>\n        <b>Sample:</b> {{ segment.dataset.sample_id }}\n      </v-list-item-title>\n    </v-list-item>\n    <v-list-item>\n      <v-list-item-title>\n        <b>Acquisition:</b> {{ segment.dataset.acquisition_id }}\n      </v-list-item-title>\n    </v-list-item>\n    <v-list-item>\n      <v-list-item-title>\n        <b>Path:</b> {{ segment.dataset.path }}\n      </v-list-item-title>\n    </v-list-item>\n  </v-list>\n\n  <v-divider\n    class=\"my-4\"\n    v-if=\"isSegmenting && segment.dataset.project_name\"\n  ></v-divider>\n\n  <!-- Progress Info -->\n  <div v-if=\"statusText\">\n    <div class=\"d-flex justify-space-between align-center mb-2\">\n      <span class=\"text-subtitle-1 font-weight-medium\">Progress</span>\n      <span class=\"text-caption\">{{ progressText }}</span>\n    </div>\n\n    <v-progress-linear\n      :model-value=\"progressPercent\"\n      height=\"10\"\n      color=\"primary\"\n      rounded\n      striped\n    ></v-progress-linear>\n\n    <p class=\"mt-3 mb-0 text-body-2\" v-if=\"currentImage\">\n      Currently segmenting:\n      <strong>{{ currentImage }}</strong>\n    </p>\n  </div>\n\n  <div v-else class=\"text-disabled mt-4\">\n    Awaiting segmentation status...\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      segment: {\n        dataset: {\n          project_name: \"\",\n          sample_id: \"\",\n          acquisition_id: \"\",\n          path: \"\",\n        },\n      },\n      statusText: \"\",\n      currentImage: \"\",\n      currentIndex: 0,\n      totalImages: 0,\n      progressPercent: 0,\n      progressText: \"\",\n    };\n  },\n  computed: {\n    // Active segmentation means: we have a status and it isn't \"Done\"\n    isSegmenting() {\n      return (\n        this.statusText &&\n        !this.statusText.toLowerCase().includes(\"done\") &&\n        !this.statusText.toLowerCase().includes(\"idle\")\n      );\n    },\n  },\n  watch: {\n    msg: {\n      immediate: true,\n      handler(msg) {\n        if (!msg || !msg.topic || !msg.payload) return;\n\n        const p = msg.payload;\n\n        // 1️⃣ Load dataset info from message payload if available\n        if (\n          p.seg_project_name ||\n          p.seg_sample_id ||\n          p.seg_acquisition_id ||\n          p.seg_path\n        ) {\n          this.segment.dataset = {\n            project_name: p.seg_project_name || \"\",\n            sample_id: p.seg_sample_id || \"\",\n            acquisition_id: p.seg_acquisition_id || \"\",\n            path: p.seg_path || \"\",\n          };\n        }\n\n        // 2️⃣ Capture segmentation progress\n        if (msg.topic === \"status/segmenter\") {\n          this.statusText = p.status || \"\";\n\n          // Detect completion and reset dataset fields\n          if (this.statusText.toLowerCase().includes(\"done\")) {\n            this.segment.dataset = {\n              project_name: \"\",\n              sample_id: \"\",\n              acquisition_id: \"\",\n              path: \"\",\n            };\n            this.currentImage = \"\";\n            this.progressPercent = 0;\n            this.progressText = \"\";\n          }\n\n          // Extract current image and progress info\n          const imgMatch = this.statusText.match(/image ([\\w\\-\\_\\.]+),/);\n          this.currentImage = imgMatch ? imgMatch[1] : \"\";\n\n          const progressMatch = this.statusText.match(/image (\\d+)\\/(\\d+)/);\n          if (progressMatch) {\n            this.currentIndex = Number(progressMatch[1]);\n            this.totalImages = Number(progressMatch[2]);\n            this.progressPercent = Math.round(\n              (this.currentIndex / this.totalImages) * 100\n            );\n            this.progressText = `${this.currentIndex} / ${this.totalImages} (${this.progressPercent}%)`;\n          }\n        }\n      },\n    },\n  },\n};\n</script>\n\n<style scoped>\n.text-disabled {\n  color: rgba(0, 0, 0, 0.4);\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1050,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "cdb586337f186494",
        "type": "switch",
        "z": "0fd76ac156d78937",
        "name": "",
        "property": "payload.is_segmented",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 140,
        "wires": [
            [],
            [
                "26074b8d8ad8abf9"
            ]
        ]
    },
    {
        "id": "f8f4b34842d35713",
        "type": "function",
        "z": "0fd76ac156d78937",
        "name": "set seg_params",
        "func": "if (msg.topic) {\n    global.set(\"seg_project_name\", msg.payload.dataset.project_name);\n    global.set(\"seg_sample_id\", msg.payload.dataset.sample_id);\n    global.set(\"seg_acquisition_id\", msg.payload.dataset.acquisition_id);\n    global.set(\"seg_path\", msg.payload.dataset.path);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "921be0438de344ac",
        "type": "function",
        "z": "0fd76ac156d78937",
        "name": "Get Global Variables",
        "func": "const keys = global.keys(); // Get all global variable keys\nmsg.payload = {}; // Initialize the payload object\n\nkeys.forEach(key => {\n    // Ignore keys that start with \"$\"\n    if (!key.startsWith('$')) {\n        msg.payload[key] = global.get(key);\n    }\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 260,
        "wires": [
            [
                "33c0d1b8251b5d00"
            ]
        ]
    },
    {
        "id": "77bb783e65c3ffd6",
        "type": "ui-event",
        "z": "14f8c9b5ce1235cc",
        "ui": "e6ae26617c24c3ea",
        "name": "UI Event",
        "x": 80,
        "y": 40,
        "wires": [
            [
                "55814595d9207e95"
            ]
        ]
    },
    {
        "id": "55814595d9207e95",
        "type": "switch",
        "z": "14f8c9b5ce1235cc",
        "name": "msg.topic === \"$pageview\"",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$pageview",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 40,
        "wires": [
            [
                "90c920ecdab16908"
            ]
        ]
    },
    {
        "id": "90c920ecdab16908",
        "type": "switch",
        "z": "14f8c9b5ce1235cc",
        "name": "msg.payload.page.path === \"/visualization\"",
        "property": "payload.page.path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/visualization",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "75b694eff7cf6747",
        "type": "ui-template",
        "z": "14f8c9b5ce1235cc",
        "group": "1d3abb201c51ff47",
        "page": "",
        "ui": "",
        "name": "Navigation Bottom",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "\n<template>\n  <v-container fluid class=\"ma-0 pa-0\">\n    <v-row align=\"center\" justify=\"space-between\" class=\"px-2\">\n      <!-- Back to Preview -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"segmentation\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          <v-icon start>mdi-chevron-left</v-icon>\n          Segmentation\n        </v-btn>\n      </v-col>\n\n      <!-- Forward to Acquisition -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"export\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          Export\n          <v-icon end>mdi-chevron-right</v-icon>\n        </v-btn>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1290,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "fe2e976833fd41a9",
        "type": "ui-template",
        "z": "14f8c9b5ce1235cc",
        "group": "b570f76ef526af45",
        "page": "",
        "ui": "",
        "name": "Navigation Top",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "\n<template>\n  <v-container fluid class=\"ma-0 pa-0\">\n    <v-row align=\"center\" justify=\"space-between\" class=\"px-2\">\n      <!-- Back to Preview -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"segmentation\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          <v-icon start>mdi-chevron-left</v-icon>\n          Segmentation\n        </v-btn>\n      </v-col>\n\n      <!-- Forward to Acquisition -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"export\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          Export\n          <v-icon end>mdi-chevron-right</v-icon>\n        </v-btn>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1300,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f530763503fdc7d1",
        "type": "mqtt in",
        "z": "14f8c9b5ce1235cc",
        "g": "979647e2e34284fb",
        "name": "",
        "topic": "status/#",
        "qos": "0",
        "datatype": "json",
        "broker": "8dc3722c.06efa8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 100,
        "y": 320,
        "wires": [
            [
                "f0313532a2b77337"
            ]
        ]
    },
    {
        "id": "e5a0432fc7b35b29",
        "type": "function",
        "z": "14f8c9b5ce1235cc",
        "g": "979647e2e34284fb",
        "name": "Count objects segmented",
        "func": "var objectCount = global.get('objectCount') || 0;\n\nif (msg.payload.status === 'Done') {\n    msg.payload.objectCount = objectCount;\n    objectCount=0;\n    }\nelse if (msg.topic === 'status/segmenter/metric') {\n    objectCount++;\n}\n\nglobal.set('objectCount', objectCount);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 320,
        "wires": [
            [
                "ba8045b3448d5bbf"
            ]
        ]
    },
    {
        "id": "ba8045b3448d5bbf",
        "type": "switch",
        "z": "14f8c9b5ce1235cc",
        "g": "979647e2e34284fb",
        "name": "msg.payload.metadata.equivalent_diameter is not null",
        "property": "payload.metadata.equivalent_diameter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 740,
        "y": 320,
        "wires": [
            [
                "68fe28f50beb2add"
            ]
        ]
    },
    {
        "id": "f0313532a2b77337",
        "type": "switch",
        "z": "14f8c9b5ce1235cc",
        "g": "979647e2e34284fb",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "status/segmenter/metric",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 320,
        "wires": [
            [
                "e5a0432fc7b35b29",
                "c6c66ebc50dd5d90",
                "f6c913298cba35ee"
            ]
        ]
    },
    {
        "id": "e045f6939008f23f",
        "type": "ui-chart",
        "z": "14f8c9b5ce1235cc",
        "g": "979647e2e34284fb",
        "group": "bdcb68c6cff2da73",
        "name": "",
        "label": "Histogram - Equivalent Diameter",
        "order": 1,
        "chartType": "histogram",
        "category": "Equivalent Diameter (μm)",
        "categoryType": "str",
        "xAxisLabel": "Equivalent Diameter (μm)",
        "xAxisProperty": "payload.metadata.equivalent_diameter",
        "xAxisPropertyType": "msg",
        "xAxisType": "bins",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "20",
        "xmax": "100",
        "yAxisLabel": "Abundance",
        "yAxisProperty": "payload.metadata.equivalent_diameter",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": "80",
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "1",
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "86400",
        "removeOlderPoints": "",
        "colors": [
            "#00ff04",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "3",
        "height": "6",
        "className": "",
        "interpolation": "linear",
        "x": 1020,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "68fe28f50beb2add",
        "type": "function",
        "z": "14f8c9b5ce1235cc",
        "g": "979647e2e34284fb",
        "name": "convert px to um",
        "func": "// Conversion factor from pixels to micrometers (µm)\nconst px_to_um = 0.75;\n\n// Convert relevant measurements\nmsg.payload.metadata.equivalent_diameter = Math.round(msg.payload.metadata.equivalent_diameter * px_to_um);\nmsg.payload.metadata.width = Math.round(msg.payload.metadata.width * px_to_um);\nmsg.payload.metadata.height = Math.round(msg.payload.metadata.height * px_to_um);\nmsg.payload.metadata.area = Math.round(msg.payload.metadata.area * (px_to_um ** 2)); // Area is in square units\nmsg.payload.metadata.area_exc = Math.round(msg.payload.metadata.area_exc * (px_to_um ** 2));\nmsg.payload.metadata.convex_area = Math.round(msg.payload.metadata.convex_area * (px_to_um ** 2));\nmsg.payload.metadata.major = Math.round(msg.payload.metadata.major * px_to_um);\nmsg.payload.metadata.minor = Math.round(msg.payload.metadata.minor * px_to_um);\nmsg.payload.metadata.perim = Math.round(msg.payload.metadata[\"perim.\"] * px_to_um); // Ensure proper key reference\nmsg.payload.metadata.bounding_box_area = Math.round(msg.payload.metadata.bounding_box_area * (px_to_um ** 2));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 520,
        "wires": [
            [
                "e045f6939008f23f",
                "693e1ad09770bdf5",
                "7433aae2400b7f78",
                "a90099cfe7a37a37",
                "df0dcb1175b8bd5f"
            ]
        ]
    },
    {
        "id": "a20376f0ac08af8e",
        "type": "ui-markdown",
        "z": "14f8c9b5ce1235cc",
        "g": "979647e2e34284fb",
        "group": "bdcb68c6cff2da73",
        "name": "Histogram of equivalent_diameter",
        "order": 3,
        "width": "3",
        "height": "6",
        "content": "### Distribution of Object Sizes  \nUnderstanding the size distribution of planktonic objects helps identify dominant size classes and detect anomalies. A skewed distribution might indicate specific biological trends, such as a bloom of a particular species or a technical issue in the acquisition process.  \n\n*In the graph:*  \n- A **peak in smaller sizes** suggests dominance of tiny plankton.  \n- A **broad distribution** indicates a mix of various size classes.  \n- A **skewed or bimodal pattern** may reflect biological or technical factors (e.g., species-specific blooms or imaging biases).\n",
        "className": "",
        "x": 1020,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "694187e7d85faec3",
        "type": "ui-markdown",
        "z": "14f8c9b5ce1235cc",
        "g": "979647e2e34284fb",
        "group": "bdcb68c6cff2da73",
        "name": "elongation vs. area",
        "order": 4,
        "width": "3",
        "height": "6",
        "content": "### Relationship Between Elongation and Object Area  \nThis scatter plot helps assess whether larger objects tend to be more elongated or compact. Certain plankton species have characteristic shapes, and identifying correlations between elongation and area can aid in distinguishing different taxa or understanding morphological variability.  \n\n*In the graph:*  \n- **Top-right**: Large and highly elongated objects (e.g., filamentous plankton).  \n- **Bottom-right**: Small but highly elongated objects (e.g., thin needle-like forms). \n- **Top-left**: Large but compact objects (e.g., rounded or clustered plankton). \n- **Bottom-left**: Small and compact objects (e.g., spherical or short structures).",
        "className": "",
        "x": 970,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "693e1ad09770bdf5",
        "type": "ui-chart",
        "z": "14f8c9b5ce1235cc",
        "g": "979647e2e34284fb",
        "group": "bdcb68c6cff2da73",
        "name": "elongation vs. area",
        "label": "elongation vs. area",
        "order": 2,
        "chartType": "scatter",
        "category": "elongation vs. area",
        "categoryType": "str",
        "xAxisLabel": "elongation (ratio of major to minor axis)",
        "xAxisProperty": "payload.metadata.elongation",
        "xAxisPropertyType": "msg",
        "xAxisType": "linear",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "0",
        "xmax": "50",
        "yAxisLabel": "area (μm²)",
        "yAxisProperty": "payload.metadata.area",
        "yAxisPropertyType": "msg",
        "ymin": "300",
        "ymax": "1500",
        "bins": 10,
        "action": "append",
        "stackSeries": true,
        "pointShape": "circle",
        "pointRadius": "1",
        "showLegend": true,
        "removeOlder": "1",
        "removeOlderUnit": "3600",
        "removeOlderPoints": "300",
        "colors": [
            "#ff0088",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "3",
        "height": "6",
        "className": "",
        "interpolation": "linear",
        "x": 970,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "82a3257cd0a3815d",
        "type": "ui-markdown",
        "z": "14f8c9b5ce1235cc",
        "g": "979647e2e34284fb",
        "group": "fa6393a7d7e3b7d7",
        "name": "equivalent_diameter vs. MeanValue",
        "order": 3,
        "width": "3",
        "height": "6",
        "content": "### Variation of Mean Brightness with Equivalent Diameter  \nThis graph explores whether larger objects tend to be brighter or darker. This can reveal differences in pigmentation, transparency, or even imaging inconsistencies.  \n\n*In the graph:*   \n- **Top-right**: Large and bright objects.\n- **Top-left**: Small and bright objects.\n- **Bottom-right**: Large and dark objects.\n- **Bottom-left**: Small and dark objects.  ",
        "className": "",
        "x": 560,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "44ef242ece9b6b4b",
        "type": "ui-markdown",
        "z": "14f8c9b5ce1235cc",
        "g": "979647e2e34284fb",
        "group": "fa6393a7d7e3b7d7",
        "name": "MeanSaturation vs. MeanValue",
        "order": 4,
        "width": "3",
        "height": "6",
        "content": "### Relationship Between Mean Saturation and Mean Brightness\nThis visualization helps understand how color properties vary with brightness. Some plankton groups exhibit distinct coloration, and saturation could be a useful feature for classification. A strong trend might suggest systematic differences in pigmentation or optical properties across plankton groups.\n\n*In the graph:*  \n- **Top-right**: Bright and highly saturated objects (vivid colors).  \n- **Top-left**: Bright but low-saturation objects (pale or near-white).  \n- **Bottom-right**: Dark but highly saturated objects (deep, rich colors).  \n- **Bottom-left**: Dark and low-saturation objects (grayish or faintly colored).",
        "className": "",
        "x": 550,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "7433aae2400b7f78",
        "type": "ui-chart",
        "z": "14f8c9b5ce1235cc",
        "g": "979647e2e34284fb",
        "group": "fa6393a7d7e3b7d7",
        "name": "equivalent_diameter vs. MeanValue",
        "label": "equivalent_diameter vs. MeanValue",
        "order": 1,
        "chartType": "scatter",
        "category": "equivalent_diameter vs. MeanValue",
        "categoryType": "str",
        "xAxisLabel": "Equivalent Diameter (μm)",
        "xAxisProperty": "payload.metadata.equivalent_diameter",
        "xAxisPropertyType": "msg",
        "xAxisType": "linear",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "0",
        "xmax": "50",
        "yAxisLabel": "MeanValue (0–255, grayscale value)",
        "yAxisProperty": "payload.metadata.MeanValue",
        "yAxisPropertyType": "msg",
        "ymin": "150",
        "ymax": "255",
        "bins": 10,
        "action": "append",
        "stackSeries": true,
        "pointShape": "circle",
        "pointRadius": "1",
        "showLegend": true,
        "removeOlder": "1",
        "removeOlderUnit": "3600",
        "removeOlderPoints": "300",
        "colors": [
            "#8c00ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "3",
        "height": "6",
        "className": "",
        "interpolation": "linear",
        "x": 560,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "a90099cfe7a37a37",
        "type": "ui-chart",
        "z": "14f8c9b5ce1235cc",
        "g": "979647e2e34284fb",
        "group": "fa6393a7d7e3b7d7",
        "name": "MeanSaturation vs. MeanValue",
        "label": "MeanSaturation vs. MeanValue",
        "order": 2,
        "chartType": "scatter",
        "category": "MeanSaturation vs. MeanValue",
        "categoryType": "str",
        "xAxisLabel": "MeanSaturation (%)",
        "xAxisProperty": "payload.metadata.MeanSaturation",
        "xAxisPropertyType": "msg",
        "xAxisType": "linear",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "0",
        "xmax": "50",
        "yAxisLabel": "MeanValue (0–255, grayscale value)",
        "yAxisProperty": "payload.metadata.MeanValue",
        "yAxisPropertyType": "msg",
        "ymin": "150",
        "ymax": "255",
        "bins": 10,
        "action": "append",
        "stackSeries": true,
        "pointShape": "circle",
        "pointRadius": "1",
        "showLegend": true,
        "removeOlder": "1",
        "removeOlderUnit": "3600",
        "removeOlderPoints": "300",
        "colors": [
            "#ff9500",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "3",
        "height": "6",
        "className": "",
        "interpolation": "linear",
        "x": 550,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "df0dcb1175b8bd5f",
        "type": "ui-chart",
        "z": "14f8c9b5ce1235cc",
        "g": "979647e2e34284fb",
        "group": "ed357f41cdf951bc",
        "name": "x vs. y",
        "label": "x vs. y",
        "order": 1,
        "chartType": "scatter",
        "category": "x vs. y",
        "categoryType": "str",
        "xAxisLabel": "x",
        "xAxisProperty": "payload.metadata.x",
        "xAxisPropertyType": "msg",
        "xAxisType": "linear",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "0",
        "xmax": "50",
        "yAxisLabel": "y",
        "yAxisProperty": "payload.metadata.y",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": true,
        "pointShape": "circle",
        "pointRadius": "1",
        "showLegend": true,
        "removeOlder": "1",
        "removeOlderUnit": "3600",
        "removeOlderPoints": "300",
        "colors": [
            "#2b00ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "6",
        "height": "6",
        "className": "",
        "interpolation": "linear",
        "x": 930,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "bfcd2b12c9c89c15",
        "type": "debug",
        "z": "14f8c9b5ce1235cc",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 200,
        "wires": []
    },
    {
        "id": "c6c66ebc50dd5d90",
        "type": "switch",
        "z": "14f8c9b5ce1235cc",
        "g": "979647e2e34284fb",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Done",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 430,
        "y": 380,
        "wires": [
            [
                "bfcd2b12c9c89c15"
            ]
        ]
    },
    {
        "id": "f6c913298cba35ee",
        "type": "debug",
        "z": "14f8c9b5ce1235cc",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 180,
        "wires": []
    },
    {
        "id": "64c27d4448d8f79f",
        "type": "ui-event",
        "z": "2d14eef8a9f51595",
        "ui": "e6ae26617c24c3ea",
        "name": "UI Event",
        "x": 80,
        "y": 40,
        "wires": [
            [
                "b47026c6196ae54f"
            ]
        ]
    },
    {
        "id": "b47026c6196ae54f",
        "type": "switch",
        "z": "2d14eef8a9f51595",
        "name": "msg.topic === \"$pageview\"",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$pageview",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 40,
        "wires": [
            [
                "5676b794b1a00c6a"
            ]
        ]
    },
    {
        "id": "5676b794b1a00c6a",
        "type": "switch",
        "z": "2d14eef8a9f51595",
        "name": "msg.payload.page.path === \"/export\"",
        "property": "payload.page.path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/export",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 570,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "3cfcc4372e4a3fb2",
        "type": "ui-template",
        "z": "2d14eef8a9f51595",
        "group": "5d3c24612267b256",
        "page": "",
        "ui": "",
        "name": "Navigation Bottom",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "\n<template>\n  <v-container fluid class=\"ma-0 pa-0\">\n    <v-row align=\"center\" justify=\"space-between\" class=\"px-2\">\n      <!-- Back to Preview -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"segmentation\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          <v-icon start>mdi-chevron-left</v-icon>\n          Segmentation\n        </v-btn>\n      </v-col>\n\n    </v-row>\n  </v-container>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1290,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "32d0387ec0cb419f",
        "type": "ui-template",
        "z": "2d14eef8a9f51595",
        "group": "1c2cd2bf4d4ab815",
        "page": "",
        "ui": "",
        "name": "Navigation Top",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "\n<template>\n  <v-container fluid class=\"ma-0 pa-0\">\n    <v-row align=\"center\" justify=\"space-between\" class=\"px-2\">\n      <!-- Back to Preview -->\n      <v-col cols=\"auto\">\n        <v-btn\n          to=\"segmentation\"\n          color=\"primary\"\n          rounded=\"lg\"\n          class=\"px-4\" variant=\"text\" size=\"large\"\n        >\n          <v-icon start>mdi-chevron-left</v-icon>\n          Segmentation\n        </v-btn>\n      </v-col>\n\n    </v-row>\n  </v-container>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1300,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "6521e33d1a35408e",
        "type": "ui-template",
        "z": "2d14eef8a9f51595",
        "group": "d1c2dcd580716d02",
        "page": "",
        "ui": "",
        "name": "Viewer",
        "order": 1,
        "width": "12",
        "height": "16",
        "head": "",
        "format": "  <iframe \n    src=\"/ps/data/browse/files/export/ecotaxa\" \n    >\n  </iframe>\n  <style>\n    iframe {\n      width: 100%;\n      height: 100%;\n      margin: 0;\n      border:none;\n    }\n  </style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1330,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "64ae825a687fb054",
        "type": "ecotaxa",
        "z": "8555b76c53e789e0",
        "name": "Import to Ecotaxa Project",
        "api_url": "https://ecotaxa.obs-vlfr.fr/api/",
        "project_id": "9366",
        "x": 830,
        "y": 300,
        "wires": [
            [
                "c21f20a7a9902ee4"
            ]
        ]
    },
    {
        "id": "af1ec6323cc00231",
        "type": "inject",
        "z": "8555b76c53e789e0",
        "name": "Lancer import",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0",
        "topic": "",
        "x": 310,
        "y": 300,
        "wires": [
            [
                "28f8eb0318735246"
            ]
        ]
    },
    {
        "id": "c21f20a7a9902ee4",
        "type": "debug",
        "z": "8555b76c53e789e0",
        "name": "Show import result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 300,
        "wires": []
    },
    {
        "id": "28f8eb0318735246",
        "type": "function",
        "z": "8555b76c53e789e0",
        "name": "Set file_path",
        "func": "msg.payload = {}\nmsg.payload.file_path = \"/home/pi/data/export/ecotaxa/ecotaxa_A_2.zip\"\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 300,
        "wires": [
            [
                "64ae825a687fb054",
                "1457a0786f787415"
            ]
        ]
    },
    {
        "id": "1457a0786f787415",
        "type": "debug",
        "z": "8555b76c53e789e0",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 200,
        "wires": []
    },
    {
        "id": "8e11bb014b9664be",
        "type": "ui-template",
        "z": "8018bd5586fd4054",
        "group": "822cdc5b6ef13f39",
        "page": "",
        "ui": "",
        "name": "body",
        "order": 1,
        "width": "12",
        "height": "6",
        "head": "",
        "format": "<template>\n  <v-container>\n    <v-row>\n      <!-- Step 1: White Balance -->\n      <v-col cols=\"12\" md=\"3\">\n        <v-card\n          href=\"calibration_saturation_level\"\n          class=\"text-center py-2\"\n        >\n          <v-icon size=\"64\" color=\"primary\">mdi-eyedropper-variant</v-icon>\n          <v-card-title class=\"text-h6\">White Balance</v-card-title>\n          <v-card-text>\n            Use the color picker to measure the current color values and adjust the white balance accordingly.\n          </v-card-text>\n        </v-card>\n      </v-col>\n\n      <!-- Step 2: Lightness -->\n      <v-col cols=\"12\" md=\"3\">\n        <v-card\n          href=\"calibration_lightness\"\n          class=\"text-center py-2\"\n        >\n          <v-icon size=\"64\" color=\"primary\">mdi-brightness-6</v-icon>\n          <v-card-title class=\"text-h6\">Lightness</v-card-title>\n          <v-card-text>\n            Measure the current lightness value and update the LED intensity or ISO if below optimal levels.\n          </v-card-text>\n        </v-card>\n      </v-col>\n\n      <!-- Step 3: Pixel Size -->\n      <v-col cols=\"12\" md=\"3\">\n        <v-card\n          href=\"calibration_pixel_size\"\n          class=\"text-center py-2\"\n        >\n          <v-icon size=\"64\" color=\"primary\">mdi-ruler</v-icon>\n          <v-card-title class=\"text-h6\">Pixel Size</v-card-title>\n          <v-card-text>\n            Place markers on the micrometric ruler image to calculate the pixel size in microns per pixel.\n          </v-card-text>\n        </v-card>\n      </v-col>\n\n      <!-- Step 4: Pump Calibration -->\n      <v-col cols=\"12\" md=\"3\">\n        <v-card\n          href=\"calibration_pump\"\n          class=\"text-center py-2\"\n        >\n          <v-icon size=\"64\" color=\"primary\">mdi-water-pump</v-icon>\n          <v-card-title class=\"text-h6\">Pump Calibration</v-card-title>\n          <v-card-text>\n            Measure the transferred volume and adjust pump steps to improve accuracy in fluid handling.\n          </v-card-text>\n        </v-card>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 490,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "35d8e8e4b1e0ef7d",
        "type": "ui-template",
        "z": "8018bd5586fd4054",
        "group": "c29c835a70533b69",
        "page": "",
        "ui": "",
        "name": "header",
        "order": 1,
        "width": "12",
        "height": "6",
        "head": "",
        "format": "<template>\n  <v-empty-state\n    headline=\"Calibration steps\"\n    icon=\"$vuetify\"\n    title=\"Follow these steps to ensure optimal image quality and measurement accuracy\"\n  >\n  </v-empty-state>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 490,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "590ff706a46acf3a",
        "type": "ui-template",
        "z": "8018bd5586fd4054",
        "group": "518a4242f548c1f2",
        "page": "",
        "ui": "",
        "name": "links",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-row justify=\"center\" class=\"my-2\">\n      <v-chip\n        size=\"small\"\n        color=\"grey-darken-3\"\n        href=\"https://www.figma.com/design/KXH3qkalr7eeFbyGsutZKt/PlanktoScope-Dashboard-v2?node-id=6-2&m=dev&t=Nn2N1o9OJveQCSco-1\"\n        target=\"_blank\"\n        class=\"mx-2\"\n      >\n        <v-icon color=\"primary\" class=\"mr-1\">mdi-image</v-icon>Figma Design\n      </v-chip>\n      <v-chip\n        size=\"small\"\n        color=\"grey-darken-3\"\n        href=\"https://github.com/PlanktoScope/dashboard/issues/new?template=bug_report.md\"\n        target=\"_blank\"\n        class=\"mx-2\"\n      >\n        <v-icon color=\"red\" class=\"mr-1\">mdi-bug</v-icon>Report a Bug\n      </v-chip>\n      <v-chip\n        size=\"small\"\n        color=\"grey-darken-3\"\n        href=\"https://github.com/PlanktoScope/dashboard/issues\"\n        target=\"_blank\"\n        class=\"mx-2\"\n      >\n        <v-icon color=\"orange\" class=\"mr-1\">mdi-information-outline</v-icon>Open\n        issues\n      </v-chip>\n      <v-chip\n        size=\"small\"\n        color=\"grey-darken-3\"\n        href=\"https://github.com/PlanktoScope/dashboard\"\n        target=\"_blank\"\n        class=\"mx-2\"\n      >\n        <v-icon color=\"black\" class=\"mr-1\">mdi-github</v-icon>View on GitHub\n      </v-chip>\n    </v-row>\n</template>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 490,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "062a3af5e12e8445",
        "type": "ui-template",
        "z": "6426e7bea6900426",
        "g": "f591255fbfc6c466",
        "group": "af8acdfe9afbad74",
        "page": "",
        "ui": "",
        "name": "Step Bar",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div>\n    <v-stepper class=\"my-stepper\" model-value=\"1\" non-linear>\n      <v-stepper-header>\n        <v-stepper-item value=\"1\" editable @click=\"stepClicked(1)\" class=\"selected-step\" color=\"primary\">Saturation Level</v-stepper-item>\n        <v-divider></v-divider>\n        <v-stepper-item value=\"2\" editable @click=\"stepClicked(2)\" color=\"grey\">Lightness</v-stepper-item>\n        <v-divider></v-divider>\n        <v-stepper-item value=\"3\" editable @click=\"stepClicked(3)\" color=\"grey\">Pixel size</v-stepper-item>\n        <v-divider></v-divider>\n        <v-stepper-item value=\"4\" editable @click=\"stepClicked(4)\" color=\"grey\">Pump</v-stepper-item>\n      </v-stepper-header>\n    </v-stepper>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'StepperComponent',\n    methods: {\n      stepClicked(step) {\n        const stepMapping = {\n          1: { page: 'Calibration - Saturation Level' },\n          2: { page: 'Calibration - Lightness' },\n          3: { page: 'Calibration - Pixel size' },\n          4: { page: 'Calibration - Pump' }\n        };\n\n        const msgPayload = stepMapping[step] || {};\n        \n        this.send({ payload: msgPayload });\n      }\n    }\n  }\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1080,
        "y": 60,
        "wires": [
            [
                "e5da27b9abdcb156"
            ]
        ]
    },
    {
        "id": "e5da27b9abdcb156",
        "type": "ui-control",
        "z": "6426e7bea6900426",
        "g": "f591255fbfc6c466",
        "name": "",
        "ui": "e6ae26617c24c3ea",
        "events": "all",
        "x": 1280,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "5350c095034ba5c6",
        "type": "ui-event",
        "z": "6426e7bea6900426",
        "ui": "e6ae26617c24c3ea",
        "name": "UI Event",
        "x": 80,
        "y": 40,
        "wires": [
            [
                "a0df077ddbb184e3"
            ]
        ]
    },
    {
        "id": "a0df077ddbb184e3",
        "type": "switch",
        "z": "6426e7bea6900426",
        "name": "msg.topic === \"$pageview\"",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$pageview",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 40,
        "wires": [
            [
                "874fd69a5398300e"
            ]
        ]
    },
    {
        "id": "874fd69a5398300e",
        "type": "switch",
        "z": "6426e7bea6900426",
        "name": "msg.payload.page.path === \"/calibration_saturation_level\"",
        "property": "payload.page.path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/calibration_saturation_level",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 640,
        "y": 40,
        "wires": [
            [
                "65a5f93fc6decaac"
            ]
        ]
    },
    {
        "id": "65a5f93fc6decaac",
        "type": "function",
        "z": "6426e7bea6900426",
        "name": "Get Global Variables",
        "func": "const keys = global.keys(); // Get all global variable keys\nmsg.payload = {}; // Initialize the payload object\n\nkeys.forEach(key => {\n    // Ignore keys that start with \"$\"\n    if (!key.startsWith('$')) {\n        msg.payload[key] = global.get(key);\n    }\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 140,
        "wires": [
            [
                "94a287dea58faa4d",
                "b8b60ce8a0cf6764"
            ]
        ]
    },
    {
        "id": "94a287dea58faa4d",
        "type": "ui-template",
        "z": "6426e7bea6900426",
        "group": "af8acdfe9afbad74",
        "page": "",
        "ui": "",
        "name": "Calibration - WB",
        "order": 2,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<template>\n  <v-container class=\"pa-4 d-flex flex-wrap justify-center align-start\" style=\"gap:32px;\">\n    <!-- PREVIEW -->\n    <v-card class=\" calibration-container\" style=\"width:1000px;height:750px;position:relative;overflow:hidden\">\n      <iframe src=\"/preview\" class=\"calibration-iframe\"></iframe>\n    </v-card>\n\n    \n    <!-- Control Panel -->\n    <v-card width=\"440\" class=\"px-4\">\n      <v-card-title class=\"text-left text-primary\">\n        White Balance Calibration\n      </v-card-title>\n\n\n\n\n\n      <v-divider class=\"mb-4\"></v-divider>\n\n\n    <!-- Step 1: Refresh -->\n    <section class=\"mb-6\">\n      <h3 class=\"text-subtitle-1 mb-2\">1. Refresh</h3>\n      <p class=\"text-caption mb-3\">\n        Click <b>Refresh the value of the gains</b> to start.\n      </p>\n      <v-btn block color=\"error\" class=\"mb-4\" @click=\"refreshGain\">\n        Refresh\n      </v-btn>\n    </section>\n\n      <v-divider class=\"mb-4\"></v-divider>\n    <!-- Step 2: Pick a pixel -->\n    <section class=\"mb-6\">\n      <h3 class=\"text-subtitle-1 mb-2\">2. Pick a Pixel</h3>\n      <p class=\"text-caption mb-3\">\n        Pick a pixel from the live stream.\n      </p>\n      <div class=\"text-center mb-3\">\n        Pick a pixel from the stream :\n        <input\n          class=\"colorpicker\"\n          type=\"color\"\n          v-model=\"selectedColor\"\n          @input=\"onColorInput\"\n        />\n      </div>\n    </section>\n\n      <v-divider class=\"mb-4\"></v-divider>\n    <!-- Step 3: Apply Suggested Gains -->\n    <section class=\"mb-6\">\n      <h3 class=\"text-subtitle-1 mb-2\">3. Apply Suggested Gains</h3>\n       <v-data-table\n        :items=\"rows\"\n        density=\"comfortable\"\n        hide-default-footer\n        class=\"gain-table mb-6\"\n      >\n\n        <template #item.current=\"{ item }\">\n          <div class=\"text-center font-mono\">{{ item.current }}</div>\n        </template>\n\n        <template #item.suggested=\"{ item }\">\n          <v-text-field\n            v-model.number=\"item.suggested\"\n            type=\"number\"\n            min=\"0\"\n            hide-details\n            density=\"compact\"\n            variant=\"underlined\"\n            class=\"text-primary text-center suggested-input\"\n            @change=\"onManualEdit(item.channel,item.suggested)\"\n          ></v-text-field>\n        </template>\n      </v-data-table>\n      <p class=\"text-caption mb-3\">\n        Click <b>Apply Suggested Gains</b> after selecting your pixel.\n      </p>\n      <v-btn\n        block\n        color=\"primary\"\n        class=\"mt-auto\"\n        :disabled=\"!suggested.red && !suggested.blue\"\n        @click=\"applySuggested\"\n      >\n        Apply Suggested Gains\n      </v-btn>\n    </section>\n\n      <v-divider class=\"mb-4\"></v-divider>\n    <!-- Step 4: Repeat & Monitor Progress -->\n    <section>\n      <h3 class=\"text-subtitle-1 mb-2\">4. Repeat Until Saturation ≈ 0%</h3>\n      <p class=\"text-caption\">\n        Repeat steps 10 times until the saturation value approaches <b>0%</b>.\n        \n      </p>\n\n      <!-- Saturation indicator -->\n      <div class=\"mb-2\"\n        :style=\"{ color: hsl.s < 10 ? 'green' : hsl.s < 30 ? 'orange' : 'red' }\"\n      >\n        Current saturation: <b>{{ hsl.s }} %</b>\n      </div>\n      <!-- Progress feedback -->\n      <div class=\"mb-4 text-center text-caption\">\n        <v-progress-linear\n          :model-value=\"(loopCount / totalLoops) * 100\"\n          color=\"primary\"\n          height=\"40\"\n          class=\"rounded mb-1\"\n        />\n        <div>\n          <template v-if=\"loopCount === 0\">\n            Start calibration — click <b>Refresh</b>.\n          </template>\n          <template v-else-if=\"loopCount < totalLoops\">\n            Iteration {{ loopCount }} / {{ totalLoops }} — sample & apply.\n          </template>\n          <template v-else>\n            ✅ Calibration complete! Saturation should be near <b>0%</b>.\n          </template>\n        </div>\n      </div>\n\n    </section>\n\n    </v-card>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  props: [\"msg\"],\n  data() {\n    return {\n      current: { red: 150, blue: 130 },\n      suggested: { red: null, blue: null },\n      selectedColor: \"#ffffff\",\n      hsl: { h: 0, s: 0, l: 0 },\n      loopCount: 0,\n      totalLoops: 10,\n      headers: [\n        { text: \"Channel\", value: \"channel\", align: \"start\" },\n        { text: \"Current\", value: \"current\", align: \"center\" },\n        { text: \"Suggested\", value: \"suggested\", align: \"center\" },\n      ],\n    };\n  },\n  computed: {\n    rows() {\n      return [\n        { channel: \"AWRed\", current: this.current.red, suggested: this.suggested.red },\n        { channel: \"AWBlue\", current: this.current.blue, suggested: this.suggested.blue },\n      ];\n    },\n  },\n  watch: {\n    msg: {\n      handler(n) {\n        const p = n?.payload || {};\n        if (p.calibration_wbg_red !== undefined)\n          this.current.red = Number(p.calibration_wbg_red);\n        if (p.calibration_wbg_blue !== undefined)\n          this.current.blue = Number(p.calibration_wbg_blue);\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    refreshGain() {\n      this.loopCount = 0;\n      this.current = { red: 100, blue: 100 };\n      this.suggested = { red: null, blue: null };\n      this.sendUpdate(\"imager/image\", {\n        action: \"settings\",\n        settings: { white_balance_gain: this.current },\n      });\n    },\n    sendUpdate(topic, extra = {}) {\n      if (typeof this.send === \"function\") this.send({ topic, payload: { ...extra } });\n    },\n    onColorInput(e) {\n      const hex = e.target.value;\n      this.selectedColor = hex;\n      this.hsl = this.hexToHsl(hex);\n      const { r, g, b } = this.hexToRgb(hex);\n      const redAdj = g - r + this.current.red;\n      const blueAdj = g - b + this.current.blue;\n      this.suggested.red = Math.max(0, Math.min(255, Math.round(redAdj)));\n      this.suggested.blue = Math.max(0, Math.min(255, Math.round(blueAdj)));\n    },\n    onManualEdit(ch, v) {\n      if (ch === \"AWRed\") this.suggested.red = v;\n      if (ch === \"AWBlue\") this.suggested.blue = v;\n    },\n    applySuggested() {\n      if (!this.suggested.red && !this.suggested.blue) return;\n      const p = {\n        action: \"settings\",\n        settings: {\n          white_balance_gain: {\n            red: parseInt(this.suggested.red, 10),\n            blue: parseInt(this.suggested.blue, 10),\n          },\n        },\n      };\n      this.sendUpdate(\"imager/image\", p);\n      this.current = { ...this.suggested };\n      if (this.loopCount < this.totalLoops) this.loopCount++;\n    },\n    hexToRgb(h) {\n      return {\n        r: parseInt(h.substr(1, 2), 16),\n        g: parseInt(h.substr(3, 2), 16),\n        b: parseInt(h.substr(5, 2), 16),\n      };\n    },\n    hexToHsl(hex) {\n      const { r, g, b } = this.hexToRgb(hex);\n      const rn = r / 255, gn = g / 255, bn = b / 255;\n      const max = Math.max(rn, gn, bn), min = Math.min(rn, gn, bn);\n      const l = (max + min) / 2;\n      let h = 0, s = 0;\n      if (max !== min) {\n        const d = max - min;\n        s = d / (1 - Math.abs(2 * l - 1));\n        switch (max) {\n          case rn: h = ((gn - bn) / d) % 6; break;\n          case gn: h = (bn - rn) / d + 2; break;\n          case bn: h = (rn - gn) / d + 4; break;\n        }\n        h *= 60;\n      }\n      return { h: Math.round(h), s: Math.round(s * 100), l: Math.round(l * 100) };\n    },\n  },\n};\n</script>\n\n<style scoped>\n.calibration-iframe { position: absolute; top: 0; left: 0; width: 1000px; height: 750px; border: none; pointer-events: none; }\n.gain-table { border-radius: 8px; background: #fafafa; border: 1px solid #cfd8dc; }\n.table-header-title { background: #e3f2fd; font-weight: 600; font-size: 15px; }\n.suggested-input { max-width: 80px; margin: auto; }\n.colorpicker { height: 28px; width: 60px; margin-left: 8px; border: 1px solid #999; border-radius: 4px; cursor: pointer; vertical-align: middle; }\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 400,
        "y": 140,
        "wires": [
            [
                "615edad94a4f77e7"
            ]
        ]
    },
    {
        "id": "9c40c3932475ea84",
        "type": "debug",
        "z": "6426e7bea6900426",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 260,
        "wires": []
    },
    {
        "id": "e52cb70984e0d25d",
        "type": "mqtt out",
        "z": "6426e7bea6900426",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "8dc3722c.06efa8",
        "x": 850,
        "y": 100,
        "wires": []
    },
    {
        "id": "d8f732f8fe251222",
        "type": "function",
        "z": "6426e7bea6900426",
        "name": "set pump settings",
        "func": "if (msg.topic) {\n    global.set(\"calibration_wbg_red\", msg.payload.settings.white_balance_gain.red);\n    global.set(\"calibration_wbg_blue\", msg.payload.settings.white_balance_gain.blue);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "b8b60ce8a0cf6764",
        "type": "debug",
        "z": "6426e7bea6900426",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 220,
        "wires": []
    },
    {
        "id": "615edad94a4f77e7",
        "type": "switch",
        "z": "6426e7bea6900426",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "imager/image",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 180,
        "wires": [
            [
                "d8f732f8fe251222",
                "e52cb70984e0d25d",
                "9c40c3932475ea84"
            ]
        ]
    },
    {
        "id": "5fbdba7e61973f9a",
        "type": "ui-template",
        "z": "14c685bd04db8be5",
        "g": "426f6cef77fbb290",
        "group": "728c7ed3d63dfcee",
        "page": "",
        "ui": "",
        "name": "Step Bar",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div>\n    <v-stepper class=\"my-stepper\" model-value=\"2\" non-linear>\n      <v-stepper-header>\n        <v-stepper-item value=\"1\" editable @click=\"stepClicked(1)\" color=\"grey\">Saturation Level</v-stepper-item>\n        <v-divider></v-divider>\n        <v-stepper-item value=\"2\" editable @click=\"stepClicked(2)\" class=\"selected-step\" color=\"primary\">Lightness</v-stepper-item>\n        <v-divider></v-divider>\n        <v-stepper-item value=\"3\" editable @click=\"stepClicked(3)\" color=\"grey\">Pixel size</v-stepper-item>\n        <v-divider></v-divider>\n        <v-stepper-item value=\"4\" editable @click=\"stepClicked(4)\" color=\"grey\">Pump</v-stepper-item>\n      </v-stepper-header>\n    </v-stepper>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'StepperComponent',\n    methods: {\n      stepClicked(step) {\n        const stepMapping = {\n          1: { page: 'Calibration - Saturation Level' },\n          2: { page: 'Calibration - Lightness' },\n          3: { page: 'Calibration - Pixel size' },\n          4: { page: 'Calibration - Pump' }\n        };\n\n        const msgPayload = stepMapping[step] || {};\n        \n        this.send({ payload: msgPayload });\n      }\n    }\n  }\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1080,
        "y": 60,
        "wires": [
            [
                "25cb0163587aee15"
            ]
        ]
    },
    {
        "id": "25cb0163587aee15",
        "type": "ui-control",
        "z": "14c685bd04db8be5",
        "g": "426f6cef77fbb290",
        "name": "",
        "ui": "e6ae26617c24c3ea",
        "events": "all",
        "x": 1280,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "547bbdea834e849c",
        "type": "ui-event",
        "z": "14c685bd04db8be5",
        "ui": "e6ae26617c24c3ea",
        "name": "UI Event",
        "x": 80,
        "y": 40,
        "wires": [
            [
                "068b250f8668e3ea"
            ]
        ]
    },
    {
        "id": "068b250f8668e3ea",
        "type": "switch",
        "z": "14c685bd04db8be5",
        "name": "msg.topic === \"$pageview\"",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$pageview",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 40,
        "wires": [
            [
                "72dd2876e74c3ef2"
            ]
        ]
    },
    {
        "id": "72dd2876e74c3ef2",
        "type": "switch",
        "z": "14c685bd04db8be5",
        "name": "msg.payload.page.path === \"/calibration_lightness\"",
        "property": "payload.page.path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/calibration_lightness",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 620,
        "y": 40,
        "wires": [
            [
                "7245cda05ff489a3"
            ]
        ]
    },
    {
        "id": "7245cda05ff489a3",
        "type": "function",
        "z": "14c685bd04db8be5",
        "name": "Get Global Variables",
        "func": "const keys = global.keys(); // Get all global variable keys\nmsg.payload = {}; // Initialize the payload object\n\nkeys.forEach(key => {\n    // Ignore keys that start with \"$\"\n    if (!key.startsWith('$')) {\n        msg.payload[key] = global.get(key);\n    }\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 140,
        "wires": [
            [
                "740188ac42d17f44",
                "d41870c7f587821b"
            ]
        ]
    },
    {
        "id": "740188ac42d17f44",
        "type": "ui-template",
        "z": "14c685bd04db8be5",
        "group": "728c7ed3d63dfcee",
        "page": "",
        "ui": "",
        "name": "Calibration - Lightness",
        "order": 2,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<template>\n  <v-container\n    class=\"pa-4 d-flex flex-wrap justify-center align-start\"\n    style=\"gap:32px;\"\n  >\n    <!-- PREVIEW -->\n    <v-card\n      class=\"calibration-container\"\n      style=\"width:1000px;height:750px;position:relative;overflow:hidden\"\n    >\n      <iframe ref=\"previewFrame\" src=\"/preview\" class=\"calibration-iframe\"></iframe>\n\n\n\n    </v-card>\n\n    <!-- Control Panel -->\n    <v-card width=\"440\" class=\"px-4\">\n      <v-card-title class=\"text-left text-primary\">\n        Lightness Calibration\n      </v-card-title>\n\n      <!-- Calibration steps section -->\n      \n      <v-card-text class=\"mb-2 bg-surface-light pt-4\">\n        <div class=\"mb-1 text-subtitle-2 text-primary\"><b>Calibration steps</b></div>\n        <ol class=\"pl-4 text-caption text-grey-darken-2\">\n          <li>Step 1</li>\n          <li>Step 2</li>\n          <li>Step 3</li>\n          <li>Step 4</li>\n        </ol>\n      </v-card-text>\n\n      <v-divider class=\"mb-4\"></v-divider>\n\n    </v-card>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      led: 50,\n      axis: \"X\",\n      ctx: null,\n      interval: null,\n    };\n  },\n  mounted() {\n    this.ctx = this.$refs.histCanvas.getContext(\"2d\");\n    // Rafraîchit l’histogramme toutes les 500 ms\n    this.interval = setInterval(this.updateHistogram, 500);\n  },\n  beforeUnmount() {\n    clearInterval(this.interval);\n  },\n  methods: {\n    sendSettings() {\n      this.sendUpdate(\"imager/image\", {\n        action: \"settings\",\n        settings: {\n          led_intensity: this.led,\n        },\n      });\n    },\n    sendUpdate(topic, payload) {\n      console.log(\"Sending update:\", topic, payload);\n      // Ici tu enverras ta requête (WebSocket, fetch, etc.)\n    },\n\n    async updateHistogram() {\n      try {\n        // Récupère une frame du flux (JPEG ou PNG)\n        const response = await fetch(\"/preview/snapshot\"); // endpoint à adapter\n        const blob = await response.blob();\n        const bitmap = await createImageBitmap(blob);\n\n        const offscreen = new OffscreenCanvas(bitmap.width, bitmap.height);\n        const ctxOff = offscreen.getContext(\"2d\");\n        ctxOff.drawImage(bitmap, 0, 0);\n\n        const { data, width, height } = ctxOff.getImageData(0, 0, bitmap.width, bitmap.height);\n\n        const histogram = this.axis === \"X\"\n          ? this.computeXHistogram(data, width, height)\n          : this.computeYHistogram(data, width, height);\n\n        this.drawHistogram(histogram);\n      } catch (err) {\n        console.warn(\"Histogram update failed:\", err);\n      }\n    },\n\n    computeXHistogram(data, width, height) {\n      const hist = new Array(width).fill(0);\n      for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n          const idx = (y * width + x) * 4;\n          const v = (data[idx] + data[idx + 1] + data[idx + 2]) / 3;\n          hist[x] += v;\n        }\n      }\n      return hist.map((v) => v / height);\n    },\n\n    computeYHistogram(data, width, height) {\n      const hist = new Array(height).fill(0);\n      for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n          const idx = (y * width + x) * 4;\n          const v = (data[idx] + data[idx + 1] + data[idx + 2]) / 3;\n          hist[y] += v;\n        }\n      }\n      return hist.map((v) => v / width);\n    },\n\n    drawHistogram(hist) {\n      const ctx = this.ctx;\n      const w = ctx.canvas.width;\n      const h = ctx.canvas.height;\n      ctx.clearRect(0, 0, w, h);\n      ctx.beginPath();\n      ctx.moveTo(0, h - hist[0] * h / 255);\n      for (let i = 1; i < hist.length; i++) {\n        const x = (i / hist.length) * w;\n        const y = h - (hist[i] * h) / 255;\n        ctx.lineTo(x, y);\n      }\n      ctx.strokeStyle = \"#00bcd4\";\n      ctx.lineWidth = 2;\n      ctx.stroke();\n    },\n  },\n};\n</script>\n\n<style scoped>\n.calibration-iframe {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 1000px;\n  height: 750px;\n  border: none;\n  pointer-events: none;\n}\n.histogram-overlay {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 1000px;\n  height: 150px;\n  background: rgba(0, 0, 0, 0.4);\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 420,
        "y": 140,
        "wires": [
            [
                "959de9b1292e047d"
            ]
        ]
    },
    {
        "id": "21af2e731c368d3e",
        "type": "debug",
        "z": "14c685bd04db8be5",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 260,
        "wires": []
    },
    {
        "id": "785c59c553d71326",
        "type": "mqtt out",
        "z": "14c685bd04db8be5",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "8dc3722c.06efa8",
        "x": 850,
        "y": 100,
        "wires": []
    },
    {
        "id": "0283e992ff5da0f6",
        "type": "function",
        "z": "14c685bd04db8be5",
        "name": "set pump settings",
        "func": "if (msg.topic) {\n    global.set(\"calibration_wbg_red\", msg.payload.settings.white_balance_gain.red);\n    global.set(\"calibration_wbg_blue\", msg.payload.settings.white_balance_gain.blue);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d41870c7f587821b",
        "type": "debug",
        "z": "14c685bd04db8be5",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 220,
        "wires": []
    },
    {
        "id": "959de9b1292e047d",
        "type": "switch",
        "z": "14c685bd04db8be5",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "imager/image",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 180,
        "wires": [
            [
                "0283e992ff5da0f6",
                "21af2e731c368d3e"
            ]
        ]
    },
    {
        "id": "05a5a9c4530d07ea",
        "type": "ui-template",
        "z": "3afb1d2b21be9114",
        "g": "da1cb3ed0c90bb56",
        "group": "c966455a52d121c0",
        "page": "",
        "ui": "",
        "name": "Step Bar",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div>\n    <v-stepper class=\"my-stepper\" model-value=\"3\" non-linear>\n      <v-stepper-header>\n        <v-stepper-item value=\"1\" editable @click=\"stepClicked(1)\" color=\"grey\">Saturation Level</v-stepper-item>\n        <v-divider></v-divider>\n        <v-stepper-item value=\"2\" editable @click=\"stepClicked(2)\" color=\"grey\">Lightness</v-stepper-item>\n        <v-divider></v-divider>\n        <v-stepper-item value=\"3\" editable @click=\"stepClicked(3)\" class=\"selected-step\" color=\"primary\">Pixel size</v-stepper-item>\n        <v-divider></v-divider>\n        <v-stepper-item value=\"4\" editable @click=\"stepClicked(4)\" color=\"grey\">Pump</v-stepper-item>\n      </v-stepper-header>\n    </v-stepper>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'StepperComponent',\n    methods: {\n      stepClicked(step) {\n        const stepMapping = {\n          1: { page: 'Calibration - Saturation Level' },\n          2: { page: 'Calibration - Lightness' },\n          3: { page: 'Calibration - Pixel size' },\n          4: { page: 'Calibration - Pump' }\n        };\n\n        const msgPayload = stepMapping[step] || {};\n        \n        this.send({ payload: msgPayload });\n      }\n    }\n  }\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1080,
        "y": 60,
        "wires": [
            [
                "419cccaf23eb2548"
            ]
        ]
    },
    {
        "id": "419cccaf23eb2548",
        "type": "ui-control",
        "z": "3afb1d2b21be9114",
        "g": "da1cb3ed0c90bb56",
        "name": "",
        "ui": "e6ae26617c24c3ea",
        "events": "all",
        "x": 1280,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "2352be52ae097a08",
        "type": "ui-template",
        "z": "3afb1d2b21be9114",
        "group": "c966455a52d121c0",
        "page": "",
        "ui": "",
        "name": "Calibration - Pixel Size",
        "order": 2,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<template>\n  <v-container class=\"pa-4 d-flex flex-wrap justify-center align-start\" style=\"gap: 32px;\">\n    <!-- Streaming Preview -->\n    <v-card\n      class=\"calibration-container\"\n      style=\"width:1000px;height:750px;position:relative;overflow:hidden\"\n      @pointermove=\"onPointerMove\"\n      @pointerup=\"stopDrag\"\n      @pointercancel=\"stopDrag\"\n      @pointerleave=\"stopDrag\"\n    >\n      <iframe src=\"/preview\" class=\"calibration-iframe\"></iframe>\n\n      <svg class=\"overlay-line\">\n        <line\n          :x1=\"markerA.x\"\n          :y1=\"markerA.y\"\n          :x2=\"markerB.x\"\n          :y2=\"markerB.y\"\n          stroke=\"red\"\n          stroke-width=\"2\"\n        />\n      </svg>\n\n      <!-- draggable markers -->\n      <div\n        class=\"marker\"\n        :style=\"{ left: markerA.x + 'px', top: markerA.y + 'px' }\"\n        @pointerdown=\"startDrag('A', $event)\"\n      ></div>\n      <div\n        class=\"marker\"\n        :style=\"{ left: markerB.x + 'px', top: markerB.y + 'px' }\"\n        @pointerdown=\"startDrag('B', $event)\"\n      ></div>\n\n      <!-- floating label -->\n      <div\n        class=\"distance-label\"\n        :style=\"{ left: midPoint.x + 'px', top: midPoint.y - 10 + 'px' }\"\n      >\n        {{ displayLabel }}\n      </div>\n    </v-card>\n\n    <!-- Control Panel -->\n    <v-card width=\"440\" class=\"px-4\">\n      <v-card-title class=\"text-left text-primary\">\n        Pixel Calibration\n      </v-card-title>\n\n      <v-divider class=\"mb-4\"></v-divider>\n\n      <section class=\"mb-6\">\n        <h3 class=\"text-subtitle-1 mb-2\">1. Place a ruler</h3>\n        <p class=\"text-caption mb-3\">\n          Place a ruler 📏 beneath your <b>PlanktoScope</b> and reset the marker.\n        </p>\n        <v-btn color=\"error\" block class=\"mt-3\" @click=\"reset\">\n          Reset the positions of the markers\n        </v-btn>\n      </section>\n\n      <v-divider class=\"mb-4\"></v-divider>\n      <section class=\"mb-2\">\n        <h3 class=\"text-subtitle-1 mb-2\">2. Define the positions</h3>\n        <p class=\"text-caption mb-3\">\n          Drag the red line ends to match a known distance on the ruler.\n        </p>\n\n        <v-text-field\n          v-model=\"pixelDistanceDisplay\"\n          label=\"Measured distance (px)\"\n          variant=\"outlined\"\n          density=\"comfortable\"\n          readonly\n          :style=\"{ pointerEvents: 'none', userSelect: 'none', opacity: 0.7 }\"\n        ></v-text-field>\n      </section>\n\n      <v-divider class=\"mb-4\"></v-divider>\n      <section class=\"mb-2\">\n        <h3 class=\"text-subtitle-1 mb-2\">3. Enter known distance</h3>\n        <p class=\"text-caption mb-3\">\n          Enter the known distance in micrometers (µm).\n        </p>\n        <v-text-field\n          v-model.number=\"knownDistance\"\n          label=\"Known distance (µm)\"\n          type=\"number\"\n          variant=\"outlined\"\n          density=\"comfortable\"\n          class=\"highlight\"\n          @input=\"sendUpdate('calibration/update')\"\n        ></v-text-field>\n      </section>\n\n      <v-divider class=\"mb-4\"></v-divider>\n      <!-- Step 4 with dialog -->\n      <section class=\"mb-6\">\n        <h3 class=\"text-subtitle-1 mb-2\">4. Save your calibration</h3>\n        <p class=\"text-caption mb-3\">\n          Click Save to store your calibration.\n        </p>\n\n        <v-row dense align=\"center\">\n <v-col cols=\"12\">\n  <v-text-field\n    v-model=\"pixelSizeDisplay\"\n    label=\"Real pixel size (µm/pixel)\"\n    readonly\n    variant=\"outlined\"\n    density=\"comfortable\"\n    class=\"highlight\"\n  >\n    <!-- Icône append avec dialogue -->\n    <template #append>\n      <v-icon\n        class=\"cursor-pointer\"\n        color=\"primary\"\n        @click=\"showFormula = true\"\n      >\n        mdi-information\n      </v-icon>\n    </template>\n  </v-text-field>\n\n  <!-- Dialogue explicatif -->\n  <v-dialog v-model=\"showFormula\" max-width=\"500\">\n    <v-card>\n      <v-card-title class=\"text-h6\">Pixel Size Calculation</v-card-title>\n      <v-card-text class=\"text-body-2\">\n        <div><strong>Formula:</strong></div>\n        <div>pixel_size = known_distance / (measured_distance × scale_factor)</div>\n\n        <div class=\"mt-2\">\n          = {{ knownDistance || '—' }} /\n          ({{ pixelDistanceDisplay || '—' }} ×\n          {{ scaleFactor ? scaleFactor.toFixed(3) : '—' }}) =\n          <strong>{{ pixelSizeDisplay || '—' }} µm/pixel</strong>\n        </div>\n\n        <v-divider class=\"my-3\"></v-divider>\n\n        <div class=\"text-caption text-grey-darken-1\">\n          <strong>Note:</strong></div>\n          <div>scale_factor = sensor_width / stream_width\n          <br />\n          = {{ sensorWidth || '—' }} / {{ streamWidth || '—' }}\n          = {{ scaleFactor ? scaleFactor.toFixed(3) : '—' }}\n        </div>\n      </v-card-text>\n\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"primary\" text @click=\"showFormula = false\">Close</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</v-col>\n\n        </v-row>\n\n        <v-btn\n          color=\"primary\"\n          block\n          class=\"mt-2\"\n          :disabled=\"!pixelSize\"\n          @click=\"saveCalibration\"\n        >\n          Save calibration\n        </v-btn>\n      </section>\n\n    </v-card>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  props: [\"msg\"],\n  data() {\n    return {\n      markerA: { x: 250, y: 375 },\n      markerB: { x: 750, y: 375 },\n      dragging: null,\n      knownDistance: null,\n      pixelDistance: 0,\n      sensorWidth: 4056,\n      streamWidth: 1000,\n      scaleFactor: 4056 / 1000,\n      pixelSize: null,\n      scaleManual: false,\n      showFormula: false, // 🔹 Nouveau : état du dialog\n    };\n  },\n  computed: {\n    midPoint() {\n      return {\n        x: (this.markerA.x + this.markerB.x) / 2,\n        y: (this.markerA.y + this.markerB.y) / 2,\n      };\n    },\n    pixelDistanceDisplay() {\n      return this.pixelDistance > 0 ? this.pixelDistance.toFixed(0) : \"\";\n    },\n    pixelSizeDisplay() {\n      return this.pixelSize ? this.pixelSize.toFixed(2) : \"\";\n    },\n    displayLabel() {\n      if (this.pixelSize)\n        return `${this.pixelSize.toFixed(2)} µm/px`;\n      return `${this.pixelDistance.toFixed(0)} px`;\n    },\n  },\n  watch: {\n    msg: {\n      handler(newMsg) {\n        const p = newMsg?.payload || {};\n        if (p.calibration_pixel_size !== undefined) this.pixelSize = Number(p.calibration_pixel_size);\n        if (p.calibration_scale_factor !== undefined) this.scaleFactor = Number(p.calibration_scale_factor);\n        if (p.calibration_sensor_width !== undefined) this.sensorWidth = Number(p.calibration_sensor_width);\n        if (p.calibration_stream_width !== undefined) this.streamWidth = Number(p.calibration_stream_width);\n        if (p.calibration_known_distance !== undefined) this.knownDistance = Number(p.calibration_known_distance);\n        if (p.calibration_measured_distance !== undefined) this.pixelDistance = Number(p.calibration_measured_distance);\n        if (p.calibration_markerA_x !== undefined && p.calibration_markerA_y !== undefined)\n          this.markerA = { x: Number(p.calibration_markerA_x), y: Number(p.calibration_markerA_y) };\n        if (p.calibration_markerB_x !== undefined && p.calibration_markerB_y !== undefined)\n          this.markerB = { x: Number(p.calibration_markerB_x), y: Number(p.calibration_markerB_y) };\n      },\n      deep: true,\n    },\n    knownDistance() { this.autoCalculate(); },\n    scaleFactor() { this.autoCalculate(); },\n  },\n  mounted() {\n    this.updateScaleFactor();\n    this.updateDistance();\n  },\n  methods: {\n    sendUpdate(topic, extra = {}) {\n      if (typeof this.send === \"function\") {\n        this.send({\n          topic,\n          payload: {\n            calibration_pixel_size: this.round(this.pixelSize, 2),\n            calibration_scale_factor: this.round(this.scaleFactor, 3),\n            calibration_sensor_width: Math.round(this.sensorWidth),\n            calibration_stream_width: Math.round(this.streamWidth),\n            calibration_known_distance: this.round(this.knownDistance, 2),\n            calibration_measured_distance: Math.round(this.pixelDistance),\n            calibration_markerA_x: this.round(this.markerA.x, 1),\n            calibration_markerA_y: this.round(this.markerA.y, 1),\n            calibration_markerB_x: this.round(this.markerB.x, 1),\n            calibration_markerB_y: this.round(this.markerB.y, 1),\n            ...extra,\n          },\n        });\n      }\n    },\n    round(value, digits = 2) {\n      if (typeof value !== \"number\" || isNaN(value)) return 0;\n      const factor = 10 ** digits;\n      return Math.round(value * factor) / factor;\n    },\n    startDrag(marker, e) {\n      e.preventDefault();\n      this.dragging = marker;\n      e.target.setPointerCapture(e.pointerId);\n    },\n    onPointerMove(e) {\n      if (!this.dragging) return;\n      const container = this.$el.querySelector(\".calibration-container\");\n      const rect = container.getBoundingClientRect();\n      const x = Math.max(0, Math.min(e.clientX - rect.left, rect.width));\n      const y = Math.max(0, Math.min(e.clientY - rect.top, rect.height));\n      this[`marker${this.dragging}`] = { x, y };\n      this.updateDistance();\n      this.sendUpdate(\"calibration/live\");\n    },\n    stopDrag() {\n      this.dragging = null;\n    },\n    updateDistance() {\n      const dx = this.markerB.x - this.markerA.x;\n      const dy = this.markerB.y - this.markerA.y;\n      this.pixelDistance = Math.sqrt(dx * dx + dy * dy);\n      this.autoCalculate();\n    },\n    updateScaleFactor() {\n      if (!this.scaleManual && this.sensorWidth > 0 && this.streamWidth > 0) {\n        this.scaleFactor = this.sensorWidth / this.streamWidth;\n        this.autoCalculate();\n      }\n    },\n    manualScaleFactor() {\n      this.scaleManual = true;\n      this.autoCalculate();\n    },\n    autoCalculate() {\n      const { knownDistance, pixelDistance, scaleFactor } = this;\n      if (knownDistance > 0 && pixelDistance > 0 && scaleFactor > 0) {\n        const realDist = pixelDistance * scaleFactor;\n        this.pixelSize = knownDistance / realDist;\n      } else {\n        this.pixelSize = null;\n      }\n    },\n    reset() {\n      this.markerA = { x: 250, y: 375 };\n      this.markerB = { x: 750, y: 375 };\n      this.knownDistance = null;\n      this.pixelDistance = 0;\n      this.pixelSize = null;\n      this.dragging = null;\n      this.scaleManual = false;\n      this.updateScaleFactor();\n      this.updateDistance();\n      this.sendUpdate(\"calibration/reset\");\n    },\n    saveCalibration() {\n      if (this.pixelSize > 0) this.sendUpdate(\"calibration/save\");\n    },\n  },\n};\n</script>\n\n<style scoped>\n.calibration-iframe {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 1000px;\n  height: 750px;\n  border: none;\n  pointer-events: none;\n}\n.overlay-line {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n.marker {\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  transform: translate(-50%, -50%);\n  cursor: crosshair;\n  touch-action: none;\n}\n.marker::before,\n.marker::after {\n  content: \"\";\n  position: absolute;\n  background: red;\n}\n.marker::before {\n  width: 2px;\n  height: 24px;\n  left: 50%;\n  top: 0;\n  transform: translateX(-50%);\n}\n.marker::after {\n  width: 24px;\n  height: 2px;\n  top: 50%;\n  left: 0;\n  transform: translateY(-50%);\n}\n.distance-label {\n  position: absolute;\n  color: white;\n  font-size: 16px;\n  background: rgba(0, 0, 0, 0.7);\n  padding: 4px 10px;\n  border-radius: 6px;\n  pointer-events: none;\n  transform: translate(-50%, -50%);\n}\n.highlight input {\n  background-color: #e3f2fd !important;\n  font-weight: 600;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 420,
        "y": 140,
        "wires": [
            [
                "a30cdd39d7c3b802"
            ]
        ]
    },
    {
        "id": "d10ef113c9a4b297",
        "type": "ui-event",
        "z": "3afb1d2b21be9114",
        "ui": "e6ae26617c24c3ea",
        "name": "UI Event",
        "x": 80,
        "y": 40,
        "wires": [
            [
                "78cf0ca00b9e1214"
            ]
        ]
    },
    {
        "id": "78cf0ca00b9e1214",
        "type": "switch",
        "z": "3afb1d2b21be9114",
        "name": "msg.topic === \"$pageview\"",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$pageview",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 40,
        "wires": [
            [
                "943c62c18d43f2a6"
            ]
        ]
    },
    {
        "id": "943c62c18d43f2a6",
        "type": "switch",
        "z": "3afb1d2b21be9114",
        "name": "msg.payload.page.path === \"/calibration_pixel_size\"",
        "property": "payload.page.path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/calibration_pixel_size",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 620,
        "y": 40,
        "wires": [
            [
                "0deb8e29532f1503"
            ]
        ]
    },
    {
        "id": "0deb8e29532f1503",
        "type": "function",
        "z": "3afb1d2b21be9114",
        "name": "Get Global Variables",
        "func": "const keys = global.keys(); // Get all global variable keys\nmsg.payload = {}; // Initialize the payload object\n\nkeys.forEach(key => {\n    // Ignore keys that start with \"$\"\n    if (!key.startsWith('$')) {\n        msg.payload[key] = global.get(key);\n    }\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 140,
        "wires": [
            [
                "2352be52ae097a08"
            ]
        ]
    },
    {
        "id": "a30cdd39d7c3b802",
        "type": "switch",
        "z": "3afb1d2b21be9114",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "calibration/save",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 140,
        "wires": [
            [
                "13cda406d9feacec"
            ]
        ]
    },
    {
        "id": "13cda406d9feacec",
        "type": "function",
        "z": "3afb1d2b21be9114",
        "name": "set calibration_pixel_size",
        "func": "if (msg.topic) {\n    global.set(\"process_pixel\", msg.payload.calibration_pixel_size);\n    global.set(\"calibration_pixel_size\", msg.payload.calibration_pixel_size);\n    global.set(\"calibration_scale_factor\", msg.payload.calibration_scale_factor);\n    global.set(\"calibration_sensor_width\", msg.payload.calibration_sensor_width);\n    global.set(\"calibration_stream_width\", msg.payload.calibration_stream_width);\n    global.set(\"calibration_known_distance\", msg.payload.calibration_known_distance);\n    global.set(\"calibration_measured_distance\", msg.payload.calibration_measured_distance);\n    global.set(\"calibration_markerA_x\", msg.payload.calibration_markerA_x);\n    global.set(\"calibration_markerA_y\", msg.payload.calibration_markerA_y);\n    global.set(\"calibration_markerB_x\", msg.payload.calibration_markerB_x);\n    global.set(\"calibration_markerB_y\", msg.payload.calibration_markerB_y);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c92cd7e25b01278d",
        "type": "ui-template",
        "z": "d5b2c64b84f8ed4f",
        "g": "0861054b07c3373d",
        "group": "6039d653304537af",
        "page": "",
        "ui": "",
        "name": "Step Bar",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div>\n    <v-stepper class=\"my-stepper\" model-value=\"4\" non-linear>\n      <v-stepper-header>\n        <v-stepper-item value=\"1\" editable @click=\"stepClicked(1)\" color=\"grey\">Saturation Level</v-stepper-item>\n        <v-divider></v-divider>\n        <v-stepper-item value=\"2\" editable @click=\"stepClicked(2)\" color=\"grey\">Lightness</v-stepper-item>\n        <v-divider></v-divider>\n        <v-stepper-item value=\"3\" editable @click=\"stepClicked(3)\" color=\"grey\">Pixel size</v-stepper-item>\n        <v-divider></v-divider>\n        <v-stepper-item value=\"4\" editable @click=\"stepClicked(4)\" class=\"selected-step\" color=\"primary\">Pump</v-stepper-item>\n      </v-stepper-header>\n    </v-stepper>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'StepperComponent',\n    methods: {\n      stepClicked(step) {\n        const stepMapping = {\n          1: { page: 'Calibration - Saturation Level' },\n          2: { page: 'Calibration - Lightness' },\n          3: { page: 'Calibration - Pixel size' },\n          4: { page: 'Calibration - Pump' }\n        };\n\n        const msgPayload = stepMapping[step] || {};\n        \n        this.send({ payload: msgPayload });\n      }\n    }\n  }\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1080,
        "y": 60,
        "wires": [
            [
                "f8db1578262f6bc8"
            ]
        ]
    },
    {
        "id": "f8db1578262f6bc8",
        "type": "ui-control",
        "z": "d5b2c64b84f8ed4f",
        "g": "0861054b07c3373d",
        "name": "",
        "ui": "e6ae26617c24c3ea",
        "events": "all",
        "x": 1280,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b69414b64961f4e9",
        "type": "ui-event",
        "z": "d5b2c64b84f8ed4f",
        "ui": "e6ae26617c24c3ea",
        "name": "UI Event",
        "x": 80,
        "y": 40,
        "wires": [
            [
                "2e99999b7cf152b7"
            ]
        ]
    },
    {
        "id": "2e99999b7cf152b7",
        "type": "switch",
        "z": "d5b2c64b84f8ed4f",
        "name": "msg.topic === \"$pageview\"",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$pageview",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 40,
        "wires": [
            [
                "138136e6a1917e49"
            ]
        ]
    },
    {
        "id": "138136e6a1917e49",
        "type": "switch",
        "z": "d5b2c64b84f8ed4f",
        "name": "msg.payload.page.path === \"/calibration_pump\"",
        "property": "payload.page.path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/calibration_pump",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "0a0c441d1757b9d2",
        "type": "function",
        "z": "d5b2c64b84f8ed4f",
        "name": "Get Global Variables",
        "func": "const keys = global.keys(); // Get all global variable keys\nmsg.payload = {}; // Initialize the payload object\n\nkeys.forEach(key => {\n    // Ignore keys that start with \"$\"\n    if (!key.startsWith('$')) {\n        msg.payload[key] = global.get(key);\n    }\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 140,
        "wires": [
            [
                "1bd39bfcfab012fe"
            ]
        ]
    },
    {
        "id": "1bd39bfcfab012fe",
        "type": "ui-template",
        "z": "d5b2c64b84f8ed4f",
        "group": "6039d653304537af",
        "page": "",
        "ui": "",
        "name": "Calibration - Pump",
        "order": 2,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<template>\n  <v-container class=\"py-6 d-flex flex-column align-center\" style=\"gap: 24px;\">\n    <v-card width=\"440\" class=\"px-4\">\n      <v-card-title class=\"text-left text-primary\">Pump Calibration</v-card-title>\n      <v-divider class=\"mb-4\"></v-divider>\n\n      <!-- Step 1 -->\n      <section class=\"mb-6\">\n        <h3 class=\"text-subtitle-1 mb-2\">1. Place a scale</h3>\n        <p class=\"text-caption mb-3\">Place a scale ⚖️ beneath the waste container.</p>\n      </section>\n\n      <v-divider class=\"mb-4\"></v-divider>\n      <!-- Step 2 -->\n      <section class=\"mb-6\">\n        <h3 class=\"text-subtitle-1 mb-2\">2. Run a liquid transfer</h3>\n        <p class=\"text-caption mb-3\">Run a liquid transfer to collect a known volume.</p>\n\n        <v-row dense align=\"center\">\n          <v-col cols=\"12\">\n            <v-text-field\n              v-model.number=\"targetVolume\"\n              label=\"Target Volume (mL)\"\n              type=\"number\"\n              variant=\"outlined\"\n              density=\"comfortable\"\n              min=\"0\"\n            />\n          </v-col>\n\n          <v-col cols=\"6\">\n            <v-btn\n              color=\"error\"\n              block\n              @click=\"stopPump\"\n              :disabled=\"!pumpRunning\"\n            >\n              ⏹ Stop Pump\n            </v-btn>\n          </v-col>\n\n          <v-col cols=\"6\">\n            <v-btn\n              color=\"primary\"\n              block\n              @click=\"runTransferTest\"\n              :loading=\"pumpRunning\"\n              :disabled=\"pumpRunning\"\n            >\n              Run Test\n            </v-btn>\n          </v-col>\n        </v-row>\n      </section>\n\n      <v-divider class=\"mb-4\"></v-divider>\n      <!-- Step 3 -->\n      <section class=\"mb-0\">\n        <h3 class=\"text-subtitle-1 mb-2\">3. Measure the weight</h3>\n        <p class=\"text-caption mb-3\">\n          Enter the measured weight in milliliters (mL).\n        </p>\n\n        <v-row dense align=\"center\">\n          <v-col cols=\"7\">\n            <v-text-field\n              v-model.number=\"measuredVolume\"\n              label=\"Measured Volume (mL)\"\n              type=\"number\"\n              variant=\"outlined\"\n              density=\"comfortable\"\n              min=\"0\"\n              :disabled=\"!pumpDone\"\n            />\n          </v-col>\n\n          <v-col cols=\"5\" class=\"mb-6\">\n            <v-alert\n              v-if=\"pumpDone\"\n              color=\"error\"\n              variant=\"tonal\"\n              class=\"pa-3 text-caption text-primary-darken-3\"\n            >\n              <strong>Delta:</strong> {{ errorVolume.toFixed(2) }} mL\n            </v-alert>\n          </v-col>\n        </v-row>\n      </section>\n\n      <v-divider class=\"mb-4\"></v-divider>\n      <!-- Step 4 -->\n      <section class=\"mb-0\">\n        <h3 class=\"text-subtitle-1 mb-2\">4. Save your calibration.</h3>\n        <p class=\"text-caption mb-3\">\n          Click <b>Save</b> to store your calibration.\n        </p>\n\n        <div class=\"mb-3\">\n          <v-text-field\n            v-model.number=\"currentSteps\"\n            label=\"Current steps per 1 mL (S)\"\n            type=\"number\"\n            variant=\"outlined\"\n            density=\"comfortable\"\n            min=\"1\"\n            :disabled=\"!pumpDone\"\n\n          readonly\n          :style=\"{ pointerEvents: 'none', userSelect: 'none', opacity: 0.7 }\"\n          />\n        </div>\n\n        <div class=\"mb-3 d-flex align-center\">\n\n          <v-text-field\n            v-model.number=\"suggestedSteps\"\n            label=\"Suggested steps per 1 mL (S)\"\n            type=\"number\"\n            variant=\"outlined\"\n            density=\"comfortable\"\n            min=\"1\"\n            :disabled=\"!pumpDone\"\n    class=\"highlight\"\n\n  >\n    <!-- Icône append avec dialogue -->\n    <template #append>\n      <v-icon\n        class=\"cursor-pointer\"\n        color=\"primary\"\n        @click=\"dialog = true\"\n      >\n        mdi-information\n      </v-icon>\n    </template>\n          </v-text-field>\n        </div>\n      </section>\n\n      <section class=\"mb-6\">\n          <v-btn\n            color=\"primary\"\n            block\n            @click=\"validateCalibration\"\n            :disabled=\"!pumpDone\"\n          >\n            Validate\n          </v-btn>\n\n        <!-- Dialog with formula -->\n        <v-dialog v-model=\"dialog\" max-width=\"480\">\n          <v-card>\n            <v-card-title class=\"text-h6 text-primary\">Formula</v-card-title>\n            <v-card-text class=\"text-body-2\">\n              <p><strong>Suggested steps per 1 mL = (Volume to transfer (Y) / Transferred volume (X)) × Current steps (S)</strong></p>\n              <p>\n                (Y / X) × S = ({{ targetVolume }} / {{ measuredVolume }}) × {{ currentSteps }} = \n                <b>{{ suggestedSteps.toFixed(0) }}</b> steps\n              </p>\n            </v-card-text>\n            <v-card-actions>\n              <v-spacer></v-spacer>\n              <v-btn text color=\"primary\" @click=\"dialog = false\">Close</v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-dialog>\n      </section>\n    </v-card>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  props: [\"msg\"],\n  data() {\n    return {\n      targetVolume: 10, // Y\n      measuredVolume: 0, // X\n      currentSteps: 507, // S\n      pumpRunning: false,\n      pumpDone: false,\n      dialog: false,\n    };\n  },\n  computed: {\n    errorVolume() {\n      return this.targetVolume - this.measuredVolume;\n    },\n    suggestedSteps() {\n      const { targetVolume, measuredVolume, currentSteps } = this;\n      if (measuredVolume <= 0) return currentSteps;\n      return Math.round((targetVolume / measuredVolume) * currentSteps);\n    },\n  },\n  watch: {\n    msg: {\n      handler(newMsg) {\n        const topic = newMsg?.topic;\n        const payload = newMsg?.payload || {};\n        if (topic === \"status/pump\" && payload.status === \"Done\") {\n          this.pumpRunning = false;\n          this.pumpDone = true;\n        }\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    sendUpdate(topic, extra = {}) {\n      if (typeof this.send === \"function\") {\n        this.send({ topic, payload: { ...extra } });\n      }\n    },\n    runTransferTest() {\n      this.pumpDone = false;\n      this.pumpRunning = true;\n      this.sendUpdate(\"actuator/pump\", {\n        action: \"move\",\n        direction: \"FORWARD\",\n        volume: this.targetVolume,\n        flowrate: 1,\n      });\n    },\n    stopPump() {\n      this.sendUpdate(\"actuator/pump\", { action: \"stop\" });\n      this.pumpRunning = false;\n    },\n    validateCalibration() {\n      const steps = Math.round(this.suggestedSteps);\n      this.sendUpdate(\"calibration/save\", {\n        calibration_nb_step: steps,\n      });\n    },\n  },\n};\n</script>\n<style>\n\n.highlight input {\n  background-color: #e3f2fd !important;\n  font-weight: 600;\n}\n</style>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 410,
        "y": 140,
        "wires": [
            [
                "b4d023d76ef0504c",
                "c35c707fc4606403"
            ]
        ]
    },
    {
        "id": "f2348c422d051cc9",
        "type": "mqtt out",
        "z": "d5b2c64b84f8ed4f",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "8dc3722c.06efa8",
        "x": 850,
        "y": 100,
        "wires": []
    },
    {
        "id": "b4d023d76ef0504c",
        "type": "switch",
        "z": "d5b2c64b84f8ed4f",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "actuator/pump",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "calibration/save",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 140,
        "wires": [
            [
                "f2348c422d051cc9"
            ],
            [
                "486bc5c0891a3a15"
            ]
        ]
    },
    {
        "id": "b49a9221938d1621",
        "type": "mqtt in",
        "z": "d5b2c64b84f8ed4f",
        "name": "",
        "topic": "status/pump",
        "qos": "0",
        "datatype": "json",
        "broker": "8dc3722c.06efa8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 90,
        "y": 340,
        "wires": [
            [
                "1bd39bfcfab012fe",
                "568563f0ea454a6e"
            ]
        ]
    },
    {
        "id": "568563f0ea454a6e",
        "type": "debug",
        "z": "d5b2c64b84f8ed4f",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 340,
        "wires": []
    },
    {
        "id": "c35c707fc4606403",
        "type": "debug",
        "z": "d5b2c64b84f8ed4f",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 200,
        "wires": []
    },
    {
        "id": "486bc5c0891a3a15",
        "type": "function",
        "z": "d5b2c64b84f8ed4f",
        "name": "set calibration_pump",
        "func": "if (msg.topic) {\n    global.set(\"calibration_nb_step\", msg.payload.calibration_nb_step);\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "7ccb5c8c66ad170a",
        "type": "inject",
        "z": "a02961610bc3982a",
        "g": "153af3e4645145a8",
        "name": "inject",
        "props": [
            {
                "p": "payload.timezone",
                "v": "Europe/Paris",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 280,
        "wires": [
            [
                "89c198d4d49eca98"
            ]
        ]
    },
    {
        "id": "7bf0f35f3f491657",
        "type": "set timezone",
        "z": "a02961610bc3982a",
        "g": "153af3e4645145a8",
        "name": "",
        "x": 340,
        "y": 380,
        "wires": [
            [
                "2fe0de4d0d304630"
            ]
        ]
    },
    {
        "id": "89c198d4d49eca98",
        "type": "list timezones",
        "z": "a02961610bc3982a",
        "g": "153af3e4645145a8",
        "name": "",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "7bf0f35f3f491657"
            ]
        ]
    },
    {
        "id": "2fe0de4d0d304630",
        "type": "get timezone",
        "z": "a02961610bc3982a",
        "g": "153af3e4645145a8",
        "name": "",
        "x": 540,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "abc662f31074fc22",
        "type": "inject",
        "z": "a02961610bc3982a",
        "g": "3bb20cd87e85a6b8",
        "name": "inject",
        "props": [
            {
                "p": "payload.country",
                "v": "FR",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "d082d59bfaddcd80"
            ]
        ]
    },
    {
        "id": "d082d59bfaddcd80",
        "type": "list countries",
        "z": "a02961610bc3982a",
        "g": "3bb20cd87e85a6b8",
        "name": "",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "9f5061a034f606a3"
            ]
        ]
    },
    {
        "id": "9f5061a034f606a3",
        "type": "set country",
        "z": "a02961610bc3982a",
        "g": "3bb20cd87e85a6b8",
        "name": "",
        "x": 330,
        "y": 160,
        "wires": [
            [
                "1f6f854383bffbc8"
            ]
        ]
    },
    {
        "id": "1f6f854383bffbc8",
        "type": "get country",
        "z": "a02961610bc3982a",
        "g": "3bb20cd87e85a6b8",
        "name": "",
        "x": 510,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "1433d7bb97c2b52e",
        "type": "inject",
        "z": "a02961610bc3982a",
        "g": "3fe3efd04fb1a41a",
        "name": "inject",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 700,
        "wires": [
            [
                "58b352badddb48f5"
            ]
        ]
    },
    {
        "id": "58b352badddb48f5",
        "type": "get hostname",
        "z": "a02961610bc3982a",
        "g": "3fe3efd04fb1a41a",
        "name": "",
        "x": 140,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "39cd9534b43ef484",
        "type": "get name",
        "z": "a02961610bc3982a",
        "g": "9c49d230dea06fdf",
        "name": "",
        "x": 130,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "79d35d7ad73f89f9",
        "type": "inject",
        "z": "a02961610bc3982a",
        "g": "9c49d230dea06fdf",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 860,
        "wires": [
            [
                "39cd9534b43ef484"
            ]
        ]
    },
    {
        "id": "959839bc2c390088",
        "type": "storage info",
        "z": "a02961610bc3982a",
        "g": "27e22d982f0bcb2f",
        "name": "",
        "x": 550,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "0d10e66bb2b9d1cc",
        "type": "inject",
        "z": "a02961610bc3982a",
        "g": "27e22d982f0bcb2f",
        "name": "inject",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 530,
        "y": 860,
        "wires": [
            [
                "959839bc2c390088"
            ]
        ]
    },
    {
        "id": "29b3163c363f83d7",
        "type": "list hardware versions",
        "z": "a02961610bc3982a",
        "g": "cef91df1f697848e",
        "name": "",
        "x": 170,
        "y": 560,
        "wires": [
            [
                "28f8ab1b6c179786"
            ]
        ]
    },
    {
        "id": "19da48e7c9119862",
        "type": "get hardware version",
        "z": "a02961610bc3982a",
        "g": "cef91df1f697848e",
        "name": "",
        "x": 660,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "28f8ab1b6c179786",
        "type": "set hardware version",
        "z": "a02961610bc3982a",
        "g": "cef91df1f697848e",
        "name": "",
        "x": 420,
        "y": 580,
        "wires": [
            [
                "19da48e7c9119862"
            ]
        ]
    },
    {
        "id": "4966524cdc764174",
        "type": "inject",
        "z": "a02961610bc3982a",
        "g": "cef91df1f697848e",
        "name": "inject",
        "props": [
            {
                "p": "payload.hardware_version",
                "v": "v3.0",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "29b3163c363f83d7"
            ]
        ]
    },
    {
        "id": "0e1835e8b7c470ee",
        "type": "comment",
        "z": "a02961610bc3982a",
        "g": "3bb20cd87e85a6b8",
        "name": "country",
        "info": "",
        "x": 690,
        "y": 60,
        "wires": []
    },
    {
        "id": "bcdab829fb50bc57",
        "type": "comment",
        "z": "a02961610bc3982a",
        "g": "153af3e4645145a8",
        "name": "timezone",
        "info": "",
        "x": 740,
        "y": 280,
        "wires": []
    },
    {
        "id": "f640495d00bb68b9",
        "type": "comment",
        "z": "a02961610bc3982a",
        "g": "cef91df1f697848e",
        "name": "hardware version",
        "info": "",
        "x": 840,
        "y": 500,
        "wires": []
    },
    {
        "id": "1f1c86a14bf3ac61",
        "type": "comment",
        "z": "a02961610bc3982a",
        "g": "3fe3efd04fb1a41a",
        "name": "hostname",
        "info": "",
        "x": 480,
        "y": 700,
        "wires": []
    },
    {
        "id": "7e293f564d4fbfc4",
        "type": "comment",
        "z": "a02961610bc3982a",
        "g": "9c49d230dea06fdf",
        "name": "name",
        "info": "",
        "x": 290,
        "y": 860,
        "wires": []
    },
    {
        "id": "53516cda8e4f5a3c",
        "type": "comment",
        "z": "a02961610bc3982a",
        "g": "27e22d982f0bcb2f",
        "name": "storage",
        "info": "",
        "x": 730,
        "y": 860,
        "wires": []
    },
    {
        "id": "c34bff0e83b45e68",
        "type": "poweroff",
        "z": "a02961610bc3982a",
        "g": "fc6b573a63d6dfaa",
        "name": "",
        "x": 1180,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "dc07c747a235da10",
        "type": "reboot",
        "z": "a02961610bc3982a",
        "g": "fc6b573a63d6dfaa",
        "name": "",
        "x": 1180,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "f12fd63508bb1b63",
        "type": "inject",
        "z": "a02961610bc3982a",
        "g": "fc6b573a63d6dfaa",
        "name": "inject",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1030,
        "y": 140,
        "wires": [
            [
                "c34bff0e83b45e68"
            ]
        ]
    },
    {
        "id": "2babe27c1bf9d6ef",
        "type": "inject",
        "z": "a02961610bc3982a",
        "g": "fc6b573a63d6dfaa",
        "name": "inject",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1030,
        "y": 200,
        "wires": [
            [
                "dc07c747a235da10"
            ]
        ]
    },
    {
        "id": "15f16463c05bb479",
        "type": "comment",
        "z": "a02961610bc3982a",
        "g": "fc6b573a63d6dfaa",
        "name": "system ⚠️",
        "info": "",
        "x": 1200,
        "y": 80,
        "wires": []
    },
    {
        "id": "94a433cec8b54203",
        "type": "wake up",
        "z": "a02961610bc3982a",
        "g": "fc6b573a63d6dfaa",
        "name": "",
        "minutes": "2",
        "x": 1180,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "b552ca516cc07737",
        "type": "inject",
        "z": "a02961610bc3982a",
        "g": "fc6b573a63d6dfaa",
        "name": "inject",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1030,
        "y": 260,
        "wires": [
            [
                "94a433cec8b54203"
            ]
        ]
    },
    {
        "id": "61ebceb724041fb2",
        "type": "list acquisitions",
        "z": "a02961610bc3982a",
        "g": "dc792afbab434446",
        "name": "",
        "x": 1120,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "50128147f802f133",
        "type": "inject",
        "z": "a02961610bc3982a",
        "g": "dc792afbab434446",
        "name": "inject",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1090,
        "y": 380,
        "wires": [
            [
                "61ebceb724041fb2"
            ]
        ]
    },
    {
        "id": "b9c2e0abaad12bd9",
        "type": "comment",
        "z": "a02961610bc3982a",
        "g": "dc792afbab434446",
        "name": "acquisitions",
        "info": "",
        "x": 1290,
        "y": 380,
        "wires": []
    },
    {
        "id": "300343e6b56f088e",
        "type": "inject",
        "z": "a02961610bc3982a",
        "g": "dc307bb5d26c60f4",
        "name": "inject",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1090,
        "y": 560,
        "wires": [
            [
                "7d1f9414be49d7c3"
            ]
        ]
    },
    {
        "id": "da645aa8ebbed646",
        "type": "comment",
        "z": "a02961610bc3982a",
        "g": "dc307bb5d26c60f4",
        "name": "segmentations",
        "info": "",
        "x": 1300,
        "y": 560,
        "wires": []
    },
    {
        "id": "7d1f9414be49d7c3",
        "type": "list segmentations",
        "z": "a02961610bc3982a",
        "g": "dc307bb5d26c60f4",
        "name": "",
        "x": 1130,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "f7c18ab2aa687120",
        "type": "get machine info",
        "z": "a02961610bc3982a",
        "g": "855d9ef468b5db0f",
        "name": "",
        "x": 150,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "ede7a86fd97b5e1b",
        "type": "inject",
        "z": "a02961610bc3982a",
        "g": "855d9ef468b5db0f",
        "name": "inject",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1020,
        "wires": [
            [
                "f7c18ab2aa687120"
            ]
        ]
    },
    {
        "id": "af8ce4702c170449",
        "type": "comment",
        "z": "a02961610bc3982a",
        "g": "855d9ef468b5db0f",
        "name": "machine info",
        "info": "",
        "x": 330,
        "y": 1020,
        "wires": []
    },
    {
        "id": "7451ef4165b79c87",
        "type": "exec",
        "z": "807baf16b84dfb29",
        "command": "sudo",
        "addpay": "payload",
        "append": "now",
        "useSpawn": "false",
        "timer": "2",
        "winHide": false,
        "oldrc": false,
        "name": "sudo cmd now",
        "x": 480,
        "y": 580,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "425b04bad228f33e",
        "type": "exec",
        "z": "807baf16b84dfb29",
        "command": "sudo systemctl restart planktoscope-org.controller.service",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Restart hardware controller",
        "x": 780,
        "y": 660,
        "wires": [
            [
                "fd74a406ecf48578"
            ],
            [],
            []
        ]
    },
    {
        "id": "3dac096ae08896f0",
        "type": "exec",
        "z": "807baf16b84dfb29",
        "command": "sudo systemctl restart planktoscope-org.segmenter.service",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Restart segmenter",
        "x": 750,
        "y": 800,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "fd74a406ecf48578",
        "type": "exec",
        "z": "807baf16b84dfb29",
        "command": "sudo systemctl restart nodered.service",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Restart Node Red",
        "x": 1050,
        "y": 660,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "53d72b9f4f4cb00f",
        "type": "ui-button",
        "z": "807baf16b84dfb29",
        "group": "070185f2b69cf66d",
        "name": "Reboot",
        "label": "Reboot",
        "order": 1,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "reboot",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 200,
        "y": 560,
        "wires": [
            [
                "7451ef4165b79c87"
            ]
        ]
    },
    {
        "id": "f040d18d96b705c3",
        "type": "ui-button",
        "z": "807baf16b84dfb29",
        "group": "070185f2b69cf66d",
        "name": "Shutdown",
        "label": "Shutdown",
        "order": 4,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "shutdown",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 210,
        "y": 600,
        "wires": [
            [
                "7451ef4165b79c87"
            ]
        ]
    },
    {
        "id": "bab342f965d345f2",
        "type": "ui-button",
        "z": "807baf16b84dfb29",
        "group": "070185f2b69cf66d",
        "name": "Restart Hardware controller",
        "label": "Restart Hardware controller",
        "order": 3,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 260,
        "y": 640,
        "wires": [
            [
                "425b04bad228f33e"
            ]
        ]
    },
    {
        "id": "1f2fde836eabbb26",
        "type": "ui-button",
        "z": "807baf16b84dfb29",
        "group": "070185f2b69cf66d",
        "name": "Restart Segmenter",
        "label": "Restart Segmenter",
        "order": 2,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 230,
        "y": 680,
        "wires": [
            [
                "3dac096ae08896f0"
            ]
        ]
    },
    {
        "id": "5f45f5ce424a2d43",
        "type": "ui-event",
        "z": "807baf16b84dfb29",
        "ui": "e6ae26617c24c3ea",
        "name": "UI Event",
        "x": 80,
        "y": 40,
        "wires": [
            [
                "fc0520ca0e28fea9"
            ]
        ]
    },
    {
        "id": "fc0520ca0e28fea9",
        "type": "switch",
        "z": "807baf16b84dfb29",
        "name": "msg.topic === \"$pageview\"",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$pageview",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 40,
        "wires": [
            [
                "32fd5e03278f12c0"
            ]
        ]
    },
    {
        "id": "32fd5e03278f12c0",
        "type": "switch",
        "z": "807baf16b84dfb29",
        "name": "msg.payload.page.path === \"/settings\"",
        "property": "payload.page.path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/settings",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 580,
        "y": 40,
        "wires": [
            [
                "1a7bb2d868fe8707"
            ]
        ]
    },
    {
        "id": "1a7bb2d868fe8707",
        "type": "function",
        "z": "807baf16b84dfb29",
        "name": "Get min_esd",
        "func": "msg.payload = global.get(\"min_esd\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 140,
        "wires": [
            [
                "b757ea59f07dc1f9"
            ]
        ]
    },
    {
        "id": "b757ea59f07dc1f9",
        "type": "ui-text-input",
        "z": "807baf16b84dfb29",
        "group": "070185f2b69cf66d",
        "name": "",
        "label": "min_esd",
        "order": 1,
        "width": 0,
        "height": 0,
        "topic": "min_esd",
        "topicType": "str",
        "mode": "number",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 500,
        "y": 140,
        "wires": [
            [
                "aa0070c82f8fe4b6"
            ]
        ]
    },
    {
        "id": "aa0070c82f8fe4b6",
        "type": "function",
        "z": "807baf16b84dfb29",
        "name": "set calibration_sensor_height",
        "func": "global.set(\"min_esd\", Number(msg.payload));\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "e6a8ee249bf33950",
        "type": "ui-event",
        "z": "1b99100829ae7f41",
        "ui": "e6ae26617c24c3ea",
        "name": "UI Event",
        "x": 80,
        "y": 40,
        "wires": [
            [
                "f3b093b749e56ace"
            ]
        ]
    },
    {
        "id": "f3b093b749e56ace",
        "type": "switch",
        "z": "1b99100829ae7f41",
        "name": "msg.topic === \"$pageview\"",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "$pageview",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 40,
        "wires": [
            [
                "dfcec9d1920037d5"
            ]
        ]
    },
    {
        "id": "dfcec9d1920037d5",
        "type": "switch",
        "z": "1b99100829ae7f41",
        "name": "msg.payload.page.path === \"/hardware\"",
        "property": "payload.page.path",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/hardware",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 580,
        "y": 40,
        "wires": [
            [
                "921eb70f1795b70e",
                "a41da1c9f8661415",
                "629dbc1e59dceaea"
            ]
        ]
    },
    {
        "id": "921eb70f1795b70e",
        "type": "function",
        "z": "1b99100829ae7f41",
        "name": "Get calibration_sensor_height",
        "func": "msg.payload = global.get(\"calibration_sensor_height\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 140,
        "wires": [
            [
                "74597418566e278f"
            ]
        ]
    },
    {
        "id": "74597418566e278f",
        "type": "ui-text-input",
        "z": "1b99100829ae7f41",
        "group": "9d212165f2367f01",
        "name": "",
        "label": "calibration_sensor_height",
        "order": 1,
        "width": 0,
        "height": 0,
        "topic": "calibration_sensor_height",
        "topicType": "str",
        "mode": "number",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 550,
        "y": 140,
        "wires": [
            [
                "40cb70ede83af087"
            ]
        ]
    },
    {
        "id": "40cb70ede83af087",
        "type": "function",
        "z": "1b99100829ae7f41",
        "name": "set calibration_sensor_height",
        "func": "global.set(\"calibration_sensor_height\", Number(msg.payload));\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "2e6c2109cb3995b8",
        "type": "ui-text-input",
        "z": "1b99100829ae7f41",
        "group": "9d212165f2367f01",
        "name": "",
        "label": "calibration_sensor_width",
        "order": 3,
        "width": 0,
        "height": 0,
        "topic": "calibration_sensor_width",
        "topicType": "str",
        "mode": "number",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 550,
        "y": 180,
        "wires": [
            [
                "068171405cf7937a"
            ]
        ]
    },
    {
        "id": "068171405cf7937a",
        "type": "function",
        "z": "1b99100829ae7f41",
        "name": "set calibration_sensor_width",
        "func": "global.set(\"calibration_sensor_width\", Number(msg.payload));\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a41da1c9f8661415",
        "type": "function",
        "z": "1b99100829ae7f41",
        "name": "Get calibration_sensor_width",
        "func": "msg.payload = global.get(\"calibration_sensor_width\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 180,
        "wires": [
            [
                "2e6c2109cb3995b8"
            ]
        ]
    },
    {
        "id": "629dbc1e59dceaea",
        "type": "function",
        "z": "1b99100829ae7f41",
        "name": "Get acq_flowcell_thickness",
        "func": "msg.payload = global.get(\"acq_flowcell_thickness\");\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 220,
        "wires": [
            [
                "c757aa3b1e6cbae8"
            ]
        ]
    },
    {
        "id": "c757aa3b1e6cbae8",
        "type": "ui-text-input",
        "z": "1b99100829ae7f41",
        "group": "9d212165f2367f01",
        "name": "",
        "label": "acq_flowcell_thickness",
        "order": 2,
        "width": 0,
        "height": 0,
        "topic": "acq_flowcell_thickness",
        "topicType": "str",
        "mode": "number",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 550,
        "y": 220,
        "wires": [
            [
                "ae3e82e107244b10"
            ]
        ]
    },
    {
        "id": "ae3e82e107244b10",
        "type": "function",
        "z": "1b99100829ae7f41",
        "name": "set acq_flowcell_thickness",
        "func": "global.set(\"acq_flowcell_thickness\", Number(msg.payload));\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "495e1733d60d5651",
        "type": "switch",
        "z": "83b2474231efac73",
        "g": "910e195536aea223",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "light",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "actuator/pump",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "imager/image/update_config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "imager/image/image",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "segmenter/segment",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "restart/hardware_controller",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "restart/segmenter",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "restart/planktoscope",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "purge",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 9,
        "x": 350,
        "y": 160,
        "wires": [
            [
                "1c782af30d1ff770",
                "67bcd7bd5a4c38cc"
            ],
            [
                "1c782af30d1ff770",
                "67bcd7bd5a4c38cc"
            ],
            [
                "0fdba9b9b11427db"
            ],
            [
                "8dc5b8c9bfd7cc87"
            ],
            [
                "019662c5bf05e430"
            ],
            [
                "5f5dec5ac53119ae"
            ],
            [
                "61dde05d9a3f805e"
            ],
            [
                "2a55ae214f1e7273"
            ],
            [
                "8447c9830c3aed1e"
            ]
        ]
    },
    {
        "id": "0fdba9b9b11427db",
        "type": "function",
        "z": "83b2474231efac73",
        "g": "910e195536aea223",
        "name": "update_config command",
        "func": "const now = new Date();\n\nmsg.topic = \"imager/image\";\n\nconst pad = (n) => n.toString().padStart(2, '0');\n\nlet formattedDate = `${now.getUTCFullYear()}_${pad(now.getUTCMonth() + 1)}_${pad(now.getUTCDate())}_${pad(now.getUTCHours())}_${pad(now.getUTCMinutes())}_${pad(now.getUTCSeconds())}`;\n\nglobal.set(\"path\", `${now.toISOString().split('T')[0]}/S1/${formattedDate}`);\n\nmsg.payload = {\n    \"action\": \"update_config\",\n    \"config\": {\n        \"sample_project\": \"FairScope_TenEarth\",\n        \"sample_id\": \"S1\",\n        \"sample_operator\": \"Fairscope\",\n        \"sample_instrument\": \"PlanktoScope v2.6\",\n        \"sample_date\": now.toISOString().split('T')[0],\n        \"acq_id\": formattedDate,\n        \"acq_instrument\": \"PlanktoScope v2.6\",\n        \"acq_magnification\": \"1.2\",\n        \"acq_software\": \"PlanktoScope v2024.0.0-alpha.1\",\n        \"acq_resolution\": \"1080p\",\n        \"acq_time_between_frames\": 0.1,\n        \"acq_minimum_mesh\": 20,\n        \"acq_maximum_mesh\": 300,\n        \"acq_min_esd\": 20,\n        \"acq_max_esd\": 300,\n        \"acq_camera_name\": \"HQ Camera\",\n        \"process_pixel\": 0.75,\n        \"acq_local_datetime\": now.toISOString().split('.')[0] + 'Z',\n        \"object_date\": now.toISOString().split('T')[0],\n        \"object_time\": now.toISOString().split('T')[1].split('.')[0] + 'Z',\n        \"object_lat\": 48.587424697483556,\n        \"object_lon\": -3.8382606493497824\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 180,
        "wires": [
            [
                "1c782af30d1ff770",
                "67bcd7bd5a4c38cc"
            ]
        ]
    },
    {
        "id": "019662c5bf05e430",
        "type": "function",
        "z": "83b2474231efac73",
        "g": "910e195536aea223",
        "name": "segment command",
        "func": "msg.payload = {\n  \"action\": \"segment\",\n  \"path\": global.get(\"path\"),\n  \"settings\": {\n    \"force\": false,\n    \"recursive\": true,\n    \"ecotaxa\": true,\n    \"keep\": true\n  }\n}\n\nreturn msg; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 260,
        "wires": [
            [
                "1c782af30d1ff770",
                "67bcd7bd5a4c38cc"
            ]
        ]
    },
    {
        "id": "8dc5b8c9bfd7cc87",
        "type": "function",
        "z": "83b2474231efac73",
        "g": "910e195536aea223",
        "name": "image command",
        "func": "msg.topic = \"imager/image\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 220,
        "wires": [
            [
                "1c782af30d1ff770",
                "67bcd7bd5a4c38cc"
            ]
        ]
    },
    {
        "id": "1c782af30d1ff770",
        "type": "mqtt out",
        "z": "83b2474231efac73",
        "g": "910e195536aea223",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8dc3722c.06efa8",
        "x": 1270,
        "y": 100,
        "wires": []
    },
    {
        "id": "caf377d323526d14",
        "type": "mqtt in",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "name": "",
        "topic": "status/#",
        "qos": "0",
        "datatype": "json",
        "broker": "8dc3722c.06efa8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 100,
        "y": 800,
        "wires": [
            [
                "ff83a2795f988098"
            ]
        ]
    },
    {
        "id": "316dae6f231575b7",
        "type": "function",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "name": "Count objects segmented",
        "func": "var objectCount = global.get('objectCount') || 0;\n\nif (msg.payload.status === 'Done') {\n    msg.payload.objectCount = objectCount;\n    objectCount=0;\n    }\nelse if (msg.topic === 'status/segmenter/metric') {\n    objectCount++;\n}\n\nglobal.set('objectCount', objectCount);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 860,
        "wires": [
            [
                "9e169af039fc8031"
            ]
        ]
    },
    {
        "id": "9e169af039fc8031",
        "type": "switch",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "name": "msg.payload.metadata.equivalent_diameter is not null",
        "property": "payload.metadata.equivalent_diameter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 880,
        "y": 860,
        "wires": [
            [
                "50629a570b41196e"
            ]
        ]
    },
    {
        "id": "1bc303a19fc9e38b",
        "type": "ui-template",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "group": "7edf5f14f6ca0bdd",
        "page": "",
        "ui": "",
        "name": "Stream Pi Camera",
        "order": 3,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<center>\n  <img src=\"/ps/hal/camera/streams/preview.mjpg\"\n    alt=\"If you see this, there probably is an error either with your camera or with the python service. Please try restarting your machine.\"\n    width=\"100%\" height=\"100%\">\n</center>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 390,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "ff83a2795f988098",
        "type": "switch",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "status/segmenter/metric",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 860,
        "wires": [
            [
                "316dae6f231575b7"
            ]
        ]
    },
    {
        "id": "fd3ae27267703c27",
        "type": "ui-chart",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "group": "4a8738206c62b02e",
        "name": "",
        "label": "Histogram - Equivalent Diameter",
        "order": 2,
        "chartType": "histogram",
        "category": "Equivalent Diameter (μm)",
        "categoryType": "str",
        "xAxisLabel": "Equivalent Diameter (μm)",
        "xAxisProperty": "payload.metadata.equivalent_diameter",
        "xAxisPropertyType": "msg",
        "xAxisType": "bins",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "20",
        "xmax": "100",
        "yAxisLabel": "Abundance",
        "yAxisProperty": "payload.metadata.equivalent_diameter",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": "80",
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "1",
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "86400",
        "removeOlderPoints": "",
        "colors": [
            "#00ff04",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "3",
        "height": "6",
        "className": "",
        "interpolation": "linear",
        "x": 1660,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "5f5dec5ac53119ae",
        "type": "exec",
        "z": "83b2474231efac73",
        "g": "910e195536aea223",
        "command": "sudo systemctl restart planktoscope-org.controller.service",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Restart hardware controller",
        "x": 640,
        "y": 320,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "61dde05d9a3f805e",
        "type": "exec",
        "z": "83b2474231efac73",
        "g": "910e195536aea223",
        "command": "sudo systemctl restart planktoscope-org.segmenter.service",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Restart segmenter",
        "x": 610,
        "y": 380,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "527165cd7171fe26",
        "type": "ui-template",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "group": "7edf5f14f6ca0bdd",
        "page": "",
        "ui": "",
        "name": "Actions Clock",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <div class=\"clock-container\">\n        <canvas ref=\"clockCanvas\"></canvas>\n        <div class=\"legend\">\n            <div v-for=\"event in events\" :key=\"event.label\" class=\"legend-item\">\n                <span :style=\"{ backgroundColor: event.color }\" class=\"color-box\"></span>\n                {{ event.label }}\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            events: [\n                { start: 35, end: 36, label: \"Pump dead volume\", color: \"rgba(255, 0, 0, 0.3)\" },\n                { start: 36, end: 40, label: \"Acquisition\", color: \"rgba(0, 255, 0, 0.3)\" },\n                { start: 45, end: 8, label: \"Segmentation\", color: \"rgba(0, 0, 255, 0.3)\" },\n                { start: 18, end: 19, label: \"Purge data\", color: \"rgba(255, 0, 0, 0.3)\" },\n                { start: 34, end: 35, label: \"Agitation\", color: \"rgba(255, 255, 0, 0.3)\" },\n                { start: 25, end: 26, label: \"Restart segmenter\", color: \"rgba(255, 0, 255, 0.3)\" },\n                { start: 30, end: 31, label: \"Restart hardware controller\", color: \"rgba(0, 255, 255, 0.3)\" }\n            ],\n            currentMinute: null,\n            clockRadius: 100\n        };\n    },\n    mounted() {\n        this.updateClock();\n        setInterval(this.updateClock, 1000);\n    },\n    methods: {\n        updateClock() {\n            const now = new Date();\n            this.currentMinute = now.getMinutes() + now.getSeconds() / 60;\n            this.drawClock();\n        },\n        drawClock() {\n            const canvas = this.$refs.clockCanvas;\n            const ctx = canvas.getContext(\"2d\");\n            const size = this.clockRadius * 2;\n            canvas.width = size;\n            canvas.height = size;\n            ctx.clearRect(0, 0, size, size);\n            ctx.translate(this.clockRadius, this.clockRadius);\n\n            // Draw circle\n            ctx.beginPath();\n            ctx.arc(0, 0, this.clockRadius, 0, 2 * Math.PI);\n            ctx.stroke();\n\n            // Draw minute marks\n            for (let i = 0; i < 60; i += 10) {\n                const angle = (i / 60) * 2 * Math.PI - Math.PI / 2;\n                const x1 = Math.cos(angle) * (this.clockRadius - 5);\n                const y1 = Math.sin(angle) * (this.clockRadius - 5);\n                const x2 = Math.cos(angle) * (this.clockRadius - 15);\n                const y2 = Math.sin(angle) * (this.clockRadius - 15);\n                ctx.strokeStyle = \"black\";\n                ctx.lineWidth = 2;\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.lineTo(x2, y2);\n                ctx.stroke();\n            }\n\n            // Draw event periods with colors\n            this.events.forEach(event => {\n                let startAngle = (event.start / 60) * 2 * Math.PI - Math.PI / 2;\n                let endAngle = (event.end / 60) * 2 * Math.PI - Math.PI / 2;\n                ctx.fillStyle = event.color;\n                ctx.beginPath();\n                ctx.moveTo(0, 0);\n                ctx.arc(0, 0, this.clockRadius - 10, startAngle, endAngle);\n                ctx.lineTo(0, 0);\n                ctx.fill();\n            });\n\n            // Draw current time hand\n            const angle = (this.currentMinute / 60) * 2 * Math.PI - Math.PI / 2;\n            const x = Math.cos(angle) * (this.clockRadius - 15);\n            const y = Math.sin(angle) * (this.clockRadius - 15);\n            ctx.strokeStyle = \"black\";\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.moveTo(0, 0);\n            ctx.lineTo(x, y);\n            ctx.stroke();\n        }\n    }\n};\n</script>\n\n<style scoped>\n.clock-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\ncanvas {\n    margin-right: 20px;\n}\n\n.legend {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n}\n\n.legend-item {\n    display: flex;\n    align-items: center;\n    margin: 5px 0;\n}\n\n.color-box {\n    width: 15px;\n    height: 15px;\n    margin-right: 5px;\n    border-radius: 3px;\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 380,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "50629a570b41196e",
        "type": "function",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "name": "convert px to um",
        "func": "// Conversion factor from pixels to micrometers (µm)\nconst px_to_um = 0.75;\n\n// Convert relevant measurements\nmsg.payload.metadata.equivalent_diameter = Math.round(msg.payload.metadata.equivalent_diameter * px_to_um);\nmsg.payload.metadata.width = Math.round(msg.payload.metadata.width * px_to_um);\nmsg.payload.metadata.height = Math.round(msg.payload.metadata.height * px_to_um);\nmsg.payload.metadata.area = Math.round(msg.payload.metadata.area * (px_to_um ** 2)); // Area is in square units\nmsg.payload.metadata.area_exc = Math.round(msg.payload.metadata.area_exc * (px_to_um ** 2));\nmsg.payload.metadata.convex_area = Math.round(msg.payload.metadata.convex_area * (px_to_um ** 2));\nmsg.payload.metadata.major = Math.round(msg.payload.metadata.major * px_to_um);\nmsg.payload.metadata.minor = Math.round(msg.payload.metadata.minor * px_to_um);\nmsg.payload.metadata.perim = Math.round(msg.payload.metadata[\"perim.\"] * px_to_um); // Ensure proper key reference\nmsg.payload.metadata.bounding_box_area = Math.round(msg.payload.metadata.bounding_box_area * (px_to_um ** 2));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 860,
        "wires": [
            [
                "fd3ae27267703c27",
                "60d1ad2a7e54e60e",
                "1997fd46811f0331",
                "5f091b11b5c9fa40",
                "0650e037776b3d8a"
            ]
        ]
    },
    {
        "id": "0aef9a09d59e574c",
        "type": "ui-markdown",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "group": "4a8738206c62b02e",
        "name": "Histogram of equivalent_diameter",
        "order": 3,
        "width": "3",
        "height": "6",
        "content": "### Distribution of Object Sizes  \nUnderstanding the size distribution of planktonic objects helps identify dominant size classes and detect anomalies. A skewed distribution might indicate specific biological trends, such as a bloom of a particular species or a technical issue in the acquisition process.  \n\n*In the graph:*  \n- A **peak in smaller sizes** suggests dominance of tiny plankton.  \n- A **broad distribution** indicates a mix of various size classes.  \n- A **skewed or bimodal pattern** may reflect biological or technical factors (e.g., species-specific blooms or imaging biases).\n",
        "className": "",
        "x": 1660,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "a9701575d8df4ce1",
        "type": "ui-markdown",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "group": "4a8738206c62b02e",
        "name": "elongation vs. area",
        "order": 6,
        "width": "3",
        "height": "6",
        "content": "### Relationship Between Elongation and Object Area  \nThis scatter plot helps assess whether larger objects tend to be more elongated or compact. Certain plankton species have characteristic shapes, and identifying correlations between elongation and area can aid in distinguishing different taxa or understanding morphological variability.  \n\n*In the graph:*  \n- **Top-right**: Large and highly elongated objects (e.g., filamentous plankton).  \n- **Bottom-right**: Small but highly elongated objects (e.g., thin needle-like forms). \n- **Top-left**: Large but compact objects (e.g., rounded or clustered plankton). \n- **Bottom-left**: Small and compact objects (e.g., spherical or short structures).",
        "className": "",
        "x": 1610,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "60d1ad2a7e54e60e",
        "type": "ui-chart",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "group": "4a8738206c62b02e",
        "name": "elongation vs. area",
        "label": "elongation vs. area",
        "order": 5,
        "chartType": "scatter",
        "category": "elongation vs. area",
        "categoryType": "str",
        "xAxisLabel": "elongation (ratio of major to minor axis)",
        "xAxisProperty": "payload.metadata.elongation",
        "xAxisPropertyType": "msg",
        "xAxisType": "linear",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "0",
        "xmax": "50",
        "yAxisLabel": "area (μm²)",
        "yAxisProperty": "payload.metadata.area",
        "yAxisPropertyType": "msg",
        "ymin": "300",
        "ymax": "1500",
        "bins": 10,
        "action": "append",
        "stackSeries": true,
        "pointShape": "circle",
        "pointRadius": "1",
        "showLegend": true,
        "removeOlder": "1",
        "removeOlderUnit": "3600",
        "removeOlderPoints": "300",
        "colors": [
            "#ff0088",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "3",
        "height": "6",
        "className": "",
        "interpolation": "linear",
        "x": 1610,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "f8df009e737eb044",
        "type": "ui-markdown",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "group": "4a8738206c62b02e",
        "name": "equivalent_diameter vs. MeanValue",
        "order": 9,
        "width": "3",
        "height": "6",
        "content": "### Variation of Mean Brightness with Equivalent Diameter  \nThis graph explores whether larger objects tend to be brighter or darker. This can reveal differences in pigmentation, transparency, or even imaging inconsistencies.  \n\n*In the graph:*   \n- **Top-right**: Large and bright objects.\n- **Top-left**: Small and bright objects.\n- **Bottom-right**: Large and dark objects.\n- **Bottom-left**: Small and dark objects.  ",
        "className": "",
        "x": 1660,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "e6eb3b16a1d6bf22",
        "type": "ui-markdown",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "group": "4a8738206c62b02e",
        "name": "MeanSaturation vs. MeanValue",
        "order": 13,
        "width": "3",
        "height": "6",
        "content": "### Relationship Between Mean Saturation and Mean Brightness\nThis visualization helps understand how color properties vary with brightness. Some plankton groups exhibit distinct coloration, and saturation could be a useful feature for classification. A strong trend might suggest systematic differences in pigmentation or optical properties across plankton groups.\n\n*In the graph:*  \n- **Top-right**: Bright and highly saturated objects (vivid colors).  \n- **Top-left**: Bright but low-saturation objects (pale or near-white).  \n- **Bottom-right**: Dark but highly saturated objects (deep, rich colors).  \n- **Bottom-left**: Dark and low-saturation objects (grayish or faintly colored).",
        "className": "",
        "x": 1650,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "1997fd46811f0331",
        "type": "ui-chart",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "group": "4a8738206c62b02e",
        "name": "equivalent_diameter vs. MeanValue",
        "label": "equivalent_diameter vs. MeanValue",
        "order": 8,
        "chartType": "scatter",
        "category": "equivalent_diameter vs. MeanValue",
        "categoryType": "str",
        "xAxisLabel": "Equivalent Diameter (μm)",
        "xAxisProperty": "payload.metadata.equivalent_diameter",
        "xAxisPropertyType": "msg",
        "xAxisType": "linear",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "0",
        "xmax": "50",
        "yAxisLabel": "MeanValue (0–255, grayscale value)",
        "yAxisProperty": "payload.metadata.MeanValue",
        "yAxisPropertyType": "msg",
        "ymin": "150",
        "ymax": "255",
        "bins": 10,
        "action": "append",
        "stackSeries": true,
        "pointShape": "circle",
        "pointRadius": "1",
        "showLegend": true,
        "removeOlder": "1",
        "removeOlderUnit": "3600",
        "removeOlderPoints": "300",
        "colors": [
            "#8c00ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "3",
        "height": "6",
        "className": "",
        "interpolation": "linear",
        "x": 1660,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "5f091b11b5c9fa40",
        "type": "ui-chart",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "group": "4a8738206c62b02e",
        "name": "MeanSaturation vs. MeanValue",
        "label": "MeanSaturation vs. MeanValue",
        "order": 11,
        "chartType": "scatter",
        "category": "MeanSaturation vs. MeanValue",
        "categoryType": "str",
        "xAxisLabel": "MeanSaturation (%)",
        "xAxisProperty": "payload.metadata.MeanSaturation",
        "xAxisPropertyType": "msg",
        "xAxisType": "linear",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "0",
        "xmax": "50",
        "yAxisLabel": "MeanValue (0–255, grayscale value)",
        "yAxisProperty": "payload.metadata.MeanValue",
        "yAxisPropertyType": "msg",
        "ymin": "150",
        "ymax": "255",
        "bins": 10,
        "action": "append",
        "stackSeries": true,
        "pointShape": "circle",
        "pointRadius": "1",
        "showLegend": true,
        "removeOlder": "1",
        "removeOlderUnit": "3600",
        "removeOlderPoints": "300",
        "colors": [
            "#ff9500",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "3",
        "height": "6",
        "className": "",
        "interpolation": "linear",
        "x": 1650,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "b17728471bdfc61e",
        "type": "ui-template",
        "z": "83b2474231efac73",
        "g": "910e195536aea223",
        "group": "7edf5f14f6ca0bdd",
        "page": "",
        "ui": "",
        "name": "Table",
        "order": 2,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<table border=\"1\" style=\"width:100%; text-align:center;\">\n    <tr>\n        <th>Topic</th>\n        <th>Action</th>\n        <th>Status</th>\n    </tr>\n    <tr>\n        <td>light</td>\n        <td>{{msg.payload.light.action}}</td>\n        <td>{{msg.payload.light.status}}</td>\n    </tr>\n    <tr>\n        <td>actuator/pump</td>\n        <td>{{msg.payload[\"actuator/pump\"].action}}</td>\n        <td>{{msg.payload[\"actuator/pump\"].status}}</td>\n    </tr>\n    <tr>\n        <td>imager/image</td>\n        <td>{{msg.payload[\"imager/image\"].action}}</td>\n        <td>{{msg.payload[\"imager/image\"].status}}</td>\n    </tr>\n    <tr>\n        <td>segmenter/segment</td>\n        <td>{{msg.payload[\"segmenter/segment\"].action}}</td>\n        <td>{{msg.payload[\"segmenter/segment\"].status}}</td>\n    </tr>\n</table>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1330,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e4719fcedaa61149",
        "type": "switch",
        "z": "83b2474231efac73",
        "g": "910e195536aea223",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "status/light",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status/pump",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status/imager",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status/segmenter",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 770,
        "y": 540,
        "wires": [
            [
                "67bcd7bd5a4c38cc"
            ],
            [
                "67bcd7bd5a4c38cc"
            ],
            [
                "67bcd7bd5a4c38cc"
            ],
            [
                "67bcd7bd5a4c38cc"
            ]
        ]
    },
    {
        "id": "9301eaa353ece507",
        "type": "mqtt in",
        "z": "83b2474231efac73",
        "g": "910e195536aea223",
        "name": "",
        "topic": "status/#",
        "qos": "0",
        "datatype": "json",
        "broker": "8dc3722c.06efa8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 300,
        "y": 540,
        "wires": [
            [
                "e4719fcedaa61149"
            ]
        ]
    },
    {
        "id": "67bcd7bd5a4c38cc",
        "type": "function",
        "z": "83b2474231efac73",
        "g": "910e195536aea223",
        "name": "save current actions & status",
        "func": "// Récupérer les données précédentes stockées dans le flow context\nvar storedData = flow.get(\"deviceData\") || {\n    light: { action: \"\", status: \"\" },\n    \"actuator/pump\": { action: \"\", status: \"\" },\n    \"imager/image\": { action: \"\", status: \"\" },\n    \"segmenter/segment\": { action: \"\", status: \"\" }\n};\n\n// Mettre à jour les valeurs en fonction du topic reçu\nif (msg.topic === \"light\") {\n    storedData.light.action = msg.payload.action;\n} else if (msg.topic === \"status/light\") {\n    storedData.light.status = msg.payload.status;\n} else if (msg.topic === \"actuator/pump\") {\n    storedData[\"actuator/pump\"].action = msg.payload;\n} else if (msg.topic === \"status/pump\") {\n    storedData[\"actuator/pump\"].status = msg.payload.status;\n} else if (msg.topic === \"imager/image\") {\n    storedData[\"imager/image\"].action = msg.payload.action;\n} else if (msg.topic === \"status/imager\") {\n    storedData[\"imager/image\"].status = msg.payload.status;\n} else if (msg.topic === \"segmenter/segment\") {\n    storedData[\"segmenter/segment\"].action = msg.payload.action;\n} else if (msg.topic === \"status/segmenter\") {\n    storedData[\"segmenter/segment\"].status = msg.payload.status;\n}\n\n// Sauvegarder les nouvelles valeurs\nflow.set(\"deviceData\", storedData);\n\n// Attacher les données mises à jour au message\nmsg.payload = storedData;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 320,
        "wires": [
            [
                "b17728471bdfc61e"
            ]
        ]
    },
    {
        "id": "2a55ae214f1e7273",
        "type": "exec",
        "z": "83b2474231efac73",
        "g": "910e195536aea223",
        "command": "sudo reboot now",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Restart PlanktoScope",
        "x": 620,
        "y": 440,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "0650e037776b3d8a",
        "type": "ui-chart",
        "z": "83b2474231efac73",
        "g": "751429d7682830be",
        "group": "4a8738206c62b02e",
        "name": "x vs. y",
        "label": "x vs. y",
        "order": 12,
        "chartType": "scatter",
        "category": "x vs. y",
        "categoryType": "str",
        "xAxisLabel": "x",
        "xAxisProperty": "payload.metadata.x",
        "xAxisPropertyType": "msg",
        "xAxisType": "linear",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "0",
        "xmax": "50",
        "yAxisLabel": "y",
        "yAxisProperty": "payload.metadata.y",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": true,
        "pointShape": "circle",
        "pointRadius": "1",
        "showLegend": true,
        "removeOlder": "1",
        "removeOlderUnit": "3600",
        "removeOlderPoints": "300",
        "colors": [
            "#2b00ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "3",
        "height": "6",
        "className": "",
        "interpolation": "linear",
        "x": 1570,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "8447c9830c3aed1e",
        "type": "exec",
        "z": "83b2474231efac73",
        "g": "910e195536aea223",
        "command": "rm -rf data/img/* data/clean/* data/objects/*",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Purge data",
        "x": 590,
        "y": 500,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "a197bfa71c1761b4",
        "type": "cronplus",
        "z": "83b2474231efac73",
        "g": "910e195536aea223",
        "name": "",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "purge",
                "topic": "purge",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 18 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            },
            {
                "name": "schedule9",
                "topic": "restart/planktoscope",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 20 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            },
            {
                "name": "restart_segmenter",
                "topic": "restart/segmenter",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 25 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            },
            {
                "name": "restart_hardware_controller",
                "topic": "restart/hardware_controller",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 30 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            },
            {
                "name": "light_on",
                "topic": "light",
                "payloadType": "json",
                "payload": "{\"action\": \"on\"}",
                "expressionType": "cron",
                "expression": "0 35 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            },
            {
                "name": "update_config",
                "topic": "imager/image/update_config",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "1 35 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            },
            {
                "name": "pump",
                "topic": "actuator/pump",
                "payloadType": "json",
                "payload": "{\"action\": \"move\",\"direction\": \"FORWARD\",\"volume\": 3,\"flowrate\": 30}",
                "expressionType": "cron",
                "expression": "2 35 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            },
            {
                "name": "image",
                "topic": "imager/image/image",
                "payloadType": "json",
                "payload": "{\"action\": \"image\",\"pump_direction\": \"FORWARD\",\"volume\": 0.008,\"nb_frame\": 200,\"sleep\": 0.1}",
                "expressionType": "cron",
                "expression": "0 36 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            },
            {
                "name": "light_off",
                "topic": "light",
                "payloadType": "json",
                "payload": "{\"action\": \"off\"}",
                "expressionType": "cron",
                "expression": "0 45 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            },
            {
                "name": "segment",
                "topic": "segmenter/segment",
                "payloadType": "default",
                "payload": "",
                "expressionType": "cron",
                "expression": "1 45 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 100,
        "y": 60,
        "wires": [
            []
        ]
    }
]