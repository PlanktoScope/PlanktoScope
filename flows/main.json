[
    {
        "id": "eaae323a.31b3",
        "type": "tab",
        "label": "Home",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b771c342.49603",
        "type": "tab",
        "label": "Sample",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bccd1f23.87219",
        "type": "tab",
        "label": "Optic Configuration",
        "disabled": false,
        "info": ""
    },
    {
        "id": "baa1e3d9.cb29d",
        "type": "tab",
        "label": "Fluidic Acquisition",
        "disabled": false,
        "info": ""
    },
    {
        "id": "cb95299c.2817c8",
        "type": "tab",
        "label": "Segmentation",
        "disabled": false,
        "info": ""
    },
    {
        "id": "31d8721d35506f94",
        "type": "tab",
        "label": "Gallery",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ee49a6917e33b587",
        "type": "tab",
        "label": "Download Files",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1371dec5.76e671",
        "type": "tab",
        "label": "System Monitoring",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f21ba04.c26266",
        "type": "tab",
        "label": "WIFI Management",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9daf9e2b.019fc",
        "type": "tab",
        "label": "Administration",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1eaf21c8.f7a21e",
        "type": "tab",
        "label": "Hardware Settings",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9a22e67a.378818",
        "type": "tab",
        "label": "MQTT Receive",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1c24ad9c.bebec2",
        "type": "subflow",
        "name": "Config",
        "info": "An input to this subflow will get the configuration to be saved to disk.\n\nOn startup, this node outputs the loaded configuration",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 160,
                "wires": [
                    {
                        "id": "3ad9835.08c937c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 60,
                "wires": [
                    {
                        "id": "ad541674.4791c8",
                        "port": 0
                    },
                    {
                        "id": "f439663c.8abd3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4ed26b8b.253504",
        "type": "subflow",
        "name": "Hardware config",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 200,
                "wires": [
                    {
                        "id": "53d163be.47cf24"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 80,
                "wires": [
                    {
                        "id": "ddb4b136.fc0b78",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "833bc5bb.217ba8",
        "type": "ui_group",
        "name": "Preview",
        "tab": "181bb236.1e94be",
        "order": 1,
        "disp": true,
        "width": 18,
        "collapse": false
    },
    {
        "id": "3a6bb13f.c9703e",
        "type": "ui_tab",
        "name": "Home",
        "icon": "home",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "181bb236.1e94be",
        "type": "ui_tab",
        "name": "Optic Configuration",
        "icon": "fa-eye",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c9194f02.9d5e9",
        "type": "ui_tab",
        "name": "Fluidic Acquisition",
        "icon": "fa-flask",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8d16beb8.9b3fb",
        "type": "ui_tab",
        "name": "Segmentation",
        "icon": "fa-crop",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d9cd733b.ab73d",
        "type": "ui_tab",
        "name": "System Monitoring",
        "icon": "fa-thermometer-full",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4248342d.e55fac",
        "type": "ui_group",
        "name": "Optic Characterization Expert",
        "tab": "181bb236.1e94be",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "858a0e3c.987fe",
        "type": "ui_group",
        "name": "Preview Expert",
        "tab": "c9194f02.9d5e9",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "64903b47.4034e4",
        "type": "ui_group",
        "name": "Navigation",
        "tab": "8d16beb8.9b3fb",
        "order": 4,
        "disp": false,
        "width": 16,
        "collapse": false
    },
    {
        "id": "cc8bc4eb.651868",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#5900ce",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Plancton_1",
                "default": "#4B7930",
                "baseColor": "#186891",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#186891",
                    "value": "#186891",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#186891",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#2397d3",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#186891",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": true
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "PlanktoScope",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "Y-MM-DD",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "c0ebfc57.42527",
        "type": "ui_group",
        "name": "Images",
        "tab": "",
        "order": 1,
        "disp": false,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "737ec584.2eea2c",
        "type": "ui_tab",
        "name": "Sample",
        "icon": "fa-eyedropper",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6f97e7ae.270c48",
        "type": "ui_group",
        "name": "Sample",
        "tab": "3a6bb13f.c9703e",
        "order": 1,
        "disp": false,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3e1ba03d.f01d8",
        "type": "ui_group",
        "name": "Sample Identification",
        "tab": "737ec584.2eea2c",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4e0cd5ea.17e59c",
        "type": "ui_group",
        "name": "Optic Configuration",
        "tab": "3a6bb13f.c9703e",
        "order": 2,
        "disp": false,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ef590206.24f6",
        "type": "ui_group",
        "name": "Fluidic Acquisition",
        "tab": "3a6bb13f.c9703e",
        "order": 3,
        "disp": false,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ae8f6620.073358",
        "type": "ui_group",
        "name": "Segmentation",
        "tab": "3a6bb13f.c9703e",
        "order": 4,
        "disp": false,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "196518b2.4d53b7",
        "type": "ui_group",
        "name": "Gallery",
        "tab": "3a6bb13f.c9703e",
        "order": 5,
        "disp": false,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "777a7c33.fcd804",
        "type": "ui_group",
        "name": "Systeme Monitoring",
        "tab": "3a6bb13f.c9703e",
        "order": 7,
        "disp": false,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cef1e703.bcf3c8",
        "type": "ui_group",
        "name": "Sample Location",
        "tab": "737ec584.2eea2c",
        "order": 3,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5517c651.b2f668",
        "type": "ui_group",
        "name": "Navigation",
        "tab": "737ec584.2eea2c",
        "order": 12,
        "disp": false,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fbd92986.1028c8",
        "type": "ui_group",
        "name": "Focus Adjustment Expert",
        "tab": "181bb236.1e94be",
        "order": 6,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "707d9797.c8e798",
        "type": "ui_group",
        "name": "Fluidic Manual Manipulation",
        "tab": "181bb236.1e94be",
        "order": 8,
        "disp": true,
        "width": 12,
        "collapse": false
    },
    {
        "id": "7a0b4877.a5d268",
        "type": "ui_group",
        "name": "Navigation",
        "tab": "181bb236.1e94be",
        "order": 9,
        "disp": false,
        "width": 12,
        "collapse": false
    },
    {
        "id": "4322c187.e73e5",
        "type": "ui_group",
        "name": "Acquisition",
        "tab": "c9194f02.9d5e9",
        "order": 3,
        "disp": true,
        "width": 10,
        "collapse": false
    },
    {
        "id": "b7919ae2.c01788",
        "type": "ui_group",
        "name": "Navigation",
        "tab": "c9194f02.9d5e9",
        "order": 7,
        "disp": false,
        "width": "10",
        "collapse": false
    },
    {
        "id": "b5d61bc7.54fe48",
        "type": "ui_group",
        "name": "Statistics Expert",
        "tab": "c9194f02.9d5e9",
        "order": 4,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1be83144.4fe4bf",
        "type": "ui_group",
        "name": "Danger Zone Expert",
        "tab": "2489e51c.eed77a",
        "order": 3,
        "disp": true,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3ca00bf9.e5cac4",
        "type": "ui_group",
        "name": "Navigation",
        "tab": "d9cd733b.ab73d",
        "order": 6,
        "disp": true,
        "width": 9,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8dc3722c.06efa8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0.0.0.0",
        "port": "1883",
        "clientid": "Client_node",
        "usetls": false,
        "compatmode": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "abeb6dad.635a2",
        "type": "ui_group",
        "name": "Control Expert",
        "tab": "8d16beb8.9b3fb",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cf5d9f0e.d57e7",
        "type": "ui_group",
        "name": "Net Metadata",
        "tab": "737ec584.2eea2c",
        "order": 4,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ce9e278.781eed8",
        "type": "ui_group",
        "name": "Information",
        "tab": "d9cd733b.ab73d",
        "order": 4,
        "disp": true,
        "width": 9,
        "collapse": false
    },
    {
        "id": "70de8209.68416c",
        "type": "ui_group",
        "name": "Status",
        "tab": "c9194f02.9d5e9",
        "order": 6,
        "disp": true,
        "width": 10,
        "collapse": false
    },
    {
        "id": "46be9c86.dea684",
        "type": "ui_group",
        "name": "Status",
        "tab": "8d16beb8.9b3fb",
        "order": 3,
        "disp": true,
        "width": 16,
        "collapse": false
    },
    {
        "id": "8c38a81e.9897a8",
        "type": "ui_group",
        "name": "Camera Settings Expert",
        "tab": "181bb236.1e94be",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "52d1b77.28369c8",
        "type": "ui_group",
        "name": "USB Backup",
        "tab": "d9cd733b.ab73d",
        "order": 3,
        "disp": true,
        "width": "9",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a7d64879.38298",
        "type": "ui_group",
        "name": "Python Log Expert",
        "tab": "2489e51c.eed77a",
        "order": 1,
        "disp": true,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9e409235.73cd7",
        "type": "ui_group",
        "name": "Add a new network",
        "tab": "1b49ae0f.602d6a",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "919923a3.d10868",
        "type": "ui_group",
        "name": "Current Connection",
        "tab": "1b49ae0f.602d6a",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1b49ae0f.602d6a",
        "type": "ui_tab",
        "name": "Wifi",
        "icon": "wifi",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2489e51c.eed77a",
        "type": "ui_tab",
        "name": "Administration",
        "icon": "fa-cogs",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b0fb559a.6966a8",
        "type": "ui_tab",
        "name": "Hardware Settings",
        "icon": "fa-microchip",
        "order": 12,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6be36295.0ab324",
        "type": "ui_group",
        "name": "Settings",
        "tab": "b0fb559a.6966a8",
        "order": 1,
        "disp": false,
        "width": 12,
        "collapse": false
    },
    {
        "id": "fc5e4e6f.5b1c8",
        "type": "ui_group",
        "name": "GPS Status",
        "tab": "737ec584.2eea2c",
        "order": 5,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f3ca28ef.4df0a8",
        "type": "ui_group",
        "name": "Shutdown",
        "tab": "3a6bb13f.c9703e",
        "order": 11,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "cfe2288f.a8862",
        "type": "ui_group",
        "name": "GPS Status",
        "tab": "d9cd733b.ab73d",
        "order": 5,
        "disp": true,
        "width": 9,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7bc0a4c416e4545c",
        "type": "ui_group",
        "name": "Culture Date and Time",
        "tab": "737ec584.2eea2c",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4dd5a10b2eda120a",
        "type": "ui_group",
        "name": "Navigation",
        "tab": "",
        "order": 3,
        "disp": false,
        "width": 5,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8849bce411ac2d05",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": 6
    },
    {
        "id": "451503f30d8dee86",
        "type": "ui_group",
        "name": "Group 3",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": 6
    },
    {
        "id": "7e3a6f5233943da5",
        "type": "ui_group",
        "name": "Optic Characterization Beginner",
        "tab": "181bb236.1e94be",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4a3d149548f7d6bf",
        "type": "ui_group",
        "name": "Camera Settings Beginner",
        "tab": "181bb236.1e94be",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "957f2e43d9ce521e",
        "type": "ui_group",
        "name": "Focus Adjustment Beginner",
        "tab": "181bb236.1e94be",
        "order": 7,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "527c2bcfd97bfea3",
        "type": "ui_group",
        "name": "Mode_selection",
        "tab": "2489e51c.eed77a",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "db554934a715783e",
        "type": "ui_group",
        "name": "Mode_selection",
        "tab": "b0fb559a.6966a8",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "4647b4c9d3eb6365",
        "type": "ui_group",
        "name": "Mode selection",
        "tab": "181bb236.1e94be",
        "order": 10,
        "disp": false,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "02ef954dd5a84815",
        "type": "ui_group",
        "name": "Prefill sample",
        "tab": "737ec584.2eea2c",
        "order": 6,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a961c5663b1f739d",
        "type": "ui_group",
        "name": "Prefill net",
        "tab": "737ec584.2eea2c",
        "order": 7,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c9aaf84f0d1abd88",
        "type": "ui_group",
        "name": "Summary",
        "tab": "737ec584.2eea2c",
        "order": 10,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "eda2c2de40a75200",
        "type": "ui_group",
        "name": "Summary Net",
        "tab": "737ec584.2eea2c",
        "order": 11,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6c57a903b8155d3d",
        "type": "ui_group",
        "name": "Python Log Beginner",
        "tab": "2489e51c.eed77a",
        "order": 2,
        "disp": true,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5762ede5e23a8f84",
        "type": "ui_group",
        "name": "Statistics Beginner",
        "tab": "c9194f02.9d5e9",
        "order": 5,
        "disp": true,
        "width": 10,
        "collapse": false,
        "className": ""
    },
    {
        "id": "2cf6f444c75c82ae",
        "type": "ui_group",
        "name": "Preview Beginner",
        "tab": "c9194f02.9d5e9",
        "order": 2,
        "disp": true,
        "width": 18,
        "collapse": false,
        "className": ""
    },
    {
        "id": "be8a37d06ca38f9f",
        "type": "ui_group",
        "name": "Wifi",
        "tab": "3a6bb13f.c9703e",
        "order": 8,
        "disp": false,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0c57124c029e9fda",
        "type": "ui_group",
        "name": "Administration",
        "tab": "3a6bb13f.c9703e",
        "order": 9,
        "disp": false,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cde1fbd651fd9e46",
        "type": "ui_group",
        "name": "Hardware Settings",
        "tab": "3a6bb13f.c9703e",
        "order": 10,
        "disp": false,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b63d1f91.68095",
        "type": "ui_tab",
        "name": "Gallery",
        "icon": "fa-file-image-o",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "eb23a053.4aa63",
        "type": "ui_group",
        "name": "Snapshot",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "94a3c477325a32c4",
        "type": "ui_group",
        "name": "Picture show",
        "tab": "b63d1f91.68095",
        "order": 4,
        "disp": true,
        "width": 16,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d1074b91f48dc4dc",
        "type": "ui_group",
        "name": "Control Beginner",
        "tab": "8d16beb8.9b3fb",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d89ce6f9f1138668",
        "type": "ui_group",
        "name": "System Information",
        "tab": "d9cd733b.ab73d",
        "order": 1,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8432773e2c23d195",
        "type": "ui_tab",
        "name": "Download Files",
        "icon": "fa-download",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6103feeeaa303a03",
        "type": "ui_group",
        "name": "Download Files",
        "tab": "3a6bb13f.c9703e",
        "order": 6,
        "disp": false,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4a1683be6c899941",
        "type": "ui_group",
        "name": "Select folder",
        "tab": "8432773e2c23d195",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f117c73f1f9395a9",
        "type": "ui_group",
        "name": "Hidden_Groupe",
        "tab": "737ec584.2eea2c",
        "order": 8,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8b2fb89a7d179b25",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "3e1ba03d.f01d8",
        "order": 5,
        "width": 10,
        "height": 1
    },
    {
        "id": "3dcaa1cd657ad3d4",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "3e1ba03d.f01d8",
        "order": 6,
        "width": 10,
        "height": 1
    },
    {
        "id": "b87e81411119c4cc",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "3e1ba03d.f01d8",
        "order": 8,
        "width": 10,
        "height": 1
    },
    {
        "id": "cc3494066db3ba8a",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "3e1ba03d.f01d8",
        "order": 9,
        "width": 10,
        "height": 1
    },
    {
        "id": "2716a023c8152c3d",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "cf5d9f0e.d57e7",
        "order": 3,
        "width": 10,
        "height": 1
    },
    {
        "id": "bc945015218a216c",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "fc5e4e6f.5b1c8",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "f28b2d5411937897",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "02ef954dd5a84815",
        "order": 1,
        "width": 2,
        "height": 1
    },
    {
        "id": "93f3c27af0f0129e",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "02ef954dd5a84815",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "b3d4dcb4a81be883",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "02ef954dd5a84815",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "9b44075fdaaefeda",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "02ef954dd5a84815",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "7e8275b343704a5b",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "02ef954dd5a84815",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "d7cee0dd95ffbe51",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "02ef954dd5a84815",
        "order": 9,
        "width": 2,
        "height": 1
    },
    {
        "id": "23e14a55afcb5c32",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "f117c73f1f9395a9",
        "order": 1,
        "width": 10,
        "height": 1
    },
    {
        "id": "ed2179ec561fd9c1",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "f117c73f1f9395a9",
        "order": 2,
        "width": 10,
        "height": 1
    },
    {
        "id": "e5af704d2e6be1c0",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "f117c73f1f9395a9",
        "order": 3,
        "width": 10,
        "height": 1
    },
    {
        "id": "da955f7cdc3d883a",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "f117c73f1f9395a9",
        "order": 4,
        "width": 10,
        "height": 1
    },
    {
        "id": "1fe73a79d35ce7b9",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "f117c73f1f9395a9",
        "order": 5,
        "width": 10,
        "height": 1
    },
    {
        "id": "ec05584494e99a5a",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "f117c73f1f9395a9",
        "order": 6,
        "width": 10,
        "height": 1
    },
    {
        "id": "bf8ab77eccbfb605",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "f117c73f1f9395a9",
        "order": 7,
        "width": 10,
        "height": 1
    },
    {
        "id": "ccaff04269882a77",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "f117c73f1f9395a9",
        "order": 8,
        "width": 10,
        "height": 1
    },
    {
        "id": "a40cc98ea9f50fa8",
        "type": "ui_spacer",
        "z": "1371dec5.76e671",
        "name": "spacer",
        "group": "cfe2288f.a8862",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "c61e6f5a73a3e721",
        "type": "ui_spacer",
        "z": "1371dec5.76e671",
        "name": "spacer",
        "group": "cfe2288f.a8862",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "35b8cc9737fbb93c",
        "type": "ui_group",
        "name": "Select next folder",
        "tab": "8432773e2c23d195",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9666b54a41785169",
        "type": "ui_group",
        "name": "USB selection",
        "tab": "8432773e2c23d195",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7775cf1d4585df3b",
        "type": "ui_group",
        "name": "Select next folder",
        "tab": "8432773e2c23d195",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3b7510519e97c165",
        "type": "ui_group",
        "name": "Folder Date",
        "tab": "b63d1f91.68095",
        "order": 1,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "abfa6f1b6ba40f94",
        "type": "ui_group",
        "name": "Folder Project",
        "tab": "b63d1f91.68095",
        "order": 2,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ba2f06516493c247",
        "type": "ui_group",
        "name": "Folder Analyse",
        "tab": "b63d1f91.68095",
        "order": 5,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a552e218495db1d0",
        "type": "ui_group",
        "name": "Pictures",
        "tab": "b63d1f91.68095",
        "order": 6,
        "disp": true,
        "width": 7,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c27a2d2065b3046c",
        "type": "ui_spacer",
        "z": "31d8721d35506f94",
        "name": "spacer",
        "group": "",
        "order": 15,
        "width": 16,
        "height": 1
    },
    {
        "id": "f42915687348c79a",
        "type": "ui_group",
        "name": "Expert Mode",
        "tab": "3a6bb13f.c9703e",
        "order": 12,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e69195eabe55bed4",
        "type": "ui_group",
        "name": "Hidden_Group",
        "tab": "b63d1f91.68095",
        "order": 3,
        "disp": true,
        "width": "1",
        "collapse": false,
        "className": ""
    },
    {
        "id": "76f69c5fc64fb5e9",
        "type": "ui_group",
        "name": "Navigation",
        "tab": "b63d1f91.68095",
        "order": 7,
        "disp": false,
        "width": 16,
        "collapse": false,
        "className": ""
    },
    {
        "id": "fc44ae89e1931ced",
        "type": "ui_group",
        "name": "Navigation",
        "tab": "8432773e2c23d195",
        "order": 5,
        "disp": false,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d25bf0fbafec8181",
        "type": "ui_spacer",
        "z": "1eaf21c8.f7a21e",
        "name": "spacer",
        "group": "6be36295.0ab324",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "f8f154fc029fc8b8",
        "type": "ui_spacer",
        "z": "cb95299c.2817c8",
        "name": "spacer",
        "group": "46be9c86.dea684",
        "order": 4,
        "width": 6,
        "height": 1
    },
    {
        "id": "e45f90a644417ee2",
        "type": "ui_spacer",
        "z": "cb95299c.2817c8",
        "name": "spacer",
        "group": "46be9c86.dea684",
        "order": 6,
        "width": 6,
        "height": 1
    },
    {
        "id": "cfb44e9dcbe51b09",
        "type": "ui_spacer",
        "z": "baa1e3d9.cb29d",
        "name": "spacer",
        "group": "b5d61bc7.54fe48",
        "order": 1,
        "width": 4,
        "height": 1
    },
    {
        "id": "49307403f41b6ad0",
        "type": "ui_spacer",
        "z": "baa1e3d9.cb29d",
        "name": "spacer",
        "group": "b5d61bc7.54fe48",
        "order": 4,
        "width": 4,
        "height": 1
    },
    {
        "id": "1cb3f845bb7c4f03",
        "type": "ui_spacer",
        "z": "baa1e3d9.cb29d",
        "name": "spacer",
        "group": "5762ede5e23a8f84",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "139f80e7f18d8ec4",
        "type": "ui_spacer",
        "z": "baa1e3d9.cb29d",
        "name": "spacer",
        "group": "5762ede5e23a8f84",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "69c9e39380724c6a",
        "type": "ui_spacer",
        "z": "baa1e3d9.cb29d",
        "name": "spacer",
        "group": "5762ede5e23a8f84",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "a1fafb2d342fe3eb",
        "type": "ui_spacer",
        "z": "baa1e3d9.cb29d",
        "name": "spacer",
        "group": "5762ede5e23a8f84",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "d7ee8f577b04b8a7",
        "type": "ui_spacer",
        "z": "baa1e3d9.cb29d",
        "name": "spacer",
        "group": "5762ede5e23a8f84",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "a4c38335d92eaaf1",
        "type": "ui_spacer",
        "z": "baa1e3d9.cb29d",
        "name": "spacer",
        "group": "5762ede5e23a8f84",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "e00e107dc2d1b6ad",
        "type": "ui_group",
        "name": "Danger Zone Beginner",
        "tab": "2489e51c.eed77a",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7fc4ec05f4d1bf04",
        "type": "ui_spacer",
        "z": "9daf9e2b.019fc",
        "name": "spacer",
        "group": "1be83144.4fe4bf",
        "order": 8,
        "width": 14,
        "height": 1
    },
    {
        "id": "eaeb0c8b577ff0ca",
        "type": "ui_spacer",
        "z": "9daf9e2b.019fc",
        "name": "spacer",
        "group": "1be83144.4fe4bf",
        "order": 9,
        "width": 5,
        "height": 1
    },
    {
        "id": "d8390f3893403be1",
        "type": "ui_spacer",
        "z": "9daf9e2b.019fc",
        "name": "spacer",
        "group": "1be83144.4fe4bf",
        "order": 11,
        "width": 5,
        "height": 1
    },
    {
        "id": "3d069540f78e21c5",
        "type": "ui_spacer",
        "z": "9daf9e2b.019fc",
        "name": "spacer",
        "group": "1be83144.4fe4bf",
        "order": 13,
        "width": 8,
        "height": 1
    },
    {
        "id": "01b5519e453f6b24",
        "type": "ui_spacer",
        "z": "9daf9e2b.019fc",
        "name": "spacer",
        "group": "e00e107dc2d1b6ad",
        "order": 3,
        "width": 6,
        "height": 1
    },
    {
        "id": "6465bdd5.15eb8c",
        "type": "file in",
        "z": "1c24ad9c.bebec2",
        "name": "",
        "filename": "/home/pi/PlanktoScope/config.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 480,
        "y": 60,
        "wires": [
            [
                "15ceb135.6628bf"
            ]
        ],
        "info": "# PlanktoScope Help\nThis Node will read the content of the file named **config.txt** containing all the input placeholders.\n"
    },
    {
        "id": "15ceb135.6628bf",
        "type": "json",
        "z": "1c24ad9c.bebec2",
        "name": "config.json",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 730,
        "y": 60,
        "wires": [
            [
                "ad541674.4791c8"
            ]
        ]
    },
    {
        "id": "7205d267.36adcc",
        "type": "file",
        "z": "1c24ad9c.bebec2",
        "name": "",
        "filename": "/home/pi/PlanktoScope/config.json",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 990,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "2e6ddf51.c0dba",
        "type": "json",
        "z": "1c24ad9c.bebec2",
        "name": "config.json",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 730,
        "y": 160,
        "wires": [
            [
                "7205d267.36adcc"
            ]
        ]
    },
    {
        "id": "ad541674.4791c8",
        "type": "function",
        "z": "1c24ad9c.bebec2",
        "name": "Global Set",
        "func": "global.set(\"config_keys\", Object.keys(msg.payload));\n\nfor (const key in msg.payload) {\n    global.set(key, msg.payload[key]);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "3e9a33c.141384c",
        "type": "inject",
        "z": "1c24ad9c.bebec2",
        "name": "Load config",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 60,
        "wires": [
            [
                "6465bdd5.15eb8c"
            ]
        ]
    },
    {
        "id": "3ad9835.08c937c",
        "type": "function",
        "z": "1c24ad9c.bebec2",
        "name": "get config payload",
        "func": "keys = global.get(\"config_keys\")\n\nvar payload = {}\n\nkeys.forEach(function(item, index, array) {\n  payload[item] = global.get(item);\n})\n\nreturn {\"payload\": payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": [
            [
                "2e6ddf51.c0dba"
            ]
        ]
    },
    {
        "id": "f439663c.8abd3",
        "type": "ui_ui_control",
        "z": "1c24ad9c.bebec2",
        "name": "Connect Event",
        "events": "connect",
        "x": 900,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "1f63860d.5f5efa",
        "type": "file in",
        "z": "4ed26b8b.253504",
        "name": "",
        "filename": "/home/pi/PlanktoScope/hardware.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 380,
        "y": 80,
        "wires": [
            [
                "8c1fda48.d7d828"
            ]
        ],
        "info": "# PlanktoScope Help\nThis Node will read the content of the file named **config.txt** containing all the input placeholders.\n"
    },
    {
        "id": "8c1fda48.d7d828",
        "type": "json",
        "z": "4ed26b8b.253504",
        "name": "Parse JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 650,
        "y": 80,
        "wires": [
            [
                "ddb4b136.fc0b78"
            ]
        ]
    },
    {
        "id": "82099021.9ceb08",
        "type": "file",
        "z": "4ed26b8b.253504",
        "name": "",
        "filename": "/home/pi/PlanktoScope/hardware.json",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 780,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "bb0a8725.a1849",
        "type": "json",
        "z": "4ed26b8b.253504",
        "name": "Create JSON",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 500,
        "y": 200,
        "wires": [
            [
                "82099021.9ceb08"
            ]
        ]
    },
    {
        "id": "f748d952.4b6bc8",
        "type": "inject",
        "z": "4ed26b8b.253504",
        "name": "Load config",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "1f63860d.5f5efa"
            ]
        ]
    },
    {
        "id": "ddb4b136.fc0b78",
        "type": "change",
        "z": "4ed26b8b.253504",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "hardware_conf",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "53d163be.47cf24",
        "type": "function",
        "z": "4ed26b8b.253504",
        "name": "Update and retrieve hardware_conf",
        "func": "// change global\nhardware_conf = global.get(\"hardware_conf\");\n\nif (msg.topic == \"process_pixel_fixed\" && msg.payload == 0){\n    delete hardware_conf[msg.topic]\n    delete msg.topic\n}\n\nif (msg.topic !== null && msg.topic !== undefined){\n    hardware_conf[msg.topic] = msg.payload;\n    global.set(\"hardware_conf\", hardware_conf);\n}\n\nreturn {\"payload\": hardware_conf};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 200,
        "wires": [
            [
                "bb0a8725.a1849"
            ]
        ]
    },
    {
        "id": "7789839d.69b48c",
        "type": "ui_template",
        "z": "eaae323a.31b3",
        "group": "4e0cd5ea.17e59c",
        "name": "Optic Configuration",
        "order": 1,
        "width": 4,
        "height": 4,
        "format": "<md-button ng-click=\"send({payload: {tab:'Optic Configuration'}})\" style=\"height:100%;\">\n    <i class=\"fa fa-eye fa-5x\"></i>\n    <div style=\"margin-top:30px;\">Optic Configuration</div>\n</md-button>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "4e78af2d.90be7"
            ]
        ]
    },
    {
        "id": "6ea6c306.f9c12c",
        "type": "ui_template",
        "z": "eaae323a.31b3",
        "group": "ef590206.24f6",
        "name": "Fluidic Acquisition",
        "order": 1,
        "width": 4,
        "height": 4,
        "format": "<md-button ng-click=\"send({payload: {tab:'Fluidic Acquisition'}})\" style=\"height:100%;\">\n    <i class=\"fa fa-flask fa-5x\"></i>\n    <div style=\"margin-top:30px;\">Fluidic Acquisition</div>\n</md-button>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "4e78af2d.90be7"
            ]
        ]
    },
    {
        "id": "bb9eb153.9e36c",
        "type": "ui_template",
        "z": "eaae323a.31b3",
        "group": "ae8f6620.073358",
        "name": "Segmentation",
        "order": 1,
        "width": 4,
        "height": 4,
        "format": "<md-button ng-click=\"send({payload: {tab:'Segmentation'}})\" style=\"height:100%;\">\n    <i class=\"fa fa-crop fa-5x\"></i>\n    <div style=\"margin-top:30px;\">Segmentation</div>\n</md-button>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 180,
        "wires": [
            [
                "4e78af2d.90be7"
            ]
        ]
    },
    {
        "id": "eaf8ee7f.96f44",
        "type": "ui_template",
        "z": "eaae323a.31b3",
        "group": "196518b2.4d53b7",
        "name": "Gallery",
        "order": 1,
        "width": 4,
        "height": 4,
        "format": "<md-button ng-click=\"send({payload: {tab:'Gallery'}})\" style=\"height:100%;\">\n    <i class=\"fa fa-file-image-o fa-5x\"></i>\n    <div style=\"margin-top:30px;\">Gallery</div>\n</md-button>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 180,
        "y": 260,
        "wires": [
            [
                "4e78af2d.90be7"
            ]
        ]
    },
    {
        "id": "c1b1469.9650eb8",
        "type": "ui_template",
        "z": "eaae323a.31b3",
        "group": "777a7c33.fcd804",
        "name": "System Monitoring",
        "order": 1,
        "width": 4,
        "height": 4,
        "format": "<md-button ng-click=\"send({payload: {tab:'System Monitoring'}})\" style=\"height:100%;\">\n    <i class=\"fa fa-solid fa-thermometer-full fa-5x\"></i>\n    <div style=\"margin-top:30px;\">System Monitoring</div>\n</md-button>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "4e78af2d.90be7"
            ]
        ]
    },
    {
        "id": "abafd6e6.04a5f8",
        "type": "ui_template",
        "z": "eaae323a.31b3",
        "group": "6f97e7ae.270c48",
        "name": "Sample",
        "order": 1,
        "width": 4,
        "height": 4,
        "format": "<md-button ng-click=\"send({payload: {tab:'Sample'}})\" style=\"height:100%;\">\n    <i class=\"fa fa-eyedropper fa-5x\"></i>\n    <div style=\"margin-top:30px;\">Sample</div>\n    <br>\n    In doubt? Start Here!\n</md-button>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 180,
        "y": 60,
        "wires": [
            [
                "4e78af2d.90be7"
            ]
        ]
    },
    {
        "id": "dab82064.26a8d",
        "type": "ui_button",
        "z": "eaae323a.31b3",
        "name": "Unlock button",
        "group": "f3ca28ef.4df0a8",
        "order": 2,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Unlock button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "shutdown",
        "payloadType": "flow",
        "topic": "",
        "topicType": "str",
        "x": 120,
        "y": 580,
        "wires": [
            [
                "6c3a3b4.78cad44"
            ]
        ]
    },
    {
        "id": "1c658761.b852a1",
        "type": "ui_toast",
        "z": "eaae323a.31b3",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "YES PLEASE",
        "cancel": "NO!",
        "raw": false,
        "className": "",
        "topic": "Are you sure?",
        "name": "Confirmation message",
        "x": 800,
        "y": 580,
        "wires": [
            [
                "8f1b8e23.daafe"
            ]
        ]
    },
    {
        "id": "a48ff63f.db5e18",
        "type": "inject",
        "z": "eaae323a.31b3",
        "name": "disabled",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "d58039a9.6e7928"
            ]
        ]
    },
    {
        "id": "b67a7147.65fcd8",
        "type": "ui_button",
        "z": "eaae323a.31b3",
        "name": "Shutdown button",
        "group": "f3ca28ef.4df0a8",
        "order": 3,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Shutdown",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "fa-power-off fa-2x",
        "payload": "Do you want to turn the machine off now?",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 550,
        "y": 580,
        "wires": [
            [
                "1c658761.b852a1"
            ]
        ]
    },
    {
        "id": "d58039a9.6e7928",
        "type": "change",
        "z": "eaae323a.31b3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "shutdown",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "shutdown",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 620,
        "wires": [
            [
                "b67a7147.65fcd8"
            ]
        ]
    },
    {
        "id": "6c3a3b4.78cad44",
        "type": "function",
        "z": "eaae323a.31b3",
        "name": "Toggle",
        "func": "flow.set(\"shutdown\", !flow.get(\"shutdown\"))\nmsg.enabled = flow.get(\"shutdown\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 580,
        "wires": [
            [
                "b67a7147.65fcd8"
            ]
        ]
    },
    {
        "id": "d1153ad6.40d738",
        "type": "ui_template",
        "z": "eaae323a.31b3",
        "group": "f3ca28ef.4df0a8",
        "name": "Shutdown information",
        "order": 1,
        "width": 8,
        "height": 2,
        "format": "<center>To prevent data corruption, please <b>always shutdown the machine</b> before unplugging the unit.\n<br><br>\nRemember to first unlock the shutdown button.\n</center>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 140,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "e08cfcb8.2a67e8",
        "type": "link out",
        "z": "eaae323a.31b3",
        "name": "Home shutdown button",
        "mode": "link",
        "links": [
            "b81b990a.d4dca"
        ],
        "x": 715,
        "y": 700,
        "wires": []
    },
    {
        "id": "ce7087fc.dcc9e8",
        "type": "ui_toast",
        "z": "eaae323a.31b3",
        "position": "dialog",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Turning off now!",
        "name": "Shutdown message",
        "x": 570,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "7d1626a0.deb85",
        "type": "change",
        "z": "eaae323a.31b3",
        "name": "shutdown!",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "shutdown",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 700,
        "wires": [
            [
                "e08cfcb8.2a67e8"
            ]
        ]
    },
    {
        "id": "8f1b8e23.daafe",
        "type": "switch",
        "z": "eaae323a.31b3",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NO!",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 700,
        "wires": [
            [
                "d58039a9.6e7928"
            ],
            [
                "7d1626a0.deb85",
                "281a56c9.ec7902"
            ]
        ]
    },
    {
        "id": "281a56c9.ec7902",
        "type": "change",
        "z": "eaae323a.31b3",
        "name": "Shutdown message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Please wait a minute before disconnecting the machine from its power supply!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 740,
        "wires": [
            [
                "ce7087fc.dcc9e8"
            ]
        ]
    },
    {
        "id": "4e78af2d.90be7",
        "type": "ui_ui_control",
        "z": "eaae323a.31b3",
        "name": "",
        "events": "change",
        "x": 460,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "6907b9e455dd2cfb",
        "type": "function",
        "z": "eaae323a.31b3",
        "name": "Change mode",
        "func": "var activation_msg = {}\n\n//Mode expert\nif (msg.payload === 0){\n    activation_msg.payload = {\"group\":{\"show\":[\"Home_Sample\", \"Home_Optic_Configuration\",\"Home_Fluidic_Acquisition\", \"Home_Segmentation\", \"Home_Download_Files\", \"Home_Gallery\", \"Home_Systeme_Monitoring\", \"Home_Wifi\", \"Home_Administration\", \"Home_Hardware_Settings\", \"Home_Shutdown\", \"Home_Expert Mode\"]}};    \n    flow.set(\"groupe_are_hide\",false)\n    return activation_msg;\n}\n\n//Mode débutant\nelse if (msg.payload === 1){\n    activation_msg.payload = {\"group\":{\"show\":[\"Home_Sample\", \"Home_Optic_Configuration\", \"Home_Fluidic_Acquisition\", \"Home_Segmentation\", \"Home_Download_Files\", \"Home_Gallery\", \"Home_Shutdown\", \"Expert Mode\"],\"hide\":[\"Home_Systeme_Monitoring\", \"Home_Wifi\", \"Home_Administration\", \"Home_Hardware_Settings\"]}};    \n    flow.set(\"groupe_are_hide\",true)\n    return activation_msg;\n}\nelse{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1040,
        "wires": [
            [
                "e6b7cbb8e551345f"
            ]
        ]
    },
    {
        "id": "e6b7cbb8e551345f",
        "type": "ui_ui_control",
        "z": "eaae323a.31b3",
        "name": "show/hide net groups",
        "events": "change",
        "x": 780,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "b03ce7341ff73485",
        "type": "ui_multistate_switch",
        "z": "eaae323a.31b3",
        "name": "Mode selection",
        "group": "f42915687348c79a",
        "order": 3,
        "width": 6,
        "height": 1,
        "label": "",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Expert mode",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Beginner mode",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 380,
        "y": 1000,
        "wires": [
            [
                "093dbbaa548cf9b7",
                "6907b9e455dd2cfb"
            ]
        ]
    },
    {
        "id": "3f695c512bf31d7c",
        "type": "inject",
        "z": "eaae323a.31b3",
        "name": "Default: Beginner mode",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "enable",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 190,
        "y": 1100,
        "wires": [
            [
                "26c009088528fc35"
            ]
        ]
    },
    {
        "id": "dbe54a0a0d8893fc",
        "type": "change",
        "z": "eaae323a.31b3",
        "name": "Change global mode",
        "rules": [
            {
                "t": "set",
                "p": "mode",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 960,
        "wires": [
            [
                "b6e04f52920c6dcb"
            ]
        ]
    },
    {
        "id": "b6e04f52920c6dcb",
        "type": "link out",
        "z": "eaae323a.31b3",
        "name": "out_Home_mode",
        "mode": "link",
        "links": [
            "127fd2e4447c6ad1",
            "4dd140903cddda10",
            "713395d7523b16e8",
            "7164566e38c0e242",
            "87171ccda60d4390",
            "97f9c6da2e1095d2",
            "a45e550cb5e1c1d1"
        ],
        "x": 915,
        "y": 960,
        "wires": []
    },
    {
        "id": "c840a7c66cf51acc",
        "type": "link in",
        "z": "eaae323a.31b3",
        "name": "in_Home_mode",
        "links": [
            "082af9181824a196",
            "319bff50477bc5fc",
            "4cfbba68449a28e2",
            "7a7343ef8627ec57",
            "a85a1f2d75981a8c",
            "bfce8e77727b9fbf",
            "c2d9b90e27bc022c",
            "de32bd4b6ba8dfd3",
            "d3892bf83549fd59"
        ],
        "x": 235,
        "y": 1000,
        "wires": [
            [
                "b03ce7341ff73485"
            ]
        ]
    },
    {
        "id": "093dbbaa548cf9b7",
        "type": "function",
        "z": "eaae323a.31b3",
        "name": "Get mode value",
        "func": "if (msg.payload != global.get(\"mode\")){\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 960,
        "wires": [
            [
                "dbe54a0a0d8893fc"
            ]
        ]
    },
    {
        "id": "09fc6c5a17515421",
        "type": "ui_template",
        "z": "eaae323a.31b3",
        "group": "be8a37d06ca38f9f",
        "name": "Wifi",
        "order": 1,
        "width": 4,
        "height": 4,
        "format": "<md-button ng-click=\"send({payload: {tab:'Wifi'}})\" style=\"height:100%;\">\n    <i class=\"fa fa-wifi fa-5x\"></i>\n    <div style=\"margin-top:30px;\">Wifi Management</div>\n</md-button>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "4e78af2d.90be7"
            ]
        ]
    },
    {
        "id": "aa811e6ccae55a53",
        "type": "ui_template",
        "z": "eaae323a.31b3",
        "group": "0c57124c029e9fda",
        "name": "Administration",
        "order": 1,
        "width": 4,
        "height": 4,
        "format": "<md-button ng-click=\"send({payload: {tab:'Administration'}})\" style=\"height:100%;\">\n    <i class=\"fa fa-solid fa-gear fa-5x\"></i>\n    <div style=\"margin-top:30px;\">Administration</div>\n</md-button>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 380,
        "wires": [
            [
                "4e78af2d.90be7"
            ]
        ]
    },
    {
        "id": "dad4fc7b8756f103",
        "type": "ui_template",
        "z": "eaae323a.31b3",
        "group": "cde1fbd651fd9e46",
        "name": "Hardware Settings",
        "order": 1,
        "width": 4,
        "height": 4,
        "format": "<md-button ng-click=\"send({payload: {tab:'Hardware Settings'}})\" style=\"height:100%;\">\n    <i class=\"fa fa-solid fa-microchip fa-5x\"></i>\n    <div style=\"margin-top:30px;\">Hardware Settings</div>\n</md-button>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "4e78af2d.90be7"
            ]
        ]
    },
    {
        "id": "40fae85c9d0ed571",
        "type": "ui_template",
        "z": "eaae323a.31b3",
        "group": "6103feeeaa303a03",
        "name": "Download Files",
        "order": 1,
        "width": 4,
        "height": 4,
        "format": "<md-button ng-click=\"send({payload: {tab:'Download Files'}})\" style=\"height:100%;\">\n    <i class=\"fa fa-solid fa-download fa-5x\"></i>\n    <div style=\"margin-top:30px;\">Download Files</div>\n</md-button>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "4e78af2d.90be7"
            ]
        ]
    },
    {
        "id": "ac20dc1a08cc9deb",
        "type": "ui_button",
        "z": "eaae323a.31b3",
        "name": "",
        "group": "f42915687348c79a",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Unlock Expert Mode",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Unlock Expert Mode ?",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 140,
        "y": 840,
        "wires": [
            [
                "f5e823bad288c01a"
            ]
        ]
    },
    {
        "id": "8e250b5519f3236d",
        "type": "function",
        "z": "eaae323a.31b3",
        "name": "Toggle",
        "func": "enable_mode = flow.get(\"enable_mode\")\n\nif (enable_mode==undefined) {\n    enable_mode = false\n}\n\nflow.set(\"enable_mode\",!enable_mode)\n\nmsg.enable = !enable_mode;\n\nmsg.payload=global.get(\"mode\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 840,
        "wires": [
            [
                "b03ce7341ff73485"
            ]
        ]
    },
    {
        "id": "c9cffdfa0fb8be5a",
        "type": "ui_toast",
        "z": "eaae323a.31b3",
        "d": true,
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "YES",
        "cancel": "NO",
        "raw": false,
        "className": "",
        "topic": "Are you sure ?",
        "name": "Confirmation message",
        "x": 520,
        "y": 880,
        "wires": [
            [
                "8cf6f55322d7a483"
            ]
        ]
    },
    {
        "id": "8cf6f55322d7a483",
        "type": "switch",
        "z": "eaae323a.31b3",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "YES",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 730,
        "y": 880,
        "wires": [
            [
                "8e250b5519f3236d"
            ]
        ]
    },
    {
        "id": "de32bd4b6ba8dfd3",
        "type": "link out",
        "z": "eaae323a.31b3",
        "name": "",
        "mode": "link",
        "links": [
            "127fd2e4447c6ad1",
            "4dd140903cddda10",
            "713395d7523b16e8",
            "87171ccda60d4390",
            "97f9c6da2e1095d2",
            "a45e550cb5e1c1d1",
            "c840a7c66cf51acc"
        ],
        "x": 895,
        "y": 1100,
        "wires": []
    },
    {
        "id": "26c009088528fc35",
        "type": "function",
        "z": "eaae323a.31b3",
        "name": "Toggle",
        "func": "flow.set(\"enable_mode\",msg.enable)\nglobal.set(\"mode\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1100,
        "wires": [
            [
                "de32bd4b6ba8dfd3"
            ]
        ]
    },
    {
        "id": "f5e823bad288c01a",
        "type": "switch",
        "z": "eaae323a.31b3",
        "name": "",
        "property": "enable_mode",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 840,
        "wires": [
            [
                "8e250b5519f3236d"
            ],
            [
                "c9cffdfa0fb8be5a",
                "8e250b5519f3236d"
            ]
        ]
    },
    {
        "id": "41ea337c0fca3ab0",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "f42915687348c79a",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Use this button if you want to switch to expert mode (unlock and then switch)",
        "format": "",
        "layout": "row-center",
        "className": "",
        "x": 310,
        "y": 800,
        "wires": []
    },
    {
        "id": "4557d689.a4fa88",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_ship",
        "label": "Name of the ship",
        "tooltip": "",
        "group": "3e1ba03d.f01d8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "sample_ship",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1190,
        "y": 180,
        "wires": [
            [
                "9f501f49.45645"
            ]
        ]
    },
    {
        "id": "fcfc31ae.af3af",
        "type": "ui_dropdown",
        "z": "b771c342.49603",
        "name": "sample_sampling_gear",
        "label": "Sampling gear*",
        "tooltip": "",
        "place": "Choose from list",
        "group": "3e1ba03d.f01d8",
        "order": 7,
        "width": 10,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "sample_sampling_gear",
        "topicType": "str",
        "className": "",
        "x": 770,
        "y": 280,
        "wires": [
            [
                "a2438617d37b4e22"
            ]
        ]
    },
    {
        "id": "82c5fc77.59c97",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_operator",
        "label": "Name of the operator*",
        "tooltip": "",
        "group": "3e1ba03d.f01d8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "sample_operator",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1210,
        "y": 140,
        "wires": [
            [
                "9f501f49.45645",
                "52af9ac0.60eb24"
            ]
        ]
    },
    {
        "id": "9c882b37.fde668",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_project",
        "label": "Name of the project*",
        "tooltip": "",
        "group": "3e1ba03d.f01d8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "sample_project",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1200,
        "y": 100,
        "wires": [
            [
                "9f501f49.45645"
            ]
        ]
    },
    {
        "id": "94eb4221.9b92c",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_id",
        "label": "Station ID*",
        "tooltip": "",
        "group": "3e1ba03d.f01d8",
        "order": 4,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "sample_id",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 770,
        "y": 560,
        "wires": [
            [
                "9f501f49.45645"
            ]
        ]
    },
    {
        "id": "9f501f49.45645",
        "type": "function",
        "z": "b771c342.49603",
        "name": "set global",
        "func": "global.set(msg.topic,msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "222c851d.5d0a3a",
        "type": "ui_ui_control",
        "z": "b771c342.49603",
        "name": "",
        "events": "change",
        "x": 1780,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "52f6b103.1efb6",
        "type": "ui_toast",
        "z": "b771c342.49603",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 2030,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "986d960a.c75908",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Check form",
        "func": "var sample_project= global.get(\"sample_project\");\nvar sample_id= global.get(\"sample_id\");\nvar sample_operator= global.get(\"sample_operator\");\nvar sample_sampling_gear= global.get(\"sample_sampling_gear\");\nvar object_lat= global.get(\"object_lat\");\nvar object_lon= global.get(\"object_lon\");\nvar object_date= global.get(\"object_date\");\nvar object_time= global.get(\"object_time\");\nif (sample_project === undefined || sample_project === \"\" || sample_project === \"None\") {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Sample project\"\n    return [null, msg];\n}\n\nelse if (sample_id === undefined || sample_id === \"\") {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Sample ID\"\n    return [null, msg];\n}\n\nelse if (sample_operator === undefined || sample_operator === \"\" || sample_operator === \"None\") {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Sample operator\"\n    return [null, msg];\n}\n\nelse if (sample_sampling_gear === undefined || sample_sampling_gear === \"\") {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Sample sampling gear\"\n    return [null, msg];\n}\n\nelse if (object_lat === undefined || object_lat === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Latitude of sample\"\n    return [null, msg];\n}\n\nelse if (object_lon === undefined || object_lon === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Longitude of sample\"\n    return [null, msg];\n}\n\nelse if (object_date === undefined || object_date === \"\") {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Date of sample\"\n    return [null, msg];\n}\n\nelse if (object_time === undefined || object_time === \"\") {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Time of sample\"\n    return [null, msg];\n}\nelse if (sample_sampling_gear.startsWith(\"net\")){\n    var object_lat_end = global.get(\"object_lat_end\");\n    var object_lon_end = global.get(\"object_lon_end\");\n    var object_date_end = global.get(\"object_date_end\");\n    var object_time_end = global.get(\"object_time_end\");\n    var sample_gear_net_opening = global.get(\"sample_gear_net_opening\");\n\n    if (object_lat_end === undefined || object_lat_end === null) {\n        msg.topic = \"Missing entry :\"\n        msg.payload = \"Latitude of retrieval\"\n        return [null, msg];\n    }\n    \n    else if (object_lon_end === undefined || object_lon_end === null) {\n        msg.topic = \"Missing entry :\"\n        msg.payload = \"Longitude of retrieval\"\n        return [null, msg];\n    }\n    \n    else if (object_date_end === undefined || object_date_end === \"\") {\n        msg.topic = \"Missing entry :\"\n        msg.payload = \"Date of retrieval\"\n        return [null, msg];\n    }\n    \n    else if (object_time_end === undefined || object_time_end === \"\") {\n        msg.topic = \"Missing entry :\"\n        msg.payload = \"Time of retrieval\"\n        return [null, msg];\n    }\n    \n    else if (sample_gear_net_opening === undefined || sample_gear_net_opening === \"\") {\n        msg.topic = \"Missing entry :\"\n        msg.payload = \"Net opening dimension\"\n        return [null, msg];\n    }\n    \n    if (sample_sampling_gear == \"net_decknet\"){\n        var sample_total_volume = global.get(\"sample_total_volume\");\n        if (sample_total_volume === undefined || sample_total_volume === \"\") {\n            msg.topic = \"Missing entry :\"\n            msg.payload = \"Decknet flowmeter readings\"\n            return [null, msg];\n        }\n    }\n}\nmsg.topic = \"config_save\"\nmsg.payload={\"tab\":\"Optic Configuration\"};\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 160,
        "wires": [
            [
                "726a7822.cd6298",
                "e2b277c1.07283"
            ],
            [
                "52f6b103.1efb6"
            ]
        ],
        "outputLabels": [
            "message",
            "error"
        ]
    },
    {
        "id": "18f44504.cac66b",
        "type": "gpsd",
        "z": "b771c342.49603",
        "name": "",
        "hostname": "localhost",
        "port": "2947",
        "tpv": true,
        "sky": false,
        "info": false,
        "device": false,
        "gst": false,
        "att": false,
        "x": 2230,
        "y": 260,
        "wires": [
            [
                "258b4562.9f778a",
                "54e37580.fdc31c",
                "cc21ca16.b92928",
                "4a4de52c.cf2884",
                "73c4a14a.9b93c8",
                "073c7d4ce2c7b3a7"
            ]
        ]
    },
    {
        "id": "726a7822.cd6298",
        "type": "ui_ui_control",
        "z": "b771c342.49603",
        "name": "",
        "events": "change",
        "x": 2020,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "16de754c.cc969b",
        "type": "ui_button",
        "z": "b771c342.49603",
        "name": "",
        "group": "5517c651.b2f668",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Previous",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_return",
        "payload": "{\"tab\":\"Home\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 1560,
        "y": 120,
        "wires": [
            [
                "222c851d.5d0a3a"
            ]
        ]
    },
    {
        "id": "84f3d040.5f7ea",
        "type": "ui_button",
        "z": "b771c342.49603",
        "name": "",
        "group": "5517c651.b2f668",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Continue",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "icon": "keyboard_tab",
        "payload": "{\"tab\":\"Home\"}",
        "payloadType": "json",
        "topic": "",
        "x": 1560,
        "y": 160,
        "wires": [
            [
                "986d960a.c75908"
            ]
        ]
    },
    {
        "id": "5a811caf.0f3144",
        "type": "function",
        "z": "b771c342.49603",
        "name": "get sample_ship",
        "func": "global.set(\"sample_ship\", \"None\");\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "45911c98.2bd83c",
        "type": "function",
        "z": "b771c342.49603",
        "name": "get sample_id",
        "func": "msg.payload = msg.payload.sample_id;\n\nmode = global.get(\"mode\")\n\nif(mode == 0) {\n    msg.enabled = true\n} else {\n    msg.enabled = false\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 240,
        "wires": [
            [
                "94eb4221.9b92c"
            ]
        ]
    },
    {
        "id": "a3272681.f271c8",
        "type": "function",
        "z": "b771c342.49603",
        "name": "get sample_sampling_gear",
        "func": "msg.topic = \"sample_sampling_gear\"\nif (msg.payload.sample_sampling_gear === undefined){\n    msg.payload = \"single_location\";\n}\nelse\n{\n    msg.payload = msg.payload.sample_sampling_gear;\n}\n\nglobal.set(\"sample_sampling_gear\",msg.payload)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 280,
        "wires": [
            [
                "b7c6087569130821"
            ]
        ]
    },
    {
        "id": "a6907a38.f6611",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "b771c342.49603",
        "name": "",
        "env": [],
        "x": 70,
        "y": 220,
        "wires": [
            [
                "5a811caf.0f3144",
                "45911c98.2bd83c",
                "8dff1648.82e42",
                "9f04c5ec.75f3d8",
                "f408a273.4fb538",
                "e73fd87d.d24e4",
                "489c8e06.cc7d6",
                "a3272681.f271c8",
                "b4bef47fd5679587"
            ]
        ]
    },
    {
        "id": "e2b277c1.07283",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "b771c342.49603",
        "name": "",
        "env": [],
        "x": 2010,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "7116e906.9f50f",
        "type": "ui_text",
        "z": "b771c342.49603",
        "group": "fc5e4e6f.5b1c8",
        "order": 1,
        "width": 10,
        "height": 1,
        "name": "GPS Status Display",
        "label": "GPS Status:",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 2770,
        "y": 300,
        "wires": []
    },
    {
        "id": "9c7f7fc9.c8d3a",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "object_depth_max",
        "label": "Max sampling depth (m)",
        "tooltip": "in m",
        "group": "3e1ba03d.f01d8",
        "order": 13,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "object_depth_max",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 790,
        "y": 600,
        "wires": [
            [
                "9f501f49.45645"
            ]
        ]
    },
    {
        "id": "317eeeb7.8d3042",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "object_depth_min",
        "label": "Min sampling depth (m)",
        "tooltip": "in m",
        "group": "3e1ba03d.f01d8",
        "order": 11,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "object_depth_min",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 790,
        "y": 640,
        "wires": [
            [
                "9f501f49.45645"
            ]
        ]
    },
    {
        "id": "52af9ac0.60eb24",
        "type": "link out",
        "z": "b771c342.49603",
        "name": "Sample Operator",
        "links": [
            "35eb925e.5f8016"
        ],
        "x": 1395,
        "y": 140,
        "wires": []
    },
    {
        "id": "cbb123ab.fd3428",
        "type": "ui_ui_control",
        "z": "b771c342.49603",
        "name": "show/hide net groups",
        "events": "change",
        "x": 1620,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "642ff403.1ed91c",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_concentrated_sample_volume",
        "label": "Concentrated sample volume (mL)",
        "tooltip": "Volume extracted from the net codend (in mL)",
        "group": "3e1ba03d.f01d8",
        "order": 14,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "sample_concentrated_sample_volume",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 850,
        "y": 800,
        "wires": [
            [
                "9f501f49.45645"
            ]
        ]
    },
    {
        "id": "e967b844.46aa48",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_gear_net_opening",
        "label": "Net opening dimension (mm)",
        "tooltip": "Size of the net mouth opening (in mm)",
        "group": "cf5d9f0e.d57e7",
        "order": 7,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "sample_gear_net_opening",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 820,
        "y": 460,
        "wires": [
            [
                "9f501f49.45645"
            ]
        ]
    },
    {
        "id": "c0ce5626.b6c5",
        "type": "ui_toast",
        "z": "b771c342.49603",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1810,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "c33f1124.af6688",
        "type": "ui_form",
        "z": "b771c342.49603",
        "name": "sample_location",
        "label": "",
        "group": "cef1e703.bcf3c8",
        "order": 1,
        "width": 10,
        "height": 1,
        "options": [
            {
                "label": "Latitude (36.574439°N or 36°57'44.39\" N)",
                "value": "object_lat",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Longitude (110.42100°W or 110°4'21.00\" W)",
                "value": "object_lon",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Date (YYYY-MM-DD, UTC)",
                "value": "object_date",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Time (HH:MM, UTC 24h)",
                "value": "object_time",
                "type": "time",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "object_lat": "",
            "object_lon": "",
            "object_date": "",
            "object_time": ""
        },
        "payload": "",
        "submit": "Validate",
        "cancel": "Reset",
        "topic": "sample_location",
        "topicType": "str",
        "splitLayout": false,
        "className": "sample_location",
        "x": 780,
        "y": 900,
        "wires": [
            [
                "2ea7ccf8ea31c39b"
            ]
        ]
    },
    {
        "id": "358908cd.416ab",
        "type": "ui_form",
        "z": "b771c342.49603",
        "name": "net_throw_location",
        "label": "Net Throw Location",
        "group": "cf5d9f0e.d57e7",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Latitude (36.574439°N or 36°57'44.39\" N)",
                "value": "object_lat",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Longitude (110.42100°W or 110°4'21.00\" W)",
                "value": "object_lon",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Date (YYYY-MM-DD, UTC)",
                "value": "object_date",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Time (HH:MM, UTC 24h)",
                "value": "object_time",
                "type": "time",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "object_lat": "",
            "object_lon": "",
            "object_date": "",
            "object_time": ""
        },
        "payload": "",
        "submit": "Validate",
        "cancel": "",
        "topic": "net_throw_location",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 790,
        "y": 940,
        "wires": [
            [
                "2ea7ccf8ea31c39b"
            ]
        ]
    },
    {
        "id": "56d40584.eff4e4",
        "type": "ui_form",
        "z": "b771c342.49603",
        "name": "net_retrieval_location",
        "label": "Net Retrieval Location",
        "group": "cf5d9f0e.d57e7",
        "order": 2,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Latitude (36.574439°N or 36°57'44.39\" N)",
                "value": "object_lat_end",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Longitude (110.42100°W or 110°4'21.00\" W)",
                "value": "object_lon_end",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Date (YYYY-MM-DD, UTC)",
                "value": "object_date_end",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Time (HH:MM, UTC 24h)",
                "value": "object_time_end",
                "type": "time",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "object_lat_end": "",
            "object_lon_end": "",
            "object_date_end": "",
            "object_time_end": ""
        },
        "payload": "",
        "submit": "Validate",
        "cancel": "",
        "topic": "net_retrieval_location",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 800,
        "y": 980,
        "wires": [
            [
                "2ea7ccf8ea31c39b"
            ]
        ]
    },
    {
        "id": "14658615.47c862",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Validate Location / Timestamp",
        "func": "// Code added here will be run once\n// whenever the node is started.\nfunction ConvertDMSToDD(input) {\n    // Input Format 36°57.4439'N, 110°42'10.78\"W\n    // From https://stackoverflow.com/questions/1140189/converting-latitude-and-longitude-to-decimal-values\n\n    if(!input.match(/\\./)){\n        input = input.replace('\"', '.00\"');\n    }\n    \n    if (!input.match(/\\d+°\\d+\\'+\\d+.+\\d\" [NSEW]/)){\n    \treturn \"parsing error 1\"\n    }\n    var parts = input.split(/[^\\d.\\w]+/)\n    if (parts.length != 4){\n    \treturn \"parsing error 2\"\n    }\n    var dd = Number(parts[0]) + Number(parts[1])/60 + Number(parts[2])/3600\n    return dd.toFixed(6) + parts[3]\n}\n\nfunction ValidateCoordinates(input, lat){\n    // Input Format 36.574439°N, 110.42100°W\n    // Or 36°57.4439'N, 110°4.2100'W\n    if (input.match(\"'\")){\n        input = ConvertDMSToDD(input)\n    }\n    var error = {}\n\n    if (input.startsWith(\"parsing error\")){\n        error.topic = \"Error with the \"\n        error.payload = \"You need to respect the format example, 36.574439°N or 36°57'44.39\\\"N\"\n        return [null, error]\n    }\n    \n    var direction = input.match(/[NSEW]/)\n    var position = input.match(/[\\+\\-\\d\\.]+/)\n    \n    if (direction === null){\n        error.topic = \"Error with the \"\n        error.payload = \"You need to explicitely enter N/S/E/W\"\n        return [null, error]\n    }\n    \n    // Test that position is only made of digits!\n    if(/^[\\+\\-]/.test(position)){\n        error.topic = \"Error with the \"\n        error.payload = \"Use of +/- sign is inconsistent with N/S/E/W letter! Please only use N/S/E/W!\"\n        return [null, error]\n    }\n    \n    var dd = Number(position)\n    if (lat){\n        // Check latitude\n        if (direction == \"S\" || direction == \"N\") {\n            if (dd>90.0){\n                error.topic = \"Error with the \"\n                error.payload = \"Latitude is more than 90°\"\n                return [null, error]\n            }\n        }\n        if (direction == \"W\" || direction == \"E\") {\n            error.topic = \"Error with the \"\n            error.payload = \"This is not a Latitude!\"\n            return [null, error]\n        }\n    }\n    else{\n        // Check longitude\n        if (direction == \"W\" || direction == \"E\") {\n            if (dd>180.0){\n                error.topic = \"Error with the \"\n                error.payload = \"Longitude is more than 180°\"\n                return [null, error]\n            }\n        }\n        if (direction == \"N\" || direction == \"S\") {\n            error.topic = \"Error with the \"\n            error.payload = \"This is not a Longitude!\"\n            return [null, error]\n        }\n    }\n    \n    if (direction == \"S\" || direction == \"W\") {\n        dd = dd * -1\n    } // Don't do anything for N or E\n    return [dd.toFixed(4), null]\n    \n}\n\nfunction ValidateDate(input){\n    // Input Format 2020-12-25\n    var error = {};\n    \n    if (! /20\\d{2}-[0-1]\\d-[0-3]\\d/.test(input)){\n        error.topic = \"Error with the date\";\n        error.payload = \"The date should respect the ISO format YYYY-MM-DD\";\n        return [null, error];\n    }\n    else {\n        var date = input.match(/\\d+/g);\n        if (!((2000 < date[0]) && (date[0] < 2100))){\n            error.topic = \"Error with the date\"\n            error.payload = \"The year should be between 2000 and 2100\"\n            return [null, error]\n        }\n        else if (!((0 < date[1]) && (date[1] <= 12))){\n            error.topic = \"Error with the date\"\n            error.payload = \"The month should be between 01 and 12\"\n            return [null, error]\n        }\n        else if (!((0 < date[2]) && (date[2] <= 31))){\n            error.topic = \"Error with the date\"\n            error.payload = \"The day should be between 01 and 31\"\n            return [null, error]\n        }\n    }\n    return [input, null]//.replace(/-/g, '')\n}\n\nfunction ValidateTime(input){\n    // Input Format 12:00\n    var error = {}\n    \n    if (! /[0-2]?\\d:[0-5]\\d/.test(input)){\n        error.topic = \"Error with the time\"\n        error.payload = \"The date should respect the ISO format HH:MM\"\n        return [null, error]\n    }\n    else {\n        var time = input.match(/\\d+/g)\n        \n        if (!((0 <= time[0]) && (time[0] < 24))){\n            error.topic = \"Error with the time\"\n            error.payload = \"The hours should be 0 and 23.\"\n            return [null, error]\n        }\n        else if (!((0 <= time[1]) && (time[1] < 60))){\n            error.topic = \"Error with the time\"\n            error.payload = \"The minutes should be between 0 and 59\"\n            return [null, error]\n        }\n    }\n    return [input, null]//.replace(/:/g, '')\n}\n\n\nvar ret\nvar payload_for_form = {payload:{}}\nmsg.valid = false\n\nif (msg.topic == \"culture_timestamp\"){\n    ret = ValidateDate(msg.payload.object_date)\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" of the sample\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_date\", ret[0])\n    \n    ret = ValidateTime(msg.payload.object_time)\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" of the sample\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_time\", ret[0])\n    return [{topic: \"Date and time format valid!\", payload: \"All good!\", valid: true}, payload_for_form]\n}\nelse if (msg.topic == \"net_retrieval_location\"){\n    ret = ValidateCoordinates(msg.payload.object_lat_end, true);\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" Latitude\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_lat_end\", ret[0])\n\n    ret = ValidateCoordinates(msg.payload.object_lon_end, false)\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" Longitude\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_lon_end\", ret[0]);\n    \n    ret = ValidateDate(msg.payload.object_date_end)\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" of the sample retrieval\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_date_end\", ret[0])\n    \n    ret = ValidateTime(msg.payload.object_time_end)\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" of the sample retrieval\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_time_end\", ret[0])\n}\nelse{\n    ret = ValidateCoordinates(msg.payload.object_lat, true);\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" Latitude\";\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_lat\", ret[0]);\n    payload_for_form.payload[\"object_lat_end\"] = msg.payload.object_lat;\n    \n    ret = ValidateCoordinates(msg.payload.object_lon, false);\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" Longitude\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_lon\", ret[0])\n    payload_for_form.payload[\"object_lon_end\"] = msg.payload.object_lon;\n\n    ret = ValidateDate(msg.payload.object_date)\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" of the sample\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_date\", ret[0])\n    payload_for_form.payload[\"object_date_end\"] = msg.payload.object_date;\n    \n    ret = ValidateTime(msg.payload.object_time)\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" of the sample\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_time\", ret[0])\n    payload_for_form.payload[\"object_time_end\"] = msg.payload.object_time;\n}\nreturn [{topic: \"Coordinates valid!\", payload: \"All good!\", valid: true}, payload_for_form]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 900,
        "wires": [
            [
                "c0ce5626.b6c5",
                "9a18a4b4.178448"
            ],
            [
                "3e141eac389fdd9f",
                "8b97db46845cf99a"
            ]
        ],
        "inputLabels": [
            "Location form data"
        ],
        "outputLabels": [
            "Message",
            "Location validated"
        ]
    },
    {
        "id": "46eb1bf8.3dc5f4",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Net check",
        "func": "var decknet = {}\nvar activation_msg = {}\n\nif (msg.payload.startsWith(\"net_decknet\")){\n    decknet.enabled = true;\n}\nelse {\n    decknet.enabled = false;\n}\n\nif (msg.payload.startsWith(\"net\")){\n    activation_msg.payload = {\"group\":{\"show\":[\"Sample_Net_Metadata\", \"Sample_Prefill_net\", \"Sample_Summary_Net\"],\"hide\":[\"Sample_Sample_Location\",\"Sample_Culture_Date_and_Time\", \"Sample_Prefill_sample\", \"Sample_Summary\", \"Sample_Hidden_Groupe\"]}};\n}\nelse if (msg.payload != \"culture\" && msg.payload != \"test\"){\n    activation_msg.payload = {\"group\":{\"show\":[\"Sample_Hidden_Groupe\",\"Sample_Sample_Location\",\"Sample_Prefill_sample\", \"Sample_Summary\"], \"hide\":[\"Sample_Net_Metadata\",\"Sample_Culture_Date_and_Time\",\"Sample_Prefill_net\", \"Sample_Summary_Net\"]}};\n}\n\n\nreturn [decknet, activation_msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 600,
        "wires": [
            [
                "516375fd.2ed61c",
                "470e382a.25691",
                "fbe32ac8.ff6a38"
            ],
            [
                "cbb123ab.fd3428"
            ]
        ],
        "outputLabels": [
            "decknet activation",
            "group display control"
        ]
    },
    {
        "id": "516375fd.2ed61c",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_total_flowmeter_start",
        "label": "Decknet flowmeter start",
        "tooltip": "in L",
        "group": "cf5d9f0e.d57e7",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": "300",
        "topic": "sample_total_flowmeter_start",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1640,
        "y": 580,
        "wires": [
            [
                "e9bc112c.eb75f8"
            ]
        ]
    },
    {
        "id": "470e382a.25691",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_total_flowmeter_end",
        "label": "Decknet flowmeter end",
        "tooltip": "in L",
        "group": "cf5d9f0e.d57e7",
        "order": 6,
        "width": 5,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": "300",
        "topic": "sample_total_flowmeter_end",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1640,
        "y": 620,
        "wires": [
            [
                "e9bc112c.eb75f8"
            ]
        ]
    },
    {
        "id": "fbe32ac8.ff6a38",
        "type": "ui_template",
        "z": "b771c342.49603",
        "group": "cf5d9f0e.d57e7",
        "name": "Decknet flowmeter read",
        "order": 4,
        "width": 10,
        "height": 2,
        "format": "<div style=\"line-height: 100%;\">\n    <p class=\"formlabel\" style=\"font-size: larger;\">Decknet flowmeter readings</p>\n    <p style=\"font-size: smaller;\">Those values are used to calculate <font style=\"font-family: mono;\">sample_total_volume</font>. Values are in L.</p>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1630,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "f408a273.4fb538",
        "type": "function",
        "z": "b771c342.49603",
        "name": "get sample_gear_net_opening",
        "func": "if (msg.payload.sample_gear_net_opening === null){\n    msg.payload = 0;\n    global.set(\"sample_gear_net_opening\",msg.payload);\n}\nelse\n{\n    msg.payload = msg.payload.sample_gear_net_opening;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 400,
        "wires": [
            [
                "e967b844.46aa48"
            ]
        ]
    },
    {
        "id": "8dff1648.82e42",
        "type": "function",
        "z": "b771c342.49603",
        "name": "get object_depth_max",
        "func": "if (msg.payload.object_depth_max === null){\n    msg.payload = 0;\n    global.set(\"object_depth_max\",msg.payload);\n}\nelse\n{\n    msg.payload = msg.payload.object_depth_max;\n}\n\nmode = global.get(\"mode\")\n\nif(mode == 0) {\n    msg.enabled = true\n} else {\n    msg.enabled = false\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 320,
        "wires": [
            [
                "9c7f7fc9.c8d3a"
            ]
        ]
    },
    {
        "id": "9f04c5ec.75f3d8",
        "type": "function",
        "z": "b771c342.49603",
        "name": "get object_depth_min",
        "func": "if (msg.payload.object_depth_min === null){\n    msg.payload = 0;\n    global.set(\"object_depth_min\",msg.payload);\n}\nelse\n{\n    msg.payload = msg.payload.object_depth_min;\n}\n\nmode = global.get(\"mode\")\n\nif(mode == 0) {\n    msg.enabled = true\n} else {\n    msg.enabled = false\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 360,
        "wires": [
            [
                "317eeeb7.8d3042"
            ]
        ]
    },
    {
        "id": "9a18a4b4.178448",
        "type": "function",
        "z": "b771c342.49603",
        "name": "calculate sample_total_volume",
        "func": "\n/*object_lat = 33.95 \nobject_lon = 118.4  \nobject_lat_end = 40.6333 \nobject_lon_end = 73.78333\nsample_gear_net_opening = 40*/\n\n// Copyright 1997 Ed Williams. All rights reserved\n// Adapted by Romain Bazile - Ocean Trotter - 01-2021\n\ndecpl=4  // Dec places of minutes output\n\nellipse = {\"name\":\"WSG84\", \"a\":6378.137/1.852, \"invf\":298.257223563}\n\nfunction ComputeDistance(lat1, lon1, lat2, lon2){\n    var d,crs12,crs21\n    var argacos\n    var a,invf\n    \n    // lat and lon in radian\n    lat1=(Math.PI/180)*lat1\n    lat2=(Math.PI/180)*lat2\n    lon1=(Math.PI/180)*lon1\n    lon2=(Math.PI/180)*lon2\n    \n    //alert(\"lat1=\" + lat1 + \"lon1=\" + lon1 +\"\\nlat2=\" +lat2+ \"lon2=\"+lon2)\n    \n    /* get distance conversion factor */\n    dc=1.852 //km\n    //alert(\"dc=\" +dc)\n    \n    //showProps(ellipse,\"ellipse\")\n\n    // elliptic code\n    d=crsdist_ell(lat1,-lon1,lat2,-lon2,ellipse)  // ellipse uses East negative\n    d=d*dc  // go to physical units\n\n    //alert(\"d=\"+d+\"  crs12=\"+crs12+\"   crs21=\"+crs21)\n    return d\n}\n\nfunction crsdist(lat1,lon1,lat2,lon2){ // radian args\n    /* compute course and distance (spherical) */\n    if ((lat1+lat2===0) && (Math.abs(lon1-lon2)==Math.PI) && \n    (Math.abs(lat1) != (Math.PI/180)*90)){\t\n    \t//alert(\"Course between antipodal points is undefined\")\n    }\n    d = Math.acos(Math.sin(lat1)*Math.sin(lat2)+Math.cos(lat1)*Math.cos(lat2)*Math.cos(lon1-lon2))\n    return d\n}\n\nfunction crsdist_ell(glat1,glon1,glat2,glon2,ellipse){\n    // glat1 initial geodetic latitude in radians N positive \n    // glon1 initial geodetic longitude in radians E positive \n    // glat2 final geodetic latitude in radians N positive \n    // glon2 final geodetic longitude in radians E positive \n\n    a=ellipse.a\n    f=1/ellipse.invf\n    //alert(\"a=\"+a+\" f=\"+f)\n\n    var r, tu1, tu2, cu1, su1, cu2, s1, b1, f1\n    var x, sx, cx, sy, cy,y, sa, c2a, cz, e, c, d\n    var EPS= 0.00000000005\n    var faz, baz, s\n    var iter=1\n    var MAXITER=100\n\n    if ((glat1+glat2===0) && (Math.abs(glon1-glon2)==Math.PI)){\n        //alert(\"Course and distance between antipodal points is undefined\")\n        glat1=glat1+0.00001 // allow algorithm to complete\n    }\n\n    if (glat1==glat2 && (glon1==glon2 || Math.abs(Math.abs(glon1-glon2)-2*Math.PI) <  EPS)){\n        //alert(\"Points 1 and 2 are identical- course undefined\")\n        out= {}\n        out.d=0\n        out.crs12=0\n        out.crs21=Math.PI\n        return out\n    }\n    \n    r = 1 - f\n    tu1 = r * Math.tan (glat1)\n    tu2 = r * Math.tan (glat2)\n    cu1 = 1 / Math.sqrt (1 + tu1 * tu1)\n    su1 = cu1 * tu1\n    cu2 = 1 / Math.sqrt (1 + tu2 * tu2)\n    s1 = cu1 * cu2\n    b1 = s1 * tu2\n    f1 = b1 * tu1\n    x = glon2 - glon1\n    d = x + 1 // force one pass\n\n\n    while ((Math.abs(d - x) > EPS) && (iter < MAXITER))\n    {\n        iter=iter+1\n        sx = Math.sin (x)\n        //       alert(\"sx=\"+sx)\n        cx = Math.cos (x)\n        tu1 = cu2 * sx\n        tu2 = b1 - su1 * cu2 * cx\n        sy = Math.sqrt(tu1 * tu1 + tu2 * tu2)\n        cy = s1 * cx + f1\n        y = atan2 (sy, cy)\n        sa = s1 * sx / sy\n        c2a = 1 - sa * sa\n        cz = f1 + f1\n        if (c2a > 0)\n            cz = cy - cz / c2a\n            e = cz * cz * 2 - 1\n            c = ((-3 * c2a + 4) * f + 4) * c2a * f / 16\n            d = x\n            x = ((e * cy * c + cz) * sy * c + y) * sa\n            x = (1 - c) * x * f + glon2 - glon1\n    }\n\n    x = Math.sqrt ((1 / (r * r) - 1) * c2a + 1)\n    x +=1\n    x = (x - 2) / x\n    c = 1 - x\n    c = (x * x / 4 + 1) / c\n    d = (0.375 * x * x - 1) * x\n    x = e * cy\n    d = ((((sy*sy*4-3)*(1-e-e)*cz*d/6-x)*d/4+cz)*sy*d+y)*c*a*r\n    if (Math.abs(iter-MAXITER)<EPS){\n        //alert(\"Algorithm did not converge\")\n    }\n    return d\n}\n\n\n//***************Utility***************\nfunction atan2(y,x){\n    var out\n    if (x <0)            { out= Math.atan(y/x)+Math.PI}\n    if ((x >0) && (y>=0)){ out= Math.atan(y/x)}\n    if ((x >0) && (y<0)) { out= Math.atan(y/x)+2*Math.PI}\n    if ((x===0) && (y>0)) { out= Math.PI/2}\n    if ((x===0) && (y<0)) { out= 3*Math.PI/2}  \n    if ((x===0) && (y===0)) {\n        //alert(\"atan2(0,0) undefined\")\n        out= 0\n    }  \n    return out\n}\n\nfunction showProps(obj,objName){\n    var result=\"\"\n    for (var i in obj){\n        result +=objName + \".\" + i + \" = \" + obj[i] + \"\\n\"\n    }\n    alert(result)\n}\n\n\nif (msg.valid){\n    msg.topic=\"sample_total_volume\"\n    \n    var object_lat_end = global.get(\"object_lat_end\")\n    var object_lon_end = global.get(\"object_lon_end\")\n    var sample_sampling_gear = global.get(\"sample_sampling_gear\")\n\n    if (sample_sampling_gear.startsWith(\"net\") && sample_sampling_gear != \"net_decknet\") {\n        if (!(isNaN(object_lat_end) && isNaN(object_lon_end))){\n            var object_lat = global.get(\"object_lat\")\n            var object_lon = global.get(\"object_lon\")\n            var sample_gear_net_opening = global.get(\"sample_gear_net_opening\");\n\n            distance_km = ComputeDistance(object_lat, object_lon, object_lat_end, object_lon_end)\n\n            sample_total_volume = distance_km*(Math.PI*(sample_gear_net_opening/2)*(sample_gear_net_opening/2)) // liters\n            sample_total_volume = Math.round(sample_total_volume + Number.EPSILON)\n            msg.payload = sample_total_volume\n\n            return msg\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 940,
        "wires": [
            [
                "4f6afc5a.81e454"
            ]
        ]
    },
    {
        "id": "4fb4e0ad.c417c",
        "type": "ui_text",
        "z": "b771c342.49603",
        "group": "fc5e4e6f.5b1c8",
        "order": 6,
        "width": 5,
        "height": 1,
        "name": "Latitude",
        "label": "Latitude",
        "format": "{{msg.payload.lat.deg}}&deg{{msg.payload.lat.min}}'{{msg.payload.lat.sec}}\" {{msg.payload.lat.dir}}",
        "layout": "col-center",
        "className": "",
        "x": 2740,
        "y": 340,
        "wires": []
    },
    {
        "id": "8d2b5026.13e6e8",
        "type": "ui_text",
        "z": "b771c342.49603",
        "group": "fc5e4e6f.5b1c8",
        "order": 7,
        "width": 5,
        "height": 1,
        "name": "Longitude",
        "label": "Longitude",
        "format": "{{msg.payload.lon.deg}}&deg{{msg.payload.lon.min}}'{{msg.payload.lon.sec}}\" {{msg.payload.lon.dir}}",
        "layout": "col-center",
        "className": "",
        "x": 2740,
        "y": 380,
        "wires": []
    },
    {
        "id": "258b4562.9f778a",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Convert DD to DMS",
        "func": "function ConvertDDToDMS(D, lng){\n    // from https://stackoverflow.com/a/5786281/2108279\n    return {\n        dir : D<0?lng?'W':'S':lng?'E':'N',\n        deg : 0|(D<0?D=-D:D),\n        min : 0|D%1*60,\n        sec :(0|D*60%1*6000)/100\n    };\n}\n\nif(msg.payload.lat == undefined || msg.payload.lat == undefined){\n    msg.payload = {\n    \"lat\":{},\n    \"lon\":{}\n    };\n    msg.payload.lat.deg = \"0\"\n    msg.payload.lat.min = \"0\"\n    msg.payload.lat.sec = \"0\"\n    msg.payload.lat.dir = \"N\"\n    msg.payload.lon.deg = \"0\"\n    msg.payload.lon.min = \"0\"\n    msg.payload.lon.sec = \"0\"\n    msg.payload.lon.dir = \"E\"\n}\nelse{\n    msg.payload = {\n    \"lat\":ConvertDDToDMS(msg.payload.lat, false),\n    \"lon\":ConvertDDToDMS(msg.payload.lon, true)\n    }; \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 360,
        "wires": [
            [
                "4fb4e0ad.c417c",
                "8d2b5026.13e6e8",
                "0153d9162a928737"
            ]
        ]
    },
    {
        "id": "7c4ce5f3.62dd5c",
        "type": "ui_text",
        "z": "b771c342.49603",
        "group": "fc5e4e6f.5b1c8",
        "order": 3,
        "width": 2,
        "height": 1,
        "name": "Speed",
        "label": "Speed",
        "format": "{{msg.payload}} kts",
        "layout": "col-center",
        "x": 2730,
        "y": 420,
        "wires": []
    },
    {
        "id": "54e37580.fdc31c",
        "type": "ui_text",
        "z": "b771c342.49603",
        "group": "fc5e4e6f.5b1c8",
        "order": 4,
        "width": 2,
        "height": 1,
        "name": "Direction",
        "label": "Direction",
        "format": "{{msg.payload.track}} °",
        "layout": "col-center",
        "x": 2740,
        "y": 260,
        "wires": []
    },
    {
        "id": "cc21ca16.b92928",
        "type": "function",
        "z": "b771c342.49603",
        "name": "GPS Mode",
        "func": "switch (msg.payload.mode){\n case 1:msg.payload = \"No Fix\"; break\n case 2:msg.payload = \"2D Fix\"; break\n case 3:msg.payload = \"3D Fix\"; break\n default: msg.payload = \"No info\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 300,
        "wires": [
            [
                "7116e906.9f50f"
            ]
        ]
    },
    {
        "id": "4a4de52c.cf2884",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Speed conversion",
        "func": "msg.payload = (0|msg.payload.speed) * 1.9438\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 420,
        "wires": [
            [
                "7c4ce5f3.62dd5c"
            ]
        ]
    },
    {
        "id": "35ad311f.344c76",
        "type": "ui_text",
        "z": "b771c342.49603",
        "group": "fc5e4e6f.5b1c8",
        "order": 2,
        "width": 5,
        "height": 1,
        "name": "Time",
        "label": "Time",
        "format": "{{msg.payload.time}}",
        "layout": "col-center",
        "className": "",
        "x": 2730,
        "y": 460,
        "wires": []
    },
    {
        "id": "e73fd87d.d24e4",
        "type": "function",
        "z": "b771c342.49603",
        "name": "get acq_minimum_mesh",
        "func": "msg.payload = msg.payload.acq_minimum_mesh;\n\nmode = global.get(\"mode\")\n\nif(mode == 0) {\n    msg.enabled = true\n} else {\n    msg.enabled = false\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 440,
        "wires": [
            [
                "1aad56b31b5647ce"
            ]
        ]
    },
    {
        "id": "489c8e06.cc7d6",
        "type": "function",
        "z": "b771c342.49603",
        "name": "get acq_maximum_mesh",
        "func": "msg.payload = msg.payload.acq_maximum_mesh;\n\nmode = global.get(\"mode\")\n\nif(mode == 0) {\n    msg.enabled = true\n} else {\n    msg.enabled = false\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 480,
        "wires": [
            [
                "10eb31a2d7a6590c"
            ]
        ]
    },
    {
        "id": "73c4a14a.9b93c8",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Convert time",
        "func": "\nif (msg.payload.time){\n    msg.payload.time = Convertdate_to_string(msg.payload.time)\n    return msg;\n}\n\nif (msg.payload.time_emr){\n    msg.payload.time = msg.payload.time_emr+ ' int';\n\n    return msg;\n}\n\n\n\nfunction Convertdate_to_string(msg_date) {\n    var date = new Date(msg_date)\n    return (date.getFullYear() + \"/\" + fixDigit(date.getMonth()+1) + \"/\" + fixDigit(date.getDate()) + \" \" + fixDigit(date.getHours()) + \":\" + fixDigit(date.getMinutes()) + \":\" + fixDigit(date.getSeconds()) );\n}\n\nfunction fixDigit(val){\n    return val.toString().length === 1 ? \"0\" + val : val;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2490,
        "y": 460,
        "wires": [
            [
                "35ad311f.344c76",
                "58249066ba04fb19"
            ]
        ]
    },
    {
        "id": "58de1340.3cc354",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_dilution_factor",
        "label": "Dilution Factor",
        "tooltip": "0.5 if diluted by two; 2 if concentrated by a factor 2",
        "group": "3e1ba03d.f01d8",
        "order": 16,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "sample_dilution_factor",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 800,
        "y": 760,
        "wires": [
            [
                "9f501f49.45645"
            ]
        ]
    },
    {
        "id": "4f6afc5a.81e454",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_total_volume",
        "label": "Filtered volume (in L)",
        "tooltip": "Calculated or hand filled",
        "group": "3e1ba03d.f01d8",
        "order": 15,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "sample_total_volume",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 2160,
        "y": 760,
        "wires": [
            [
                "e1f2f6eb.fe1dd"
            ]
        ]
    },
    {
        "id": "e1f2f6eb.fe1dd",
        "type": "function",
        "z": "b771c342.49603",
        "name": "set global",
        "func": "global.set(msg.topic,msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2380,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "e9bc112c.eb75f8",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Calculate volume",
        "func": "if (msg.topic == \"sample_total_flowmeter_start\"){\n    context.set(\"sample_total_flowmeter_start\", msg.payload);\n}\nif (msg.topic == \"sample_total_flowmeter_end\"){\n    context.set(\"sample_total_flowmeter_end\", msg.payload);\n}\n\nif (context.keys().length == 2){\n    sample_total_volume = context.get(\"sample_total_flowmeter_end\") - context.get(\"sample_total_flowmeter_start\");\n    msg.topic=\"sample_total_volume\"\n    msg.payload=sample_total_volume\n    return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 600,
        "wires": [
            [
                "4f6afc5a.81e454"
            ]
        ]
    },
    {
        "id": "cdd4181922eecf11",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_speed_through_water",
        "label": "Speed Through Water (kts)",
        "tooltip": "in knots",
        "group": "cf5d9f0e.d57e7",
        "order": 8,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "sample_speed_through_water",
        "topicType": "str",
        "x": 830,
        "y": 500,
        "wires": [
            [
                "9f501f49.45645"
            ]
        ]
    },
    {
        "id": "1aad56b31b5647ce",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "acq_minimum_mesh",
        "label": "Minimal fraction size (μm)",
        "tooltip": "Net mesh pore size or minimal filtration mesh pore size",
        "group": "3e1ba03d.f01d8",
        "order": 10,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "acq_minimum_mesh",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 800,
        "y": 680,
        "wires": [
            [
                "9f501f49.45645"
            ]
        ]
    },
    {
        "id": "10eb31a2d7a6590c",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "acq_maximum_mesh",
        "label": "Maximal fraction size (μm)",
        "tooltip": "Maximal filtration mesh pore size",
        "group": "3e1ba03d.f01d8",
        "order": 12,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "acq_maximum_mesh",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 800,
        "y": 720,
        "wires": [
            [
                "9f501f49.45645"
            ]
        ]
    },
    {
        "id": "3ac7b631f5d8ef90",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Culture check",
        "func": "var activation_msg = {}\nvar date_msg = {}\nvar timestamp=new Date().toISOString();\n\n\nif (msg.payload === \"culture\"){\n    activation_msg.payload = {\"group\":{\"show\":[\"Sample_Culture_Date_and_Time\"],\"hide\":[\"Sample_Sample_Location\", \"Sample_Net_Metadata\",\"Sample_Prefill_sample\",\"Sample_Prefill_net\", \"Sample_Summary\" , \"Sample_Summary_Net\",\"Sample_Hidden_Groupe\"]}};\n    global.set(\"object_lat\", \"-90.0000\")\n    global.set(\"object_lon\", \"0.0000\")\n    date_msg.payload = {\"object_date\": timestamp.split('T')[0],\n                        \"object_time\": timestamp.split('T')[1].split('.')[0]}\n    return [activation_msg, date_msg];\n}\nelse if (msg.payload === \"test\"){\n    activation_msg.payload = {\"group\":{\"show\":[\"Sample_Hidden_Groupe\"],\"hide\":[\"Sample_Culture_Date_and_Time\", \"Sample_Sample_Location\", \"Sample_Net_Metadata\",\"Sample_Prefill_sample\",\"Sample_Prefill_net\", \"Sample_Summary\", \"Sample_Summary_Net\"]}};\n    global.set(\"object_lat\", \"-90.0000\")\n    global.set(\"object_lon\", \"0.0000\")\n    global.set(\"object_date\", timestamp.split('T')[0])\n    global.set(\"object_time\", timestamp.split('T')[1].split('.')[0])\n    return [activation_msg, null];\n}\nelse{\n    return [null, null]\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 660,
        "wires": [
            [
                "cbb123ab.fd3428"
            ],
            []
        ],
        "outputLabels": [
            "decknet activation",
            ""
        ]
    },
    {
        "id": "05c6aff2afbd69cf",
        "type": "ui_form",
        "z": "b771c342.49603",
        "name": "culture_timestamp",
        "label": "Culture timestamp",
        "group": "7bc0a4c416e4545c",
        "order": 1,
        "width": 10,
        "height": 1,
        "options": [
            {
                "label": "Date (YYYY-MM-DD, UTC)",
                "value": "object_date",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Time (HH:MM(:SS), UTC 24h)",
                "value": "object_time",
                "type": "time",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "object_date": "",
            "object_time": ""
        },
        "payload": "",
        "submit": "Validate",
        "cancel": "Reset",
        "topic": "culture_timestamp",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 790,
        "y": 1020,
        "wires": [
            [
                "2ea7ccf8ea31c39b"
            ]
        ]
    },
    {
        "id": "469cf370942fc769",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Change mode",
        "func": "var values = {}\n\n//Mode expert\nif (msg.payload === 0){\n    values.enabled = true;\n    return values;\n}\n\n//Mode débutant\nelse if (msg.payload === 1){\n    values.enabled = false;\n    return values;\n}\nelse{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2500,
        "y": 140,
        "wires": [
            [
                "a5b67ad53d90447b"
            ]
        ]
    },
    {
        "id": "9d08fae04cfb99e8",
        "type": "ui_multistate_switch",
        "z": "b771c342.49603",
        "d": true,
        "name": "Mode selection",
        "group": "5517c651.b2f668",
        "order": 3,
        "width": 10,
        "height": 1,
        "label": "",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Expert mode",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Beginner mode",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 2300,
        "y": 100,
        "wires": [
            [
                "73b7efc0c670625f",
                "469cf370942fc769"
            ]
        ]
    },
    {
        "id": "d2acc261fa0c9dd7",
        "type": "change",
        "z": "b771c342.49603",
        "name": "Change global mode",
        "rules": [
            {
                "t": "set",
                "p": "mode",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2720,
        "y": 60,
        "wires": [
            [
                "a85a1f2d75981a8c"
            ]
        ]
    },
    {
        "id": "a85a1f2d75981a8c",
        "type": "link out",
        "z": "b771c342.49603",
        "name": "out_sample_mode",
        "mode": "link",
        "links": [
            "127fd2e4447c6ad1",
            "713395d7523b16e8",
            "7164566e38c0e242",
            "87171ccda60d4390",
            "97f9c6da2e1095d2",
            "c840a7c66cf51acc",
            "a45e550cb5e1c1d1"
        ],
        "x": 2875,
        "y": 60,
        "wires": []
    },
    {
        "id": "4dd140903cddda10",
        "type": "link in",
        "z": "b771c342.49603",
        "name": "in_sample_mode",
        "links": [
            "082af9181824a196",
            "319bff50477bc5fc",
            "4cfbba68449a28e2",
            "7a7343ef8627ec57",
            "b6e04f52920c6dcb",
            "bfce8e77727b9fbf",
            "c2d9b90e27bc022c",
            "de32bd4b6ba8dfd3",
            "d3892bf83549fd59"
        ],
        "x": 2165,
        "y": 100,
        "wires": [
            [
                "9d08fae04cfb99e8",
                "469cf370942fc769"
            ]
        ]
    },
    {
        "id": "73b7efc0c670625f",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Get mode value",
        "func": "if (msg.payload != global.get(\"mode\")){\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2500,
        "y": 60,
        "wires": [
            [
                "d2acc261fa0c9dd7"
            ]
        ]
    },
    {
        "id": "6ee62b1f080621ce",
        "type": "ui_button",
        "z": "b771c342.49603",
        "name": "GPS pre fill sample location",
        "group": "02ef954dd5a84815",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Prefill location",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "str",
        "topic": "gps_fill",
        "topicType": "str",
        "x": 280,
        "y": 860,
        "wires": [
            [
                "ae70f39284d2e033"
            ]
        ]
    },
    {
        "id": "e338fbd49a4e9fc6",
        "type": "function",
        "z": "b771c342.49603",
        "name": "GPS to string",
        "func": "var lat \nvar lon \n\nlat = msg.payload.lat.deg + \"°\" +msg.payload.lat.min + \"'\" + msg.payload.lat.sec + \"\\\" \"+ msg.payload.lat.dir\nlon = msg.payload.lon.deg + \"°\" +msg.payload.lon.min + \"'\" + msg.payload.lon.sec + \"\\\" \"+ msg.payload.lon.dir\n\n\nmsg.topic = \"location\"\nmsg.payload = {\"lat\": lat, \"lon\" : lon}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 900,
        "wires": [
            [
                "ae70f39284d2e033"
            ]
        ]
    },
    {
        "id": "ae70f39284d2e033",
        "type": "function",
        "z": "b771c342.49603",
        "name": "",
        "func": "var lat, lon\nmsg_location = {}\n\nif(msg.topic == \"location\"){\n    context.set(\"lat\",msg.payload.lat);\n    context.set(\"lon\",msg.payload.lon);\n}\n\nif(msg.topic == \"gps_fill\" && msg.payload == \"true\" ){\n    msg_location.payload = {\"object_lat\": context.get(\"lat\"), \"object_lon\" : context.get(\"lon\")}\n    return msg_location\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 900,
        "wires": [
            [
                "c33f1124.af6688"
            ]
        ]
    },
    {
        "id": "0153d9162a928737",
        "type": "link out",
        "z": "b771c342.49603",
        "name": "Gps data",
        "mode": "link",
        "links": [
            "2b7d9c3a94eadf25",
            "4c613fe60516ae4e",
            "e789e03a75a408c5"
        ],
        "x": 2875,
        "y": 360,
        "wires": []
    },
    {
        "id": "2b7d9c3a94eadf25",
        "type": "link in",
        "z": "b771c342.49603",
        "name": "GPS data",
        "links": [
            "0153d9162a928737"
        ],
        "x": 95,
        "y": 900,
        "wires": [
            [
                "e338fbd49a4e9fc6"
            ]
        ]
    },
    {
        "id": "6a5ae53c5c507053",
        "type": "ui_button",
        "z": "b771c342.49603",
        "name": "GPS pre fill sample date",
        "group": "02ef954dd5a84815",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Prefill date",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "str",
        "topic": "gps_date",
        "topicType": "str",
        "x": 270,
        "y": 940,
        "wires": [
            [
                "7a739cae4903f510"
            ]
        ]
    },
    {
        "id": "2f6370f095a73f67",
        "type": "function",
        "z": "b771c342.49603",
        "name": "date and time to string",
        "func": "var parts = msg.payload.time.split(/ /)\nmsg.topic = \"date and time\"\nmsg.payload.date = parts[0]\n\n\nmsg.payload.time = \"1970-01-01T\"+ parts[1].substr(0, 5)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1020,
        "wires": [
            [
                "7a739cae4903f510",
                "7cea7adaa831550c"
            ]
        ]
    },
    {
        "id": "7a739cae4903f510",
        "type": "function",
        "z": "b771c342.49603",
        "name": "",
        "func": "msg_location = {}\n\nif(msg.topic == \"date and time\"){\n    context.set(\"date\",msg.payload.date);\n    context.set(\"time\",msg.payload.time);\n}\n\n\nif(msg.topic == \"gps_date\" && msg.payload == \"true\" ){\n    msg_location.payload = {\"object_date\": context.get(\"date\")}\n    return msg_location\n}\n\nif(msg.topic == \"gps_time\" && msg.payload == \"true\" ){\n    msg_location.payload = {\"object_time\": context.get(\"time\")}\n    return msg_location\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1020,
        "wires": [
            [
                "c33f1124.af6688"
            ]
        ]
    },
    {
        "id": "39b8dd0a4590d0db",
        "type": "link in",
        "z": "b771c342.49603",
        "name": "",
        "links": [
            "58249066ba04fb19"
        ],
        "x": 95,
        "y": 1020,
        "wires": [
            [
                "2f6370f095a73f67"
            ]
        ]
    },
    {
        "id": "58249066ba04fb19",
        "type": "link out",
        "z": "b771c342.49603",
        "name": "Time and date data",
        "mode": "link",
        "links": [
            "39b8dd0a4590d0db",
            "3c13c020b93fa3e7",
            "6bec70a17424ed31"
        ],
        "x": 2695,
        "y": 500,
        "wires": []
    },
    {
        "id": "386b3a470980ed53",
        "type": "ui_button",
        "z": "b771c342.49603",
        "name": "GPS pre fill sample time",
        "group": "02ef954dd5a84815",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Prefill time",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "str",
        "topic": "gps_time",
        "topicType": "str",
        "x": 270,
        "y": 980,
        "wires": [
            [
                "7a739cae4903f510"
            ]
        ]
    },
    {
        "id": "8ac9447212fcd447",
        "type": "inject",
        "z": "b771c342.49603",
        "name": "Date in case of emergency",
        "props": [
            {
                "p": "payload.local_time",
                "v": "$now()",
                "vt": "jsonata"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1940,
        "y": 460,
        "wires": [
            [
                "58152890c539c567"
            ]
        ]
    },
    {
        "id": "0d869284d8928ab6",
        "type": "ui_template",
        "z": "b771c342.49603",
        "group": "a961c5663b1f739d",
        "name": "affichage prefill 2",
        "order": 1,
        "width": 5,
        "height": 1,
        "format": "<div class=\"titre\">\n    Throw Location\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 250,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "702cc55cb24499b9",
        "type": "ui_template",
        "z": "b771c342.49603",
        "group": "a961c5663b1f739d",
        "name": "affichage prefill 3",
        "order": 2,
        "width": 5,
        "height": 1,
        "format": "<div class=\"titre\">\n    Retrieval Location\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 470,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "4f66b3232239da1b",
        "type": "ui_button",
        "z": "b771c342.49603",
        "name": "GPS pre fill net location 1",
        "group": "a961c5663b1f739d",
        "order": 3,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Prefill location",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "str",
        "topic": "gps_fill",
        "topicType": "str",
        "x": 270,
        "y": 1180,
        "wires": [
            [
                "6e139abd9cd02c0e"
            ]
        ]
    },
    {
        "id": "694c05147fdd093d",
        "type": "function",
        "z": "b771c342.49603",
        "name": "GPS to string",
        "func": "var lat \nvar lon \n\n\nlat = msg.payload.lat.deg + \"°\" +msg.payload.lat.min + \"'\" + msg.payload.lat.sec + \"\\\" \"+ msg.payload.lat.dir\nlon = msg.payload.lon.deg + \"°\" +msg.payload.lon.min + \"'\" + msg.payload.lon.sec + \"\\\" \"+ msg.payload.lon.dir\n\n\nmsg.topic = \"location\"\nmsg.payload = {\"lat\": lat, \"lon\" : lon}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1220,
        "wires": [
            [
                "6e139abd9cd02c0e"
            ]
        ]
    },
    {
        "id": "6e139abd9cd02c0e",
        "type": "function",
        "z": "b771c342.49603",
        "name": "",
        "func": "var lat, lon\nmsg_location = {}\n\nif(msg.topic == \"location\"){\n    context.set(\"lat\",msg.payload.lat);\n    context.set(\"lon\",msg.payload.lon);\n}\n\nif(msg.topic == \"gps_fill\" && msg.payload == \"true\" ){\n    msg_location.payload = {\"object_lat\": context.get(\"lat\"), \"object_lon\" : context.get(\"lon\")}\n    return msg_location\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1220,
        "wires": [
            [
                "358908cd.416ab"
            ]
        ]
    },
    {
        "id": "4c613fe60516ae4e",
        "type": "link in",
        "z": "b771c342.49603",
        "name": "GPS data",
        "links": [
            "0153d9162a928737"
        ],
        "x": 95,
        "y": 1220,
        "wires": [
            [
                "694c05147fdd093d"
            ]
        ]
    },
    {
        "id": "f6d051383ec75b53",
        "type": "ui_button",
        "z": "b771c342.49603",
        "name": "GPS pre fill net date 1",
        "group": "a961c5663b1f739d",
        "order": 5,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Prefill date",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "str",
        "topic": "gps_date",
        "topicType": "str",
        "x": 260,
        "y": 1260,
        "wires": [
            [
                "4e6a3d268e741d74"
            ]
        ]
    },
    {
        "id": "9c3ce7821bdd6864",
        "type": "function",
        "z": "b771c342.49603",
        "name": "date and time to string",
        "func": "var parts = msg.payload.time.split(/ /)\nmsg.topic = \"date and time\"\nmsg.payload.date = parts[0]\nmsg.payload.time = \"1970-01-01T\"+ parts[1].substr(0, 5)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1340,
        "wires": [
            [
                "4e6a3d268e741d74"
            ]
        ]
    },
    {
        "id": "4e6a3d268e741d74",
        "type": "function",
        "z": "b771c342.49603",
        "name": "",
        "func": "msg_location = {}\n\nif(msg.topic == \"date and time\"){\n    context.set(\"date\",msg.payload.date);\n    context.set(\"time\",msg.payload.time);\n}\n\n\nif(msg.topic == \"gps_date\" && msg.payload == \"true\" ){\n    msg_location.payload = {\"object_date\": context.get(\"date\")}\n    return msg_location\n}\n\nif(msg.topic == \"gps_time\" && msg.payload == \"true\" ){\n    msg_location.payload = {\"object_time\": context.get(\"time\")}\n    return msg_location\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1340,
        "wires": [
            [
                "358908cd.416ab"
            ]
        ]
    },
    {
        "id": "6bec70a17424ed31",
        "type": "link in",
        "z": "b771c342.49603",
        "name": "",
        "links": [
            "58249066ba04fb19"
        ],
        "x": 95,
        "y": 1340,
        "wires": [
            [
                "9c3ce7821bdd6864"
            ]
        ]
    },
    {
        "id": "a54215fdb486dfb0",
        "type": "ui_button",
        "z": "b771c342.49603",
        "name": "GPS pre fill net time 1",
        "group": "a961c5663b1f739d",
        "order": 7,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Prefill time",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "str",
        "topic": "gps_time",
        "topicType": "str",
        "x": 260,
        "y": 1300,
        "wires": [
            [
                "4e6a3d268e741d74"
            ]
        ]
    },
    {
        "id": "bca1c2723cc759c1",
        "type": "ui_button",
        "z": "b771c342.49603",
        "name": "GPS pre fill net location 2",
        "group": "a961c5663b1f739d",
        "order": 4,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Prefill location",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "str",
        "topic": "gps_fill",
        "topicType": "str",
        "x": 270,
        "y": 1400,
        "wires": [
            [
                "fd441ca73907e6fc"
            ]
        ]
    },
    {
        "id": "92f45ea22b4985a1",
        "type": "function",
        "z": "b771c342.49603",
        "name": "GPS to string",
        "func": "var lat \nvar lon \n\n\nlat = msg.payload.lat.deg + \"°\" +msg.payload.lat.min + \"'\" + msg.payload.lat.sec + \"\\\" \"+ msg.payload.lat.dir\nlon = msg.payload.lon.deg + \"°\" +msg.payload.lon.min + \"'\" + msg.payload.lon.sec + \"\\\" \"+ msg.payload.lon.dir\n\n\nmsg.topic = \"location\"\nmsg.payload = {\"lat\": lat, \"lon\" : lon}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1440,
        "wires": [
            [
                "fd441ca73907e6fc"
            ]
        ]
    },
    {
        "id": "fd441ca73907e6fc",
        "type": "function",
        "z": "b771c342.49603",
        "name": "",
        "func": "var lat, lon\nmsg_location = {}\n\nif(msg.topic == \"location\"){\n    context.set(\"lat\",msg.payload.lat);\n    context.set(\"lon\",msg.payload.lon);\n}\n\nif(msg.topic == \"gps_fill\" && msg.payload == \"true\" ){\n    msg_location.payload = {\"object_lat_end\": context.get(\"lat\"), \"object_lon_end\" : context.get(\"lon\")}\n    return msg_location\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1440,
        "wires": [
            [
                "56d40584.eff4e4"
            ]
        ]
    },
    {
        "id": "e789e03a75a408c5",
        "type": "link in",
        "z": "b771c342.49603",
        "name": "GPS data",
        "links": [
            "0153d9162a928737"
        ],
        "x": 95,
        "y": 1440,
        "wires": [
            [
                "92f45ea22b4985a1"
            ]
        ]
    },
    {
        "id": "ec32dcac7f5a0a88",
        "type": "ui_button",
        "z": "b771c342.49603",
        "name": "GPS pre fill net date 2",
        "group": "a961c5663b1f739d",
        "order": 6,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Prefill date",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "str",
        "topic": "gps_date",
        "topicType": "str",
        "x": 260,
        "y": 1480,
        "wires": [
            [
                "0777da8c09792a70"
            ]
        ]
    },
    {
        "id": "51e26562f24d16b4",
        "type": "function",
        "z": "b771c342.49603",
        "name": "date and time to string",
        "func": "var parts = msg.payload.time.split(/ /)\nmsg.topic = \"date and time\"\nmsg.payload.date = parts[0]\nmsg.payload.time = \"1970-01-01T\"+ parts[1].substr(0, 5)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1560,
        "wires": [
            [
                "0777da8c09792a70"
            ]
        ]
    },
    {
        "id": "0777da8c09792a70",
        "type": "function",
        "z": "b771c342.49603",
        "name": "",
        "func": "msg_location = {}\n\nif(msg.topic == \"date and time\"){\n    context.set(\"date\",msg.payload.date);\n    context.set(\"time\",msg.payload.time);\n}\n\n\nif(msg.topic == \"gps_date\" && msg.payload == \"true\" ){\n    msg_location.payload = {\"object_date_end\": context.get(\"date\")}\n    return msg_location\n}\n\nif(msg.topic == \"gps_time\" && msg.payload == \"true\" ){\n    msg_location.payload = {\"object_time_end\": context.get(\"time\")}\n    return msg_location\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1560,
        "wires": [
            [
                "56d40584.eff4e4"
            ]
        ]
    },
    {
        "id": "3c13c020b93fa3e7",
        "type": "link in",
        "z": "b771c342.49603",
        "name": "",
        "links": [
            "58249066ba04fb19"
        ],
        "x": 95,
        "y": 1560,
        "wires": [
            [
                "51e26562f24d16b4"
            ]
        ]
    },
    {
        "id": "ba10ca25d54c6906",
        "type": "ui_button",
        "z": "b771c342.49603",
        "name": "GPS pre fill net time 2",
        "group": "a961c5663b1f739d",
        "order": 8,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Prefill time",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "str",
        "topic": "gps_time",
        "topicType": "str",
        "x": 260,
        "y": 1520,
        "wires": [
            [
                "0777da8c09792a70"
            ]
        ]
    },
    {
        "id": "4c4d548577a253bb",
        "type": "ui_template",
        "z": "b771c342.49603",
        "group": "c9aaf84f0d1abd88",
        "name": "Show data normal",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<div class=\"conteneur\">   \n    <div class=\"infoR\">       \n        <div class=\"element 1\">\n            <strong>Latitude:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.object_lat_end\"></span> <br>\n            <strong>Longitude:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.object_lon_end\"></span> <br>\n            <strong>Date:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.object_date_end\"></span> <br>\n            <strong>Time:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.object_time_end\"></span> <br>\n        </div>       \n    </div> \n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1390,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "c544ac031b6cf88c",
        "type": "ui_template",
        "z": "b771c342.49603",
        "group": "eda2c2de40a75200",
        "name": "Show data net",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div class=\"conteneur\">   \n    <div class=\"infoR\">       \n        <div class=\"element 1\">\n            <div class=\"text\">Throw</div>  \n            <strong>Latitude:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.lat\"></span> <br>\n            <strong>Longitude:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.lon\"></span> <br>\n            <strong>Date:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.date\"></span> <br>\n            <strong>Time:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.time\"></span> <br>\n        </div>       \n        <div class=\"element 2\">\n            <div class=\"text\">Retrival</div>  \n            <strong>Latitude:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.lat_end\"></span> <br>\n            <strong>Longitude:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.lon_end\"></span> <br>\n            <strong>Date:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.date_end\"></span> <br>\n            <strong>Time:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.time_end\"></span> <br>\n        </div>       \n\n    </div> \n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1380,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "3e141eac389fdd9f",
        "type": "function",
        "z": "b771c342.49603",
        "name": "",
        "func": "var temp1, temp2, temp3, temp4\n//Reception de retrevial location\nif (msg.payload.object_lat_end == undefined) {\n\t\n    temp1 = ConvertDDToDMS(global.get(\"object_lat_end\"), false)\n    temp2 = ConvertDDToDMS(global.get(\"object_lon_end\"), true)\n    temp3 = global.get(\"object_date_end\").match(/\\d{2}/g).join('-').replace(\"-\",\"\")\n    temp4 = global.get(\"object_time_end\").match(/\\d{2}/g).join(':')\n    \n    date_time = Convertdate_to_string(temp3 + \" \"+ temp4)\n    part = date_time.split(/ /)\n    temp3 = part[0];\n    temp4 = part[1];\n    \n    context.set(\"lat_end\", temp1 )\n    context.set(\"lon_end\", temp2 )\n    context.set(\"date_end\", temp3 )\n    context.set(\"time_end\", temp4 )\n}\n//reception de net throw location\nelse{\n    context.set(\"lat\", msg.payload.object_lat_end )\n    context.set(\"lon\", msg.payload.object_lon_end )\n    \n    //Convert utc to local\n    date_time = Convertdate_to_string(msg.payload.object_date_end+\" \"+msg.payload.object_time_end)\n    part = date_time.split(/ /)\n    msg.payload.object_date_end = part[0];\n    msg.payload.object_time_end = part[1];\n    \n    context.set(\"date\", msg.payload.object_date_end )\n    context.set(\"time\", msg.payload.object_time_end )\n}\n\n//For eatch data receive, refresh data\nvar msg_new = {payload:{}}\n\nmsg_new.payload.lat = context.get(\"lat\")\nmsg_new.payload.lon = context.get(\"lon\")\nmsg_new.payload.date = context.get(\"date\")\nmsg_new.payload.time = context.get(\"time\")\n\nmsg_new.payload.lat_end = context.get(\"lat_end\")\nmsg_new.payload.lon_end = context.get(\"lon_end\")\nmsg_new.payload.date_end = context.get(\"date_end\")\nmsg_new.payload.time_end = context.get(\"time_end\")\n\nreturn msg_new;\n\n\n\nfunction ConvertDDToDMS(D, lng){\n    // from https://stackoverflow.com/a/5786281/2108279\n    var dir = D<0?lng?'W':'S':lng?'E':'N'\n    var deg = 0|(D<0?D=-D:D)\n    var min = 0|D%1*60\n    var sec = (0|D*60%1*6000)/100\n    return (deg+ \"°\" +min+ \"'\" + sec + \"\\\"\" + \" \" + dir)\n}\n\nfunction Convertdate_to_string(msg_date) {\n    var date = new Date(msg_date)\n    \n    return (date.getFullYear() + \"/\" + fixDigit(date.getMonth()+1) + \"/\" + fixDigit(date.getDate()) + \" \" + fixDigit(date.getHours()+1) + \":\" + fixDigit(date.getMinutes()) + \":\" + fixDigit(date.getSeconds()) );\n}\n\n\nfunction fixDigit(val){\n    return val.toString().length === 1 ? \"0\" + val : val;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n//Data for retrieval\ncontext.set(\"lat_end\", \"None\")\ncontext.set(\"lon_end\", \"None\")\ncontext.set(\"date_end\", \"None\")\ncontext.set(\"time_end\", \"None\")\n\n//Data for throw\ncontext.set(\"lat\", \"None\")\ncontext.set(\"lon\", \"None\")\ncontext.set(\"date\", \"None\")\ncontext.set(\"time\", \"None\")\n\nvar msg_new = {payload:{}}\n\nmsg_new.payload.lat = context.get(\"lat\")\nmsg_new.payload.lon = context.get(\"lon\")\nmsg_new.payload.date = context.get(\"date\")\nmsg_new.payload.time = context.get(\"time\")\n\nmsg_new.payload.lat_end = context.get(\"lat_end\")\nmsg_new.payload.lon_end = context.get(\"lon_end\")\nmsg_new.payload.date_end = context.get(\"date_end\")\nmsg_new.payload.time_end = context.get(\"time_end\")\n\nreturn msg_new;",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 960,
        "wires": [
            [
                "c544ac031b6cf88c"
            ]
        ]
    },
    {
        "id": "f3808f3b5baab789",
        "type": "ui_template",
        "z": "b771c342.49603",
        "group": "c9aaf84f0d1abd88",
        "name": "Style",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>     \n.conteneur: {\n    display: flex;\n    flex-direction: column;\n    width: 13.8em;\n}     \n.element:nth-child(1) {\n    flex:1;    \n    padding-left: 5%;\n}     \n.element:nth-child(2) {\n    flex:1; \n    padding-left: 5%;\n\n}     \n.infoR {\n    display: flex;         \n    flex-direction: row;         \n    text-align: left;        \n    font-size: 13px;\n}     \n    \n.text {        \n    font-size: 20px;        \n    padding: 5px;        \n    text-align: center;     \n} \n.titre{\n    display:flex;\n    align-items:center;\n    justify-content:center;\n    font-size: 17px;\n  \n}\n\n#Sample_Hidden_Groupe{\n    opacity:0;\n    font-size:1px;\n}\n\n\n\n\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 1610,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "7444e2e24a9f1aeb",
        "type": "link in",
        "z": "b771c342.49603",
        "name": "",
        "links": [
            "a5b67ad53d90447b"
        ],
        "x": 495,
        "y": 560,
        "wires": [
            [
                "94eb4221.9b92c",
                "9c7f7fc9.c8d3a",
                "317eeeb7.8d3042",
                "1aad56b31b5647ce",
                "10eb31a2d7a6590c",
                "642ff403.1ed91c",
                "58de1340.3cc354"
            ]
        ]
    },
    {
        "id": "a5b67ad53d90447b",
        "type": "link out",
        "z": "b771c342.49603",
        "name": "sample_activation",
        "mode": "link",
        "links": [
            "29f82b029ca000d9",
            "68e2264e05e1a5b8",
            "7444e2e24a9f1aeb"
        ],
        "x": 2635,
        "y": 140,
        "wires": []
    },
    {
        "id": "16c983e1b53daee9",
        "type": "ui_text",
        "z": "b771c342.49603",
        "group": "f117c73f1f9395a9",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": ".",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "x": 1970,
        "y": 40,
        "wires": []
    },
    {
        "id": "29f82b029ca000d9",
        "type": "link in",
        "z": "b771c342.49603",
        "name": "",
        "links": [
            "a5b67ad53d90447b"
        ],
        "x": 1975,
        "y": 760,
        "wires": [
            [
                "4f6afc5a.81e454"
            ]
        ]
    },
    {
        "id": "fdc7981ab1e4f8ce",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Preset with test",
        "func": "msg1={}; msg2={};\nmsg1.payload=global.get(\"sample_project\")\nmsg2.payload=global.get(\"sample_operator\")\n\nif (msg1.payload == \"None\" || msg1.payload == \"\" || msg1.payload == undefined) {\n    if(msg.payload == \"test\"){\n        msg1.payload = \"Project_Test\";\n    } else {\n        msg1.payload = \"\";\n    }\n}\nif (msg2.payload == \"None\" || msg2.payload == \"\" || msg2.payload == undefined) {\n    if(msg.payload == \"test\"){\n        msg2.payload = \"Operator_Test\";\n    } else {\n        msg2.payload = \"\";\n    }\n}\n\nreturn [msg1, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nmsg1={}; msg2={};\nmsg1.payload = \"\";\nmsg2.payload = \"\";\nreturn [msg1, msg2];",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 120,
        "wires": [
            [
                "9c882b37.fde668"
            ],
            [
                "82c5fc77.59c97"
            ]
        ]
    },
    {
        "id": "da36a757cc21206e",
        "type": "inject",
        "z": "b771c342.49603",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 1550,
        "y": 40,
        "wires": [
            [
                "6c5f6e39048a92e1"
            ]
        ]
    },
    {
        "id": "6c5f6e39048a92e1",
        "type": "function",
        "z": "b771c342.49603",
        "name": "clear all",
        "func": "var key = global.keys()\nfor(var i=0; i<key.length; i++){\n    global.set(key[i], undefined)\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "b4bef47fd5679587",
        "type": "function",
        "z": "b771c342.49603",
        "name": "",
        "func": "global.set(\"sample_operator\",\"None\");\nglobal.set(\"sample_project\",\"None\");\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "2ea7ccf8ea31c39b",
        "type": "function",
        "z": "b771c342.49603",
        "name": "",
        "func": "\n\n\nif(msg.topic == \"net_retrieval_location\"){\n    \n    msg.payload.object_date_end = (date_UTC(msg.payload.object_date_end))\n    msg.payload.object_time_end = (time_UTC(msg.payload.object_time_end))\n    \n}\nelse{\n    msg.payload.object_date = (date_UTC(msg.payload.object_date))\n    msg.payload.object_time = (time_UTC(msg.payload.object_time))\n}\n\nreturn msg;\n\nfunction date_UTC(msg_date) {\n    //msg_time=msg_time.replace(/Z/g,\"+01:00\")\n    var date =  new Date(msg_date)\n    return ( date.getFullYear() + \"-\" + fixDigit(date.getMonth()+1) + \"-\" + fixDigit(date.getDate() ));\n}\n\nfunction time_UTC(msg_time) {\n    //msg_time=msg_time.replace(/Z/g,\"+01:00\")\n    var time =  new Date(msg_time)\n    return (fixDigit(time.getUTCHours()) + \":\" + fixDigit(time.getUTCMinutes()) + \":\" + fixDigit(time.getUTCSeconds()) );\n}\n\nfunction fixDigit(val){\n    return val.toString().length === 1 ? \"0\" + val : val;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 900,
        "wires": [
            [
                "14658615.47c862"
            ]
        ]
    },
    {
        "id": "7cea7adaa831550c",
        "type": "function",
        "z": "b771c342.49603",
        "name": "",
        "func": "msg_location = {}\nvar type = global.get(\"sample_sampling_gear\")\n\n\n\nif( type == \"culture\" && context.get(\"one_time\") == 0 ){\n    context.set(\"one_time\",1);\n    msg_location.payload = {\"object_date\": msg.payload.date, \"object_time\": msg.payload.time}\n    return msg_location\n\n}\n\nelse if(type != \"culture\"){\n    context.set(\"one_time\",0);\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is starte\ncontext.set(\"one_time\",0);",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1060,
        "wires": [
            [
                "05c6aff2afbd69cf"
            ]
        ]
    },
    {
        "id": "b7c6087569130821",
        "type": "function",
        "z": "b771c342.49603",
        "name": "",
        "func": "msg = {}\nmode = global.get(\"mode\")\nmsg.payload = global.get(\"sample_sampling_gear\")\n\nif(mode == undefined) {\n    mode = 1;\n}\n\nmsg.enabled = true;\n    \nif(mode == 0){\n    \n    msg.options = [{\"High Speed Net\":\"net_hsn\"}, \n        {\"Tara Decknet\":\"net_decknet\"}, {\"Plankton net\":\"net\"},\n        {\"Niskin bottle 12L\":\"niskin_12L\"},{\"Niskin bottle 24L\":\"niskin_24L\"},\n        {\"Pass Hull\":\"pass_hull\"},{\"Single location (with net or bucket)\":\"single_location\"},\n        {\"Lab culture\":\"culture\"},{\"Test\":\"test\"}]\n}\n\nelse {\n    msg.options = [\n        {\"High Speed Net\":\"net_hsn\"}, \n        {\"Single location (with net or bucket)\":\"single_location\"},\n        {\"Lab culture\":\"culture\"},\n        {\"Test\":\"test\"}]\n}\n\nif(msg.payload == undefined) {\n    msg.payload = \"\";\n}\n\nreturn msg\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"choose\",\"single_location\")",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 120,
        "wires": [
            [
                "fcfc31ae.af3af"
            ]
        ]
    },
    {
        "id": "68e2264e05e1a5b8",
        "type": "link in",
        "z": "b771c342.49603",
        "name": "",
        "links": [
            "a5b67ad53d90447b"
        ],
        "x": 495,
        "y": 120,
        "wires": [
            [
                "b7c6087569130821"
            ]
        ]
    },
    {
        "id": "8b97db46845cf99a",
        "type": "function",
        "z": "b771c342.49603",
        "name": "",
        "func": "\nif (msg.payload.object_lat_end != undefined) {\n    \n    date_time = Convertdate_to_string(msg.payload.object_date_end+\" \"+msg.payload.object_time_end)\n    part = date_time.split(/ /)\n    msg.payload.object_date_end = part[0];\n    msg.payload.object_time_end = part[1];\n    \n    return msg;\n}\n\n\nfunction Convertdate_to_string(msg_date) {\n    var date = new Date(msg_date+\"Z\")\n    \n    return (date.getFullYear() + \"/\" + fixDigit(date.getMonth()+1) + \"/\" + fixDigit(date.getDate()) + \" \" + fixDigit(date.getHours()) + \":\" + fixDigit(date.getMinutes()) + \":\" + fixDigit(date.getSeconds()) );\n}\n\nfunction fixDigit(val){\n    return val.toString().length === 1 ? \"0\" + val : val;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 960,
        "wires": [
            [
                "4c4d548577a253bb"
            ]
        ]
    },
    {
        "id": "073c7d4ce2c7b3a7",
        "type": "trigger",
        "z": "b771c342.49603",
        "name": "",
        "op1": "reset",
        "op2": "true",
        "op1type": "str",
        "op2type": "bool",
        "duration": "10",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1790,
        "y": 420,
        "wires": [
            [
                "e52f93df280bcf33"
            ]
        ]
    },
    {
        "id": "e52f93df280bcf33",
        "type": "trigger",
        "z": "b771c342.49603",
        "name": "",
        "op1": "No Gps",
        "op2": "true",
        "op1type": "str",
        "op2type": "bool",
        "duration": "-1",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "reset",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1980,
        "y": 420,
        "wires": [
            [
                "58152890c539c567"
            ]
        ]
    },
    {
        "id": "78cb6b0834f0607c",
        "type": "inject",
        "z": "b771c342.49603",
        "name": "",
        "props": [
            {
                "p": "payload.object_lat_end",
                "v": "\"45°11'34.03\" N\"",
                "vt": "str"
            },
            {
                "p": "payload.object_lon_end",
                "v": "\"5°45'46.73\" E\"",
                "vt": "str"
            },
            {
                "p": "payload.object_date_end",
                "v": "2022-02-17",
                "vt": "str"
            },
            {
                "p": "payload.object_time_end",
                "v": "09:07:00",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1130,
        "y": 960,
        "wires": [
            [
                "8b97db46845cf99a"
            ]
        ]
    },
    {
        "id": "58152890c539c567",
        "type": "function",
        "z": "b771c342.49603",
        "name": "in case of no gps",
        "func": "status = {payload:{}}\nlat = {payload:{}}\nlon = {payload:{}}\ntime ={payload:{}}\n\nif(msg.payload == \"No Gps\"){\n    status.payload.mode = -1;\n    lat.payload.lat = context.get(\"lat\")\n    lon.payload.lon = context.get(\"lon\")\n    time.payload.time_emr = context.get(\"time\");\n    return [status, lat, lon, time]\n}\n\n\n\nif(msg.payload.local_time != undefined){\n    temp = Convertdate_to_string(msg.payload.local_time)   \n    \n    context.set(\"time\", temp );\n}\n\n\nfunction Convertdate_to_string(msg_date) {\n    var date = new Date(msg_date)\n    return (date.getFullYear() + \"/\" + fixDigit(date.getMonth()+1) + \"/\" + fixDigit(date.getDate()) + \" \" + fixDigit(date.getHours()) + \":\" + fixDigit(date.getMinutes()) + \":\" + fixDigit(date.getSeconds()) );\n}\n\nfunction fixDigit(val){\n    return val.toString().length === 1 ? \"0\" + val : val;\n}",
        "outputs": 4,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set(\"time\", \"0001-01-01T00:00:00.000Z\")\ncontext.set(\"lat\", \"00°00'00.00\\\" N\")\ncontext.set(\"lon\", \"00°00'00.00\\\" E\")",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 420,
        "wires": [
            [
                "cc21ca16.b92928"
            ],
            [
                "258b4562.9f778a"
            ],
            [
                "4a4de52c.cf2884"
            ],
            [
                "73c4a14a.9b93c8"
            ]
        ]
    },
    {
        "id": "6e3190106af6d079",
        "type": "inject",
        "z": "b771c342.49603",
        "name": "Start value",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "holla",
        "payloadType": "str",
        "x": 1590,
        "y": 420,
        "wires": [
            [
                "073c7d4ce2c7b3a7"
            ]
        ]
    },
    {
        "id": "a2438617d37b4e22",
        "type": "change",
        "z": "b771c342.49603",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "object_lat",
                "pt": "global",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "object_lon",
                "pt": "global",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "object_time",
                "pt": "global",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "object_date",
                "pt": "global",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "object_lat_end",
                "pt": "global",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "object_lon_end",
                "pt": "global",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "object_time_end",
                "pt": "global",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "object_date_end",
                "pt": "global",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 280,
        "wires": [
            [
                "9f501f49.45645",
                "46eb1bf8.3dc5f4",
                "3ac7b631f5d8ef90",
                "59242201616333de",
                "fdc7981ab1e4f8ce"
            ]
        ]
    },
    {
        "id": "59242201616333de",
        "type": "link out",
        "z": "b771c342.49603",
        "name": "",
        "mode": "link",
        "links": [
            "77683b416da98f8e"
        ],
        "x": 1135,
        "y": 280,
        "wires": []
    },
    {
        "id": "77683b416da98f8e",
        "type": "link in",
        "z": "b771c342.49603",
        "name": "",
        "links": [
            "59242201616333de"
        ],
        "x": 1065,
        "y": 1040,
        "wires": [
            [
                "9b7ce9a0f9ad0d3e"
            ]
        ]
    },
    {
        "id": "9b7ce9a0f9ad0d3e",
        "type": "function",
        "z": "b771c342.49603",
        "name": "",
        "func": "msg.payload.object_lat = \"\"\nmsg.payload.object_lon = \"\"\nmsg.payload.object_date = \"\"\nmsg.payload.object_time = \"\"\nmsg.payload.object_lat_end = \"\"\nmsg.payload.object_lon_end = \"\"\nmsg.payload.object_date_end = \"\"\nmsg.payload.object_time_end = \"\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1040,
        "wires": [
            [
                "4c4d548577a253bb",
                "c544ac031b6cf88c"
            ]
        ]
    },
    {
        "id": "6a84252a.d52a0c",
        "type": "ui_template",
        "z": "bccd1f23.87219",
        "group": "833bc5bb.217ba8",
        "name": "Stream Pi Camera",
        "order": 1,
        "width": 18,
        "height": 14,
        "format": "<span ng-bind-html=\"msg.payload\"></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 610,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "dc48dc42.98d18",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "set global",
        "func": "global.set(msg.topic,msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "811cd88c.daf528",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "left",
        "group": "fbd92986.1028c8",
        "order": 4,
        "width": 2,
        "height": 2,
        "passthru": true,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-double-left fa-3x",
        "payload": "DOWN",
        "payloadType": "str",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 510,
        "y": 700,
        "wires": [
            [
                "65ad39d.b6d4d48"
            ]
        ]
    },
    {
        "id": "edda4df4.76de2",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "right",
        "group": "fbd92986.1028c8",
        "order": 10,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-double-right fa-3x",
        "payload": "UP",
        "payloadType": "str",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 510,
        "y": 740,
        "wires": [
            [
                "65ad39d.b6d4d48"
            ]
        ]
    },
    {
        "id": "68962547.34a67c",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "name": "pump_manual_volume",
        "label": "Volume to pass (ml)",
        "tooltip": "Tiny values are accepted down to 0.001mL",
        "group": "707d9797.c8e798",
        "order": 5,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "pump_manual_volume",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 560,
        "y": 480,
        "wires": [
            [
                "dc48dc42.98d18"
            ]
        ]
    },
    {
        "id": "6c792043.b6ff9",
        "type": "ui_ui_control",
        "z": "bccd1f23.87219",
        "name": "",
        "events": "change",
        "x": 820,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "902429eb.ceacb8",
        "type": "ui_toast",
        "z": "bccd1f23.87219",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 830,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "fe840e05.b46f3",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "Check form",
        "func": "var acq_fnumber_objective= global.get(\"acq_fnumber_objective\");\n\nif (acq_fnumber_objective === undefined || acq_fnumber_objective === \"\") {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Focal Length of the objective\";\n    return [null, msg];\n}\n\nmsg.topic = \"Change Tab\";\nmsg.payload={\"tab\":\"Fluidic Acquisition\"};\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1780,
        "wires": [
            [
                "6c792043.b6ff9",
                "326a1d95.ca21aa"
            ],
            [
                "902429eb.ceacb8"
            ]
        ],
        "outputLabels": [
            "message",
            "error"
        ]
    },
    {
        "id": "5846b1d4.7971b",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "Backward",
        "group": "707d9797.c8e798",
        "order": 1,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-rotate-left fa-2x",
        "payload": "BACKWARD",
        "payloadType": "str",
        "topic": "actuator/pump",
        "topicType": "str",
        "x": 800,
        "y": 240,
        "wires": [
            [
                "3cb96380.e575ec"
            ]
        ]
    },
    {
        "id": "2cab680b.baf888",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "Forward",
        "group": "707d9797.c8e798",
        "order": 3,
        "width": 2,
        "height": 2,
        "passthru": true,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-rotate-right fa-2x",
        "payload": "FORWARD",
        "payloadType": "str",
        "topic": "actuator/pump",
        "topicType": "str",
        "x": 800,
        "y": 280,
        "wires": [
            [
                "3cb96380.e575ec"
            ]
        ]
    },
    {
        "id": "8038414a.34461",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "Calculate optics",
        "func": "var acq_fnumber_objective = String(global.get(\"acq_fnumber_objective\"));\nvar acq_camera = global.get(\"acq_camera\")\n\nif (acq_camera == undefined) {\n    acq_camera = \"Camera v2.1\"\n}\n\n// Those values needs to be recalculated, they are not good!\nif (acq_camera == \"Camera v2.1\"){\n    switch(acq_fnumber_objective) {\n      case \"16\":\n        acq_magnification= 1.6;\n        process_pixel= 0.696;\n        sug_min= 40;\n        sug_max= 430;\n        sug_flowrate= 2.4;\n        break;\n      case \"6\":\n        acq_magnification= 4.2;\n        process_pixel= 0.273;\n        sug_min= 15;\n        sug_max= 161;\n        sug_flowrate= 0.9;\n        break;\n      case \"3.6\":\n        acq_magnification= 8;\n        process_pixel= 0.143;\n        sug_min= 9;\n        sug_max= 96.75;\n        sug_flowrate= 0.54;\n        break;\n      case \"1.71\":\n        acq_magnification= 14;\n        process_pixel= 0.079;\n        sug_min= 4.275;\n        sug_max= 45.95;\n        sug_flowrate= 0.2565;\n        break;\n      case \"0\":\n        acq_magnification= 0;\n        process_pixel= 0;\n        sug_min= 0;\n        sug_max= 0;\n        sug_flowrate= 0;\n        break;\n    }\n}else {\n    acq_magnification= \"ERROR\";\n    process_pixel= \"ERROR\";\n    sug_min= \"ERROR\";\n    sug_max= \"ERROR\";\n    sug_flowrate= \"ERROR\";\n    node.warn(\"OK\")\n}\n\n\n\nglobal.set(\"process_pixel\",process_pixel);\n\nglobal.set(\"acq_magnification\",acq_magnification);\n\nvar msg1 = {payload:{}};\nmsg1.payload.acq_fnumber_objective = acq_fnumber_objective;\nmsg1.payload.acq_magnification = acq_magnification;\nmsg1.payload.process_pixel = process_pixel;\nmsg1.payload.sug_min = sug_min;\nmsg1.payload.sug_max = sug_max;\n\nreturn msg1;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 120,
        "wires": [
            [
                "335a730b9a3830ff",
                "66c31ceb7f02964e"
            ]
        ],
        "inputLabels": [
            "acq_fnumber_objective"
        ],
        "outputLabels": [
            "msg1"
        ]
    },
    {
        "id": "f61aaed5.1e64",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "",
        "group": "7a0b4877.a5d268",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Previous",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_return",
        "payload": "{\"tab\":\"Sample\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 360,
        "y": 1740,
        "wires": [
            [
                "6c792043.b6ff9"
            ]
        ]
    },
    {
        "id": "9ba6ec0a.22c96",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "",
        "group": "7a0b4877.a5d268",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Continue",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_tab",
        "payload": "{\"tab\":\"Home\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 360,
        "y": 1780,
        "wires": [
            [
                "fe840e05.b46f3"
            ]
        ]
    },
    {
        "id": "cbb8afed.0a026",
        "type": "rpi-gpio out",
        "z": "bccd1f23.87219",
        "name": "LED Output",
        "pin": "21",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 550,
        "y": 120,
        "wires": []
    },
    {
        "id": "3cb96380.e575ec",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "pump",
        "func": "var manual_volume= global.get(\"pump_manual_volume\");\nvar flowrate= global.get(\"pump_flowrate\");\n\nif (manual_volume === undefined || manual_volume === \"\" || manual_volume === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Volume to pass\";\n    return [null, msg];\n}\nelse if (flowrate === undefined || flowrate === \"\" || flowrate === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Flowrate\";\n    return [null, msg];\n}\nelse {\n    msg.topic = \"actuator/pump\";\n    // msg.payload is FORWARD or BACKWARD here\n    msg.payload={\"action\":\"move\", \n                \"direction\":msg.payload,\n                \"volume\":manual_volume,\n                \"flowrate\":flowrate};\n}\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 260,
        "wires": [
            [
                "bdc8ce57.de1f08"
            ],
            [
                "8bcce348.efc1a"
            ]
        ],
        "inputLabels": [
            "direction"
        ],
        "outputLabels": [
            "message",
            "error"
        ]
    },
    {
        "id": "8bcce348.efc1a",
        "type": "ui_toast",
        "z": "bccd1f23.87219",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1170,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "bdc8ce57.de1f08",
        "type": "mqtt out",
        "z": "bccd1f23.87219",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8dc3722c.06efa8",
        "x": 1150,
        "y": 200,
        "wires": []
    },
    {
        "id": "d71d224f.0585d8",
        "type": "ui_toast",
        "z": "bccd1f23.87219",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 950,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "65ad39d.b6d4d48",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "focus",
        "func": "var distance = global.get(\"focus_distance\");\n\nif (distance === undefined || distance === \"\" || distance === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Distance\";\n    return [null, msg]\n}else {\n    distance = global.get(\"focus_distance\");\n    // msg.payload is UP or DOWN here\n    msg.payload={\"action\":\"move\", \n                \"direction\":msg.payload,\n                \"distance\":(distance/1000)};\n}\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 770,
        "y": 700,
        "wires": [
            [
                "62030521.88317c"
            ],
            [
                "d71d224f.0585d8"
            ]
        ],
        "inputLabels": [
            "direction"
        ],
        "outputLabels": [
            "message",
            "error"
        ]
    },
    {
        "id": "1962d999.4a97e6",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "stop focus",
        "group": "fbd92986.1028c8",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": " STOP FOCUS",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "fa-pause fa-2x",
        "payload": "{\"action\":\"stop\"}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 530,
        "y": 600,
        "wires": [
            [
                "62030521.88317c"
            ]
        ]
    },
    {
        "id": "62030521.88317c",
        "type": "mqtt out",
        "z": "bccd1f23.87219",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "8dc3722c.06efa8",
        "x": 950,
        "y": 900,
        "wires": []
    },
    {
        "id": "3bd43039.bc5fb8",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "right 1mm",
        "group": "fbd92986.1028c8",
        "order": 9,
        "width": 1,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-right fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"UP\",\"distance\":1}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 520,
        "y": 780,
        "wires": [
            [
                "62030521.88317c"
            ]
        ]
    },
    {
        "id": "c0663029.2d03b",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "left 1mm",
        "group": "fbd92986.1028c8",
        "order": 5,
        "width": 1,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-left fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"DOWN\",\"distance\":1}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 520,
        "y": 900,
        "wires": [
            [
                "62030521.88317c"
            ]
        ]
    },
    {
        "id": "71f55a58.d7eaf4",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: 500µm",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "500",
        "payloadType": "num",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "be33e564.029358"
            ]
        ]
    },
    {
        "id": "9a1d0e7c.2d5a1",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "f0775525.cf806",
                "36b07697f00a4016"
            ]
        ]
    },
    {
        "id": "f782a471.447748",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: 2mL/min",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 150,
        "y": 440,
        "wires": [
            [
                "cb2d5174.cfe9f"
            ]
        ]
    },
    {
        "id": "73b8252a.5ca754",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: 2mL",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "68962547.34a67c"
            ]
        ]
    },
    {
        "id": "6451f991.aaac1",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "stop pump",
        "group": "707d9797.c8e798",
        "order": 4,
        "width": 4,
        "height": 2,
        "passthru": true,
        "label": " STOP PUMP",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "fa-pause fa-2x",
        "payload": "{\"action\":\"stop\"}",
        "payloadType": "json",
        "topic": "actuator/pump",
        "topicType": "str",
        "x": 810,
        "y": 200,
        "wires": [
            [
                "bdc8ce57.de1f08"
            ]
        ]
    },
    {
        "id": "cfc783d7.d6ceb",
        "type": "link in",
        "z": "bccd1f23.87219",
        "name": "Optics recalculation",
        "links": [
            "559a8085.1d6b9",
            "5d5ad36d2c50dcc2"
        ],
        "x": 755,
        "y": 120,
        "wires": [
            [
                "8038414a.34461"
            ]
        ]
    },
    {
        "id": "326a1d95.ca21aa",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "bccd1f23.87219",
        "name": "",
        "x": 810,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "2d371e59.b0e50a",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: 1000µm/s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "1000",
        "payloadType": "num",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "3a86de51.765b9a"
            ]
        ]
    },
    {
        "id": "167cda35.c9b6ae",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "right 100um",
        "group": "fbd92986.1028c8",
        "order": 8,
        "width": 1,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-right fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"UP\",\"distance\":0.1}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 530,
        "y": 820,
        "wires": [
            [
                "62030521.88317c"
            ]
        ]
    },
    {
        "id": "72a7c597.9374fc",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "left 100um",
        "group": "fbd92986.1028c8",
        "order": 6,
        "width": 1,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-left fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"DOWN\",\"distance\":0.1}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 530,
        "y": 860,
        "wires": [
            [
                "62030521.88317c"
            ]
        ]
    },
    {
        "id": "f0775525.cf806",
        "type": "ui_multistate_switch",
        "z": "bccd1f23.87219",
        "name": "light_control",
        "group": "4248342d.e55fac",
        "order": 1,
        "width": 6,
        "height": 1,
        "label": "Light  ",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "On",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 350,
        "y": 140,
        "wires": [
            [
                "cbb8afed.0a026"
            ]
        ]
    },
    {
        "id": "8ea9dc9a.c7d87",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "Encapsulate settings",
        "func": "msg.payload = {\n    \"action\":\"settings\", \n    \"settings\":{[msg.topic]:msg.payload}\n}\n\nmsg.topic = \"imager/image\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1480,
        "wires": [
            [
                "845e06e1.0d812"
            ]
        ]
    },
    {
        "id": "5765a825.a595c8",
        "type": "ui_slider",
        "z": "bccd1f23.87219",
        "name": "Shutter speed slider",
        "label": "Shutter Speed",
        "tooltip": "In microseconds, up to 1000µs, 125µs by default",
        "group": "8c38a81e.9897a8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "shutter_speed",
        "topicType": "str",
        "min": "125",
        "max": "1000",
        "step": "1",
        "className": "",
        "x": 600,
        "y": 1400,
        "wires": [
            [
                "8ea9dc9a.c7d87"
            ]
        ]
    },
    {
        "id": "845e06e1.0d812",
        "type": "mqtt out",
        "z": "bccd1f23.87219",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "8dc3722c.06efa8",
        "x": 1210,
        "y": 1560,
        "wires": []
    },
    {
        "id": "2350e507.d4e302",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: 125µs",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "125",
        "payloadType": "num",
        "x": 140,
        "y": 1400,
        "wires": [
            [
                "5765a825.a595c8"
            ]
        ]
    },
    {
        "id": "5e147425.7666ec",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "Encapsulate wb gain settings",
        "func": "msg.payload = {\n    \"action\":\"settings\", \n    \"settings\":{\"white_balance_gain\":{\n        [msg.topic]:Math.round(msg.payload*100)\n        }\n    }\n}\nmsg.topic = \"imager/image\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1640,
        "wires": [
            [
                "845e06e1.0d812"
            ]
        ]
    },
    {
        "id": "82722a3c.846b3",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: AUTO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "white_balance",
        "payload": "on",
        "payloadType": "str",
        "x": 140,
        "y": 1440,
        "wires": [
            [
                "6c5451ce63e79adc",
                "5203ad1a50db602e"
            ]
        ]
    },
    {
        "id": "c3cdf9e.1d27308",
        "type": "subflow:4ed26b8b.253504",
        "z": "bccd1f23.87219",
        "name": "",
        "env": [],
        "x": 120,
        "y": 1600,
        "wires": [
            [
                "6be64480.7e7e24",
                "6d49d161.13628",
                "8ef294ba.12213",
                "8e336e58.14722"
            ]
        ]
    },
    {
        "id": "6be64480.7e7e24",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Get red_gain",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.red_gain",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 1620,
        "wires": [
            [
                "d5415af6.e06cc"
            ]
        ]
    },
    {
        "id": "6d49d161.13628",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Get blue_gain",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.blue_gain",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1660,
        "wires": [
            [
                "dba68c1f.e3144"
            ]
        ]
    },
    {
        "id": "56835fa1.2fe538",
        "type": "subflow:4ed26b8b.253504",
        "z": "bccd1f23.87219",
        "name": "",
        "env": [],
        "x": 960,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "8ef294ba.12213",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Get analog_gain",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.analog_gain",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1540,
        "wires": [
            [
                "a6c7eec4.f7a918"
            ]
        ]
    },
    {
        "id": "8e336e58.14722",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Get digital_gain",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.digital_gain",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1580,
        "wires": [
            [
                "66b37eef.f3f9e"
            ]
        ]
    },
    {
        "id": "a6c7eec4.f7a918",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "d": true,
        "name": "Analog gain field",
        "label": "Analog Gain",
        "tooltip": "From 1.0 to 12.0",
        "group": "8c38a81e.9897a8",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "analog",
        "topicType": "str",
        "x": 580,
        "y": 1540,
        "wires": [
            [
                "44e02933.a66688",
                "d361a2c4.0990f8"
            ]
        ]
    },
    {
        "id": "66b37eef.f3f9e",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "d": true,
        "name": "Digital gain field",
        "label": "Digital Gain",
        "tooltip": "From 1.0 to 64.0. Overexpose starting at 4.0",
        "group": "8c38a81e.9897a8",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "digital",
        "topicType": "str",
        "x": 580,
        "y": 1580,
        "wires": [
            [
                "44e02933.a66688",
                "d361a2c4.0990f8"
            ]
        ]
    },
    {
        "id": "44e02933.a66688",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "Encapsulate image gain settings",
        "func": "msg.payload = {\n    \"action\":\"settings\", \n    \"settings\":{\"image_gain\":{\n        [msg.topic]:Math.round(msg.payload*100)\n        }\n    }\n}\nmsg.topic = \"imager/image\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 910,
        "y": 1560,
        "wires": [
            [
                "845e06e1.0d812"
            ]
        ]
    },
    {
        "id": "d361a2c4.0990f8",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "topic *_gain",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "topic&'_gain'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 1600,
        "wires": [
            [
                "56835fa1.2fe538"
            ]
        ]
    },
    {
        "id": "d8d006bf.2947f",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: ISO 100",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 150,
        "y": 1360,
        "wires": [
            [
                "9feb06fb.43b558",
                "7b40a26b77b6ad8b"
            ]
        ]
    },
    {
        "id": "9feb06fb.43b558",
        "type": "ui_multistate_switch",
        "z": "bccd1f23.87219",
        "name": "ISO selector",
        "group": "8c38a81e.9897a8",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "ISO",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "100",
                "value": "100",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "200",
                "value": "200",
                "valueType": "num",
                "color": "#999999"
            },
            {
                "label": "320",
                "value": "320",
                "valueType": "num",
                "color": "#ff6666"
            },
            {
                "label": "400",
                "value": "400",
                "valueType": "num",
                "color": "#009999"
            },
            {
                "label": "500",
                "value": "500",
                "valueType": "num",
                "color": "#cccc00"
            },
            {
                "label": "640",
                "value": "640",
                "valueType": "num",
                "color": "#ff33cc"
            },
            {
                "label": "800",
                "value": "800",
                "valueType": "num",
                "color": "#cc6600"
            }
        ],
        "topic": "",
        "x": 570,
        "y": 1320,
        "wires": [
            [
                "eb9966de.cf13c8"
            ]
        ]
    },
    {
        "id": "eb9966de.cf13c8",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "iso",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 1340,
        "wires": [
            [
                "8ea9dc9a.c7d87"
            ]
        ]
    },
    {
        "id": "be33e564.029358",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "name": "focus_distance",
        "label": "Focus Distance (in µm)",
        "tooltip": "in µm, 25µm resolution",
        "group": "fbd92986.1028c8",
        "order": 7,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "focus_distance",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 540,
        "y": 520,
        "wires": [
            [
                "dc48dc42.98d18"
            ]
        ]
    },
    {
        "id": "3a86de51.765b9a",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "name": "focus_speed",
        "label": "Focus Speed (in µm/sec)",
        "tooltip": "in µm/sec",
        "group": "fbd92986.1028c8",
        "order": 11,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "focus_speed",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 530,
        "y": 560,
        "wires": [
            [
                "dc48dc42.98d18"
            ]
        ]
    },
    {
        "id": "cb2d5174.cfe9f",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "name": "pump_flowrate",
        "label": "Flowrate (ml/min)*",
        "tooltip": "",
        "group": "707d9797.c8e798",
        "order": 2,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "pump_flowrate",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 540,
        "y": 440,
        "wires": [
            [
                "dc48dc42.98d18"
            ]
        ]
    },
    {
        "id": "d5415af6.e06cc",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "name": "WB Red input",
        "label": "WB: Red",
        "tooltip": "From 1.0 to 8.0",
        "group": "8c38a81e.9897a8",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "red",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 580,
        "y": 1620,
        "wires": [
            [
                "d361a2c4.0990f8",
                "5e147425.7666ec"
            ]
        ]
    },
    {
        "id": "dba68c1f.e3144",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "name": "WB Blue input",
        "label": "WB: Blue",
        "tooltip": "From 1.0 to 64.0",
        "group": "8c38a81e.9897a8",
        "order": 5,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "blue",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 580,
        "y": 1660,
        "wires": [
            [
                "d361a2c4.0990f8",
                "5e147425.7666ec"
            ]
        ]
    },
    {
        "id": "335a730b9a3830ff",
        "type": "ui_template",
        "z": "bccd1f23.87219",
        "group": "4248342d.e55fac",
        "name": "Information Lens",
        "order": 3,
        "width": 6,
        "height": 2,
        "format": "<h10>\n    Objective lens aperture: \n    <span id=\"obj_aperture\" ng-bind-html=\"msg.payload.acq_fnumber_objective\">\n    </span>mm\n</h10>\n<h10>\n    Magnification : X\n    <span id=\"obj_magnification\" ng-bind-html=\"msg.payload.acq_magnification\">\n    </span>\n</h10>\n<h10>\n    Pixel resolution :\n    <span id=\"process_pixel\" ng-bind-html=\"msg.payload.process_pixel\"></span>\n    μm\n</h10>\n<h10>\n    Smallest cells to explore :\n    <span id=\"min_size\" ng-bind-html=\"msg.payload.sug_min\"></span>\n    μm\n</h10>\n<h10>\n    Biggest cells to explore :\n    <span id=\"max_size\" ng-bind-html=\"msg.payload.sug_max\"></span>\n    μm\n</h10>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1130,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "142bc61a0bde1ba9",
        "type": "link in",
        "z": "bccd1f23.87219",
        "name": "Cam Stream",
        "links": [
            "49111a72f4e32740"
        ],
        "x": 235,
        "y": 40,
        "wires": [
            [
                "3ca8be38ddb269e9"
            ]
        ]
    },
    {
        "id": "3ca8be38ddb269e9",
        "type": "template",
        "z": "bccd1f23.87219",
        "name": "Prepare stream HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<center>\n  <img src=\"http://{{payload}}:8000/stream.mjpg\"\n    onerror=\"this.onerror=null; this.src='http://{{payload}}:80/error.svg'\"\n    alt=\"If you see this, there probably is an error either with your camera or with the python service. Please restart your machine.\"\n    width=\"100%\" height=\"100%\">\n</center>",
        "output": "str",
        "x": 380,
        "y": 40,
        "wires": [
            [
                "6a84252a.d52a0c"
            ]
        ]
    },
    {
        "id": "6c5451ce63e79adc",
        "type": "ui_multistate_switch",
        "z": "bccd1f23.87219",
        "name": "Auto white balance",
        "group": "8c38a81e.9897a8",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Auto white balance",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "change",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "On",
                "value": "auto",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Off",
                "value": "off",
                "valueType": "str",
                "color": "#999999"
            }
        ],
        "topic": "white_balance",
        "x": 590,
        "y": 1480,
        "wires": [
            [
                "8ea9dc9a.c7d87"
            ]
        ]
    },
    {
        "id": "d40215e1e17a9807",
        "type": "ui_template",
        "z": "bccd1f23.87219",
        "group": "fbd92986.1028c8",
        "name": "Right",
        "order": 3,
        "width": 4,
        "height": 1,
        "format": "<div class=\"conteneur\">\n  <div class=\"text\">RIGHT</div>\n  <div class=\"infoR\">\n      <div class=\"element 1\">100 µm</div>\n      <div class=\"element 2\">1 mm</div>\n      <div class=\"element 3\">Manual</div>\n  </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 190,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "6893082a3d7de514",
        "type": "ui_template",
        "z": "bccd1f23.87219",
        "group": "db554934a715783e",
        "name": "style",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .conteneur:\n    {\n        display: flex;\n      \tflex-direction: column;\n      \twidth: 13.8em;\n    }\n    .element:nth-child(1)\n    {\n        flex:1;\n    }\n    .element:nth-child(2)\n    {\n        flex:1;\n    }\n    .element:nth-child(3)\n    {\n        flex:2;\n    }\n    .element:nth-child(4)\n    {\n        flex:1;\n    }\n    .element4\n    {\n        flex:1;\n    }\n    .infoR\n    {\n        display: flex;\n        flex-direction: row;\n        text-align: center;\n      \tfont-size: 12px;\n    }\n    .infoL\n    {\n        display: flex;\n        flex-direction: row-reverse;\n        text-align: center;\n      \tfont-size: 12px;\n    }\n    .text\n    {\n      \tfont-size: 12px;\n      \ttext-align: center;\n    }\n    p {\n      \ttext-align: center;\n    }\n    h10 {\n        font-size: 13px;\n    }\n    h11 {\n        font-size: 12px;\n        text-align: center;\n    }\n</style>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 190,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "543d5731872d632b",
        "type": "ui_template",
        "z": "bccd1f23.87219",
        "group": "fbd92986.1028c8",
        "name": "Left",
        "order": 1,
        "width": 4,
        "height": 1,
        "format": "<div class=\"conteneur\">\n  <div class=\"text\">LEFT</div>\n  <div class=\"infoL\">\n      <div class=\"element 1\">100 µm</div>\n      <div class=\"element 2\">1 mm</div>\n      <div class=\"element 3\">Manual</div>\n  </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 190,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "b1284940f84e0807",
        "type": "ui_template",
        "z": "bccd1f23.87219",
        "group": "fbd92986.1028c8",
        "name": "Manual Config",
        "order": 2,
        "width": 4,
        "height": 1,
        "format": "<h11>\n    Manual Configuration</br>\n    Choose the translation values below\n</h11>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 220,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "9bc3e85c28d70120",
        "type": "link in",
        "z": "bccd1f23.87219",
        "name": "Choice objective",
        "links": [
            "95b374a91cb16f2b"
        ],
        "x": 175,
        "y": 200,
        "wires": [
            [
                "413b72d5fa015592",
                "3581eb5deb889b01"
            ]
        ]
    },
    {
        "id": "413b72d5fa015592",
        "type": "ui_dropdown",
        "z": "bccd1f23.87219",
        "name": "acq_fnumber_objective",
        "label": "Choose Your Lens",
        "tooltip": "",
        "place": "Select option",
        "group": "4248342d.e55fac",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "f 16mm 1/2.5\" 5MP IR",
                "value": 16,
                "type": "num"
            },
            {
                "label": "f 6mm 1/2.5\" 5MP IR",
                "value": 6,
                "type": "num"
            },
            {
                "label": "f 3.6mm 1/2.5\" 5MP IR",
                "value": 3.6,
                "type": "num"
            },
            {
                "label": "f 1.71mm 1/2.5\" 5MP IR",
                "value": 1.71,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "acq_fnumber_objective",
        "topicType": "str",
        "className": "",
        "x": 390,
        "y": 200,
        "wires": [
            [
                "75b7aeca42db75bd"
            ]
        ]
    },
    {
        "id": "75b7aeca42db75bd",
        "type": "link out",
        "z": "bccd1f23.87219",
        "name": "",
        "mode": "link",
        "links": [
            "a9f290c81031e81e"
        ],
        "x": 595,
        "y": 280,
        "wires": []
    },
    {
        "id": "36b07697f00a4016",
        "type": "ui_multistate_switch",
        "z": "bccd1f23.87219",
        "name": "light_control",
        "group": "7e3a6f5233943da5",
        "order": 1,
        "width": 6,
        "height": 1,
        "label": "Light  ",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Off",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "On",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 350,
        "y": 100,
        "wires": [
            [
                "cbb8afed.0a026"
            ]
        ]
    },
    {
        "id": "3581eb5deb889b01",
        "type": "ui_dropdown",
        "z": "bccd1f23.87219",
        "name": "acq_fnumber_objective",
        "label": "Choose Your Lens",
        "tooltip": "",
        "place": "Select option",
        "group": "7e3a6f5233943da5",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "f 16mm 1/2.5\" 5MP IR",
                "value": 16,
                "type": "num"
            },
            {
                "label": "f 6mm 1/2.5\" 5MP IR",
                "value": 6,
                "type": "num"
            },
            {
                "label": "f 3.6mm 1/2.5\" 5MP IR",
                "value": 3.6,
                "type": "num"
            },
            {
                "label": "f 1.71mm 1/2.5\" 5MP IR",
                "value": 1.71,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "acq_fnumber_objective",
        "topicType": "str",
        "className": "",
        "x": 390,
        "y": 240,
        "wires": [
            [
                "75b7aeca42db75bd"
            ]
        ]
    },
    {
        "id": "766492c0efbd2f58",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "413b72d5fa015592",
                "75b7aeca42db75bd",
                "3581eb5deb889b01"
            ]
        ]
    },
    {
        "id": "7b40a26b77b6ad8b",
        "type": "ui_multistate_switch",
        "z": "bccd1f23.87219",
        "name": "ISO selector",
        "group": "4a3d149548f7d6bf",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "ISO",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "100",
                "value": "100",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "200",
                "value": "200",
                "valueType": "num",
                "color": "#999999"
            },
            {
                "label": "320",
                "value": "320",
                "valueType": "num",
                "color": "#ff6666"
            },
            {
                "label": "400",
                "value": "400",
                "valueType": "num",
                "color": "#009999"
            },
            {
                "label": "500",
                "value": "500",
                "valueType": "num",
                "color": "#cccc00"
            },
            {
                "label": "640",
                "value": "640",
                "valueType": "num",
                "color": "#ff33cc"
            },
            {
                "label": "800",
                "value": "800",
                "valueType": "num",
                "color": "#cc6600"
            }
        ],
        "topic": "",
        "x": 570,
        "y": 1360,
        "wires": [
            [
                "eb9966de.cf13c8"
            ]
        ]
    },
    {
        "id": "313fe02cb59030d9",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "Change mode",
        "func": "var activation_msg = {}\n\n//Mode expert\nif (msg.payload === 0){\n    activation_msg.payload = {\"group\":{\"show\":[\"Optic_Configuration_Preview\",\"Optic_Configuration_Optic_Characterization_Expert\", \"Optic_Configuration_Camera_Settings_Expert\", \"Optic_Configuration_Focus_Adjustment_Expert\", \"Optic_Configuration_Fluidic_Manual_Manipulation\", \"Optic_Configuration_Navigation\"],\"hide\":[\"Optic_Configuration_Optic_Characterization_Beginner\", \"Optic_Configuration_Camera_Settings_Beginner\", \"Optic_Configuration_Focus_Adjustment_Beginner\",]}};    \n    return activation_msg;\n}\n\n//Mode débutant\nelse if (msg.payload === 1){\n    activation_msg.payload = {\"group\":{\"show\":[\"Optic_Configuration_Preview\",\"Optic_Configuration_Optic_Characterization_Beginner\", \"Optic_Configuration_Camera_Settings_Beginner\", \"Optic_Configuration_Focus_Adjustment_Beginner\", \"Optic_Configuration_Fluidic_Manual_Manipulation\", \"Optic_Configuration_Navigation\"],\"hide\":[\"Optic_Configuration_Optic_Characterization_Expert\", \"Optic_Configuration_Camera_Settings_Expert\", \"Optic_Configuration_Focus_Adjustment_Expert\",]}};    \n    return activation_msg;\n}\nelse{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1980,
        "wires": [
            [
                "073aefe6ebd2b6cf"
            ]
        ]
    },
    {
        "id": "073aefe6ebd2b6cf",
        "type": "ui_ui_control",
        "z": "bccd1f23.87219",
        "name": "show/hide net groups",
        "events": "change",
        "x": 740,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "7d79b1f1d435e715",
        "type": "ui_multistate_switch",
        "z": "bccd1f23.87219",
        "d": true,
        "name": "Mode selection",
        "group": "4647b4c9d3eb6365",
        "order": 1,
        "width": 6,
        "height": 1,
        "label": "",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Expert mode",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Beginner mode",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 340,
        "y": 1940,
        "wires": [
            [
                "7d266d4166315d99",
                "313fe02cb59030d9"
            ]
        ]
    },
    {
        "id": "d77b6caec1ba8d4d",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Change global mode",
        "rules": [
            {
                "t": "set",
                "p": "mode",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 1900,
        "wires": [
            [
                "bfce8e77727b9fbf"
            ]
        ]
    },
    {
        "id": "bfce8e77727b9fbf",
        "type": "link out",
        "z": "bccd1f23.87219",
        "name": "out_optic_configuration",
        "mode": "link",
        "links": [
            "127fd2e4447c6ad1",
            "4dd140903cddda10",
            "713395d7523b16e8",
            "7164566e38c0e242",
            "87171ccda60d4390",
            "97f9c6da2e1095d2",
            "c840a7c66cf51acc"
        ],
        "x": 875,
        "y": 1900,
        "wires": []
    },
    {
        "id": "a45e550cb5e1c1d1",
        "type": "link in",
        "z": "bccd1f23.87219",
        "name": "in_optic_configuration",
        "links": [
            "082af9181824a196",
            "319bff50477bc5fc",
            "4cfbba68449a28e2",
            "7a7343ef8627ec57",
            "a85a1f2d75981a8c",
            "b6e04f52920c6dcb",
            "c2d9b90e27bc022c",
            "de32bd4b6ba8dfd3",
            "d3892bf83549fd59"
        ],
        "x": 215,
        "y": 1940,
        "wires": [
            [
                "7d79b1f1d435e715",
                "313fe02cb59030d9"
            ]
        ]
    },
    {
        "id": "7d266d4166315d99",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "Get mode value",
        "func": "if (msg.payload != global.get(\"mode\")){\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1900,
        "wires": [
            [
                "d77b6caec1ba8d4d"
            ]
        ]
    },
    {
        "id": "8fcff5cdebc013f8",
        "type": "ui_template",
        "z": "bccd1f23.87219",
        "group": "957f2e43d9ce521e",
        "name": "Right",
        "order": 3,
        "width": 4,
        "height": 1,
        "format": "<div class=\"conteneur\">\n  <div class=\"text\">RIGHT</div>\n  <div class=\"infoR\">\n        <div class=\"element 1\">10 µm</div>\n        <div class=\"element 2\">100 µm</div>\n        <div class=\"element4\">1 mm</div>\n        <div class=\"element 5\">10 mm</div>\n  </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 190,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "3770173700cf0db2",
        "type": "ui_template",
        "z": "bccd1f23.87219",
        "group": "957f2e43d9ce521e",
        "name": "Left",
        "order": 1,
        "width": 4,
        "height": 1,
        "format": "<div class=\"conteneur\">\n  <div class=\"text\">LEFT</div>\n  <div class=\"infoL\">\n        <div class=\"element 1\">10 µm</div>\n        <div class=\"element 2\">100 µm</div>\n        <div class=\"element4\">1 mm</div>\n        <div class=\"element 5\">10 mm</div>\n  </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 190,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "fa0a591a1f5fd74c",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "right 1mm",
        "group": "957f2e43d9ce521e",
        "order": 10,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-double-right fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"UP\",\"distance\":1}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 520,
        "y": 1000,
        "wires": [
            [
                "62030521.88317c"
            ]
        ]
    },
    {
        "id": "4f949a16d44eecd9",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "right 100um",
        "group": "957f2e43d9ce521e",
        "order": 9,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-right fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"UP\",\"distance\":0.1}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 530,
        "y": 1040,
        "wires": [
            [
                "62030521.88317c"
            ]
        ]
    },
    {
        "id": "2a482500e06e1516",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "left 10mm",
        "group": "957f2e43d9ce521e",
        "order": 4,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-double-left fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"DOWN\",\"distance\":10}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 520,
        "y": 1120,
        "wires": [
            [
                "62030521.88317c"
            ]
        ]
    },
    {
        "id": "d7be69b77c0dcb2b",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "left 1mm",
        "group": "957f2e43d9ce521e",
        "order": 5,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-double-left fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"DOWN\",\"distance\":1}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 520,
        "y": 1160,
        "wires": [
            [
                "62030521.88317c"
            ]
        ]
    },
    {
        "id": "2960771b315ca9de",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "right 10um",
        "group": "957f2e43d9ce521e",
        "order": 8,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-right fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"UP\",\"distance\":0.01}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 530,
        "y": 1080,
        "wires": [
            [
                "62030521.88317c"
            ]
        ]
    },
    {
        "id": "2347b45c7bd1ae1c",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "right 10mm",
        "group": "957f2e43d9ce521e",
        "order": 11,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-double-right fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"UP\",\"distance\":10}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 530,
        "y": 960,
        "wires": [
            [
                "62030521.88317c"
            ]
        ]
    },
    {
        "id": "a08a74dac08241e6",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "left 100um",
        "group": "957f2e43d9ce521e",
        "order": 6,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-left fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"DOWN\",\"distance\":0.1}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 530,
        "y": 1200,
        "wires": [
            [
                "62030521.88317c"
            ]
        ]
    },
    {
        "id": "0539e37448b4cb9c",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "left 10um",
        "group": "957f2e43d9ce521e",
        "order": 7,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-left fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"DOWN\",\"distance\":0.01}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 520,
        "y": 1240,
        "wires": [
            [
                "62030521.88317c"
            ]
        ]
    },
    {
        "id": "7f9793edddad3212",
        "type": "ui_template",
        "z": "bccd1f23.87219",
        "group": "957f2e43d9ce521e",
        "name": "Manual Config",
        "order": 2,
        "width": 4,
        "height": 2,
        "format": "<h11>\n    In order to focus on your sample you can move it to the right or to the left to obtain a sharp image.</br>\n    The values displayed correspond to the length of the translation\n</h11>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 220,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "66c31ceb7f02964e",
        "type": "link out",
        "z": "bccd1f23.87219",
        "name": "Pixel Resolution",
        "mode": "link",
        "links": [
            "1c3676fd3f8aa26d"
        ],
        "x": 1075,
        "y": 160,
        "wires": []
    },
    {
        "id": "01619269b9710a55",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "stop focus",
        "group": "957f2e43d9ce521e",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": " STOP FOCUS",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "fa-pause fa-2x",
        "payload": "{\"action\":\"stop\"}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 530,
        "y": 637.5,
        "wires": [
            [
                "62030521.88317c"
            ]
        ]
    },
    {
        "id": "5203ad1a50db602e",
        "type": "ui_multistate_switch",
        "z": "bccd1f23.87219",
        "name": "Auto white balance",
        "group": "4a3d149548f7d6bf",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Auto white balance",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "change",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "On",
                "value": "auto",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Off",
                "value": "off",
                "valueType": "str",
                "color": "#999999"
            }
        ],
        "topic": "white_balance",
        "x": 590,
        "y": 1440,
        "wires": [
            [
                "8ea9dc9a.c7d87"
            ]
        ]
    },
    {
        "id": "6b34c456.83178c",
        "type": "ui_text_input",
        "z": "baa1e3d9.cb29d",
        "name": "acq_id",
        "label": "Acquisition unique ID*",
        "tooltip": "",
        "group": "4322c187.e73e5",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "acq_id",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 670,
        "y": 240,
        "wires": [
            [
                "fb887036.12429"
            ]
        ]
    },
    {
        "id": "cc0ca68b.4263a8",
        "type": "ui_dropdown",
        "z": "baa1e3d9.cb29d",
        "name": "acq_celltype",
        "label": "Flowcell thickness*",
        "tooltip": "",
        "place": "Select option",
        "group": "4322c187.e73e5",
        "order": 7,
        "width": 10,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "200 μm µ-Slide I Luer",
                "value": 200,
                "type": "num"
            },
            {
                "label": "300 µm capillary",
                "value": 300,
                "type": "num"
            },
            {
                "label": "400 μm µ-Slide I Luer",
                "value": 400,
                "type": "num"
            },
            {
                "label": "600 μm µ-Slide I Luer",
                "value": 600,
                "type": "num"
            },
            {
                "label": "800 μm µ-Slide I Luer",
                "value": 800,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "acq_celltype",
        "topicType": "str",
        "className": "",
        "x": 670,
        "y": 120,
        "wires": [
            [
                "fb887036.12429",
                "99b11fe4.2795d"
            ]
        ]
    },
    {
        "id": "fb887036.12429",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "set global",
        "func": "global.set(msg.topic, msg.payload);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 260,
        "wires": [
            [
                "52ea7d01.711034"
            ]
        ]
    },
    {
        "id": "bb2bb7ce.1d1458",
        "type": "ui_template",
        "z": "baa1e3d9.cb29d",
        "group": "858a0e3c.987fe",
        "name": "Stream Pi Camera",
        "order": 1,
        "width": 10,
        "height": 8,
        "format": "<span ng-bind-html=\"msg.payload\"></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 650,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "d0c5b57d.590818",
        "type": "ui_ui_control",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "events": "change",
        "x": 1220,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "c72f8fae.23bd4",
        "type": "ui_button",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "group": "b7919ae2.c01788",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Previous",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_return",
        "payload": "{\"tab\":\"Optic Configuration\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 1080,
        "y": 700,
        "wires": [
            [
                "d0c5b57d.590818"
            ]
        ]
    },
    {
        "id": "29be525e.0c87fe",
        "type": "ui_template",
        "z": "baa1e3d9.cb29d",
        "group": "b5d61bc7.54fe48",
        "name": "Show Metadata",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "<div>\n    <table style=\"text-align: center; width:100%\">\n        <tr style=\"vertical-align: top\">\n            <td>\n                <h3>Sample</h3>\n                <p><strong>id:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_id\"></span></p>\n                <p><strong>project:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_project\"></span></p>\n                <p><strong>ship:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_ship\"></span></p>\n                <p><strong>operator:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_operator\"></span></p>\n                <p><strong>sampling gear:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_sampling_gear\"></span></p>\n                <p><strong>concentrated volume:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_concentrated_sample_volume\"></span></p>\n                <p ng-if=msg.payload.config.sample_gear_net_opening><strong>gear net opening:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_gear_net_opening\"></span></p>\n                <p ng-if=msg.payload.config.sample_total_volume><strong>total volume filtered:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_total_volume\"></span></p>\n            </td>\n            <td>\n                <h3>Acquisition</h3>\n                <p><strong>id:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_id\"></span></p>\n                <p><strong>instrument:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_instrument\"></span></p>\n                <p><strong>instrument id:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_instrument_id\"></span></p>\n                <p><strong>camera:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_camera\"></span></p>\n                <p><strong>celltype:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_celltype\"></span>\n                </p>\n                <p><strong>minimum mesh:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_minimum_mesh\"></span></p>\n                <p><strong>maximum mesh:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_maximum_mesh\"></span></p>\n                <p><strong>min esd:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_min_esd\"></span>\n                </p>\n                <p><strong>max esd:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_max_esd\"></span>\n                </p>\n                <p><strong>volume:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_volume\"></span></p>\n                <p><strong>magnification:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_magnification\"></span></p>\n                <p><strong>fnumber objective:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_fnumber_objective\"></span></p>\n                <p><strong>software:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_software\"></span>\n                </p>\n            </td>\n        </tr>\n        <tr style=\"vertical-align: top\">\n            <td>\n                <h3>Object</h3>\n                <p><strong>latitude:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_lat\"></span>\n                </p>\n                <p><strong>longitude:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_lon\"></span>\n                </p>\n                <p ng-if=msg.payload.config.object_lat_end><strong>latitude end:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_lat_end\"></span></p>\n                <p ng-if=msg.payload.config.object_lon_end><strong>longitude end:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_lon_end\"></span></p>\n                <p><strong>date:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_date\"></span></p>\n                <p><strong>time:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_time\"></span> UTC</p>\n                <p ng-if=msg.payload.config.object_date_end><strong>date end:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_date_end\"></span></p>\n                <p ng-if=msg.payload.config.object_time_end><strong>time end:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_time_end\"></span> UTC</p>\n                <p><strong>depth min:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_depth_min\"></span></p>\n                <p><strong>depth max:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_depth_max\"></span></p>\n            </td>\n            <td>\n                <h3>Process</h3>\n                <p><strong>pixel:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.process_pixel\"></span>\n                </p>\n                <p><strong>id:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.process_id\"></span></p>\n            </td>\n        </tr>\n    </table>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1180,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "4b489713.ccde5",
        "type": "ui_button",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "group": "4322c187.e73e5",
        "order": 11,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Start Acquisition",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "camera",
        "payload": "",
        "payloadType": "str",
        "topic": "imager/image",
        "topicType": "str",
        "x": 460,
        "y": 520,
        "wires": [
            [
                "c9f510c0.7d1328"
            ]
        ]
    },
    {
        "id": "c9f510c0.7d1328",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "Image control",
        "func": "// Reset the number of images taken\nflow.set('img_counter', 0);\n\nvar acq_celltype = global.get(\"acq_celltype\");\nvar acq_minimum_mesh = global.get(\"acq_minimum_mesh\");\nvar acq_maximum_mesh = global.get(\"acq_maximum_mesh\");\nvar imaging_pump_volume = global.get(\"imaging_pump_volume\");\nvar acq_id = global.get(\"acq_id\");\nvar nb_frame = global.get(\"nb_frame\");\nvar pump_direction = global.get(\"pump_direction\");\nvar sleep_before = global.get(\"sleep_before\");\nvar object_date = global.get(\"object_date\");\n\nif (acq_celltype === undefined || acq_celltype === \"\") {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Type of the flowcell\";\n    return [null, msg];\n} else if (acq_minimum_mesh === undefined || acq_minimum_mesh === \"\") {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Lower fraction size\";\n    return [null, msg];\n} else if (acq_maximum_mesh === undefined || acq_maximum_mesh === \"\") {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Upper fraction size\";\n    return [null, msg];\n} else if (imaging_pump_volume === undefined || imaging_pump_volume === \"\" || imaging_pump_volume === null) {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Volume inbetween images\";\n    return [null, msg];\n} else if (acq_id === undefined || acq_id === \"\") {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Acquisition ID\";\n    return [null, msg];\n} else if (nb_frame === undefined || nb_frame === \"\" || nb_frame === null) {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Number of image to save\";\n    return [null, msg];\n} else if (pump_direction === undefined || pump_direction === \"\" || pump_direction === null) {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Pump direction\";\n    return [null, msg];\n} else if (sleep_before === undefined || sleep_before === \"\" || sleep_before === null) {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Delay before image\";\n    return [null, msg];\n}else if (object_date === undefined || object_date === \"\" || object_date === null) {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Object date\";\n    return [null, msg];\n}\n\nmsg.payload = {\n    \"action\": \"image\",\n    \"sleep\": sleep_before,\n    \"pump_direction\": pump_direction,\n    \"volume\": imaging_pump_volume,\n    \"nb_frame\": nb_frame,\n}\nmsg.send = true\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 520,
        "wires": [
            [
                "52ea7d01.711034",
                "40c12463.a1f84c",
                "a4abb1ae.2ae418"
            ],
            [
                "20e0a8c8.edbeb"
            ]
        ]
    },
    {
        "id": "20e0a8c8.edbeb",
        "type": "ui_toast",
        "z": "baa1e3d9.cb29d",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 950,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "c3e50240.82aa58",
        "type": "mqtt out",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "8dc3722c.06efa8",
        "x": 1150,
        "y": 480,
        "wires": []
    },
    {
        "id": "3a4450b1.4459a8",
        "type": "ui_button",
        "z": "baa1e3d9.cb29d",
        "name": "Stop Acquisition",
        "group": "4322c187.e73e5",
        "order": 10,
        "width": 5,
        "height": 1,
        "passthru": true,
        "label": "STOP ACQUISITION",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "cancel",
        "payload": "{\"action\":\"stop\"}",
        "payloadType": "json",
        "topic": "imager/image",
        "topicType": "str",
        "x": 460,
        "y": 560,
        "wires": [
            [
                "d74210ef.edc15"
            ]
        ]
    },
    {
        "id": "d74210ef.edc15",
        "type": "mqtt out",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "8dc3722c.06efa8",
        "x": 650,
        "y": 560,
        "wires": []
    },
    {
        "id": "bb62da8a.ebc328",
        "type": "ui_switch",
        "z": "baa1e3d9.cb29d",
        "name": "Pump direction",
        "label": "Pump direction",
        "tooltip": "BACKWARD / FORWARD",
        "group": "4322c187.e73e5",
        "order": 8,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "pump_direction",
        "topicType": "str",
        "style": "",
        "onvalue": "FORWARD",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "BACKWARD",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 460,
        "y": 600,
        "wires": [
            [
                "6b2239f3.41fa3"
            ]
        ]
    },
    {
        "id": "52ea7d01.711034",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "Encapsulate config",
        "func": "msg.payload = {\n\t\"action\": \"update_config\",\n\t\"config\": {\n    \t\"description\": {\n    \t\t\"sample_project\": \"Project's name\",\n    \t\t\"sample_id\": \"Sample ID\",\n    \t\t\"sample_uuid\": \"Sample UUID (Autogenerated)\",\n    \t\t\"sample_ship\": \"Ship's name\",\n    \t\t\"sample_operator\": \"Operator's name\",\n    \t\t\"sample_sampling_gear\": \"Sampling gear used\",\n    \t\t\"sample_concentrated_sample_volume\": \"Volume of concentrated sample, in mL\",\n    \t\t\"sample_total_volume\": \"Total volume filtered by the net used, in L\",\n    \t\t\"sample_dilution_factor\": \"Dilution factor of the sample, 0.5 if diluted by 2, 2 if concentrated by 2\",\n    \t\t\"sample_speed_through_water\": \"Speed of the boat through water when sampling, in kts\",\n    \t\t\"acq_id\": \"Acquisition ID\",\n    \t\t\"acq_uuid\": \"Acquisition UUID (Autogenerated)\",\n    \t\t\"acq_instrument\": \"Instrument type\",\n    \t\t\"acq_instrument_id\": \"Instrument ID\",\n    \t\t\"acq_celltype\": \"Flow cell dimension thickness, in µm\",\n    \t\t\"acq_minimum_mesh\": \"Minimum filtration mesh size, in µm\",\n    \t\t\"acq_maximum_mesh\": \"Maximum filtration mesh size, in µm\",\n    \t\t\"acq_min_esd\": \"\",\n    \t\t\"acq_max_esd\": \"\",\n    \t\t\"acq_volume\": \"Pumped volume, in mL\",\n\t\t    \"acq_imaged_volume\": \"Total imaged volume, in mL\",\n    \t\t\"acq_magnification\": \"Optical magnification\",\n    \t\t\"acq_fnumber_objective\": \"Focal length of the objective, in mm\",\n    \t\t\"acq_camera_name\": \"Name of the camera used\",\n    \t\t\"acq_nb_frame\": \"Number of picture taken\",\n            \"acq_local_datetime\": \"Instrument local datetime\",\n            \"acq_camera_resolution\": \"Resolution of the images\",\n            \"acq_camera_iso\": \"ISO Number of the images\",\n            \"acq_camera_shutter_speed\": \"Shutter speed of the images, in µs\",\n            \"acq_software\": \"Software version number\",\n    \t\t\"object_date\": \"Sample collection date (or beginning if using a net)\",\n    \t\t\"object_time\": \"Sample collection time (or beginning if using a net)\",\n    \t\t\"object_lat\": \"Sample collection latitude (or beginning if using a net)\",\n    \t\t\"object_lon\": \"Sample collection longitude (or beginning if using a net)\",\n    \t\t\"object_depth_min\": \"Sample collection minimal depth, in m\",\n    \t\t\"object_depth_max\": \"Sample collection maximum depth, in m\",\n    \t\t\"process_pixel\": \"Pixel imaging resolution, in µm/pixel\",\n    \t\t\"process_datetime\": \"Segmentation timestamp\",\n    \t\t\"process_id\": \"Segmentation ID\",\n    \t\t\"process_uuid\": \"Segmentation UUID (Autogenerated)\",\n    \t\t\"process_source\": \"Code source link of the executed code\",\n    \t\t\"process_commit\": \"Version reference of the executed code\",\n    \t\t\"sample_gear_net_opening\": \"Sample mouth opening dimension, in mm\",\n    \t\t\"object_date_end\": \"Sample end collection date when using a net\",\n    \t\t\"object_time_end\": \"Sample end collection time when using a net\",\n    \t\t\"object_lat_end\": \"Sample end collection latitude when using a net\",\n    \t\t\"object_lon_end\": \"Sample end collection longitude when using a net\",\n    \t},\n\t\t\"sample_project\": global.get(\"sample_project\"),\n\t\t\"sample_id\": global.get(\"sample_project\") + \"_\" + global.get(\"sample_id\"),\n\t\t\"sample_ship\": global.get(\"sample_ship\"),\n\t\t\"sample_operator\": global.get(\"sample_operator\"),\n\t\t\"sample_sampling_gear\": global.get(\"sample_sampling_gear\"),\n\t\t\"sample_concentrated_sample_volume\": global.get(\"sample_concentrated_sample_volume\"),\n\t\t\"sample_dilution_factor\": global.get(\"sample_dilution_factor\"),\n\t\t\"sample_speed_through_water\": global.get(\"sample_speed_through_water\"),\n\n\t\t\"acq_id\": global.get(\"sample_project\") + \"_\" + global.get(\"sample_id\")+ \"_\" + global.get(\"acq_id\"),\n\t\t\"acq_instrument\": global.get(\"acq_instrument\"),\n\t\t\"acq_instrument_id\": global.get(\"acq_instrument_id\"),\n\t\t\"acq_celltype\": global.get(\"acq_celltype\"),\n\t\t\"acq_minimum_mesh\": global.get(\"acq_minimum_mesh\"),\n\t\t\"acq_maximum_mesh\": global.get(\"acq_maximum_mesh\"),\n\t\t\"acq_min_esd\": global.get(\"acq_min_esd\"),\n\t\t\"acq_max_esd\": global.get(\"acq_max_esd\"),\n\t\t\"acq_volume\": global.get(\"acq_volume\"),\n\t\t\"acq_imaged_volume\": global.get(\"acq_imaged_volume\"),\n\t\t\"acq_magnification\": global.get(\"acq_magnification\"),\n\t\t\"acq_fnumber_objective\": global.get(\"acq_fnumber_objective\"),\n\t\t\"acq_camera\": global.get(\"acq_camera\"),\n\t\t\"acq_nb_frame\": global.get(\"nb_frame\"),\n\t\t\"acq_software\": global.get(\"acq_software\"),\n\n\t\t\"object_date\": global.get(\"object_date\"),\n\t\t\"object_time\": global.get(\"object_time\"),\n\t\t\"object_lat\": global.get(\"object_lat\"),\n\t\t\"object_lon\": global.get(\"object_lon\"),\n\t\t\"object_depth_min\": global.get(\"object_depth_min\"),\n\t\t\"object_depth_max\": global.get(\"object_depth_max\"),\n\n\t\t\"process_pixel\": global.get(\"process_pixel\"),\n\t\t\"process_source\": \"https://www.github.com/PlanktonPlanet/PlanktoScope\",\n\t\t\"process_commit\": global.get(\"process_commit\")\n\t}\n};\n\nif (msg.payload.config.sample_sampling_gear.startsWith(\"net\")) {\n\tmsg.payload.config[\"sample_gear_net_opening\"] = global.get(\"sample_gear_net_opening\")\n\tmsg.payload.config[\"object_date_end\"] = global.get(\"object_date_end\")\n\tmsg.payload.config[\"object_time_end\"] = global.get(\"object_time_end\")\n\tmsg.payload.config[\"object_lat_end\"] = global.get(\"object_lat_end\")\n\tmsg.payload.config[\"object_lon_end\"] = global.get(\"object_lon_end\")\n\tmsg.payload.config[\"sample_total_volume\"] = global.get(\"sample_total_volume\")\n}\n\nif ( msg.send == true){\n\treturn [msg, msg]\n}\nelse{\n\treturn [msg, null]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 480,
        "wires": [
            [
                "29be525e.0c87fe"
            ],
            [
                "c3e50240.82aa58"
            ]
        ]
    },
    {
        "id": "40c12463.a1f84c",
        "type": "delay",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 940,
        "y": 520,
        "wires": [
            [
                "c3e50240.82aa58"
            ]
        ]
    },
    {
        "id": "4d1b02cb.83b51c",
        "type": "ui_button",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "group": "4322c187.e73e5",
        "order": 9,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Update config",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "imager/image",
        "topicType": "str",
        "x": 460,
        "y": 480,
        "wires": [
            [
                "52ea7d01.711034"
            ]
        ]
    },
    {
        "id": "5921d0d0.a3d568",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "env": [],
        "x": 110,
        "y": 260,
        "wires": [
            [
                "f3658d30.b8448",
                "de2c90cf.b73b08",
                "4be09c97f86897d9",
                "f573206abefa9518",
                "f948151ab4031df4"
            ]
        ]
    },
    {
        "id": "f3658d30.b8448",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "get acq_id",
        "func": "msg.payload = msg.payload.acq_id;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 330,
        "y": 240,
        "wires": [
            [
                "6b34c456.83178c"
            ]
        ]
    },
    {
        "id": "de2c90cf.b73b08",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "get acq_celltype",
        "func": "msg.payload = msg.payload.acq_celltype;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 120,
        "wires": [
            [
                "cc0ca68b.4263a8"
            ]
        ]
    },
    {
        "id": "b402f719.55bc98",
        "type": "inject",
        "z": "baa1e3d9.cb29d",
        "name": "Default: FORWARD",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "pump_direction",
        "payload": "FORWARD",
        "payloadType": "str",
        "x": 220,
        "y": 600,
        "wires": [
            [
                "bb62da8a.ebc328"
            ]
        ]
    },
    {
        "id": "6b2239f3.41fa3",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "set global",
        "func": "global.set(msg.topic, msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "51b4d0df.d70a88",
        "type": "ui_text_input",
        "z": "baa1e3d9.cb29d",
        "name": "nb_frame",
        "label": "Number of images to acquire",
        "tooltip": "",
        "group": "4322c187.e73e5",
        "order": 3,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "nb_frame",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 680,
        "y": 300,
        "wires": [
            [
                "fb887036.12429",
                "67091ac0.8f9f6c",
                "99b11fe4.2795d"
            ]
        ]
    },
    {
        "id": "999065ca.27edb8",
        "type": "switch",
        "z": "baa1e3d9.cb29d",
        "name": "topic filter",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "status/pump",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status/focus",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status/imager",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 260,
        "y": 840,
        "wires": [
            [
                "a46a1e7f.88a92",
                "6742014e.1bb238"
            ],
            [
                "c516d9ea.f7f6e",
                "6742014e.1bb238"
            ],
            [
                "307c851e.fb0f7a",
                "2b9d6988.d84836"
            ]
        ]
    },
    {
        "id": "2b009bd7.c07004",
        "type": "ui_text",
        "z": "baa1e3d9.cb29d",
        "group": "70de8209.68416c",
        "order": 3,
        "width": 10,
        "height": 2,
        "name": "imager",
        "label": "Imager status:",
        "format": "{{msg.payload.status}}",
        "layout": "col-center",
        "className": "",
        "x": 710,
        "y": 780,
        "wires": []
    },
    {
        "id": "c516d9ea.f7f6e",
        "type": "ui_text",
        "z": "baa1e3d9.cb29d",
        "group": "70de8209.68416c",
        "order": 1,
        "width": 5,
        "height": 1,
        "name": "focus",
        "label": "Focus status:",
        "format": "{{msg.payload.status}}",
        "layout": "col-center",
        "className": "",
        "x": 710,
        "y": 740,
        "wires": []
    },
    {
        "id": "a46a1e7f.88a92",
        "type": "ui_text",
        "z": "baa1e3d9.cb29d",
        "group": "70de8209.68416c",
        "order": 2,
        "width": 5,
        "height": 1,
        "name": "pump",
        "label": "Pump status:",
        "format": "{{msg.payload.status}}",
        "layout": "col-center",
        "className": "",
        "x": 710,
        "y": 700,
        "wires": []
    },
    {
        "id": "bb628f8d.98f108",
        "type": "link in",
        "z": "baa1e3d9.cb29d",
        "name": "Status for fluidic module",
        "links": [
            "58f2e0f.4e8b12"
        ],
        "x": 155,
        "y": 840,
        "wires": [
            [
                "999065ca.27edb8"
            ]
        ]
    },
    {
        "id": "307c851e.fb0f7a",
        "type": "switch",
        "z": "baa1e3d9.cb29d",
        "name": "Imaging state",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "$contains(msg.payload.status, \"jpg\")\t",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 920,
        "wires": [
            [
                "db8e3dde.44efb8"
            ],
            [
                "6742014e.1bb238"
            ]
        ]
    },
    {
        "id": "db8e3dde.44efb8",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "img_counter",
        "func": "img_counter=flow.get('img_counter')\nif (img_counter === undefined || img_counter === \"\"){\n    img_counter = 0\n}\nimg_counter=img_counter+1\nflow.set('img_counter',img_counter)\nmsg.payload = img_counter\nmsg.payload = (100 * img_counter/global.get('nb_frame')).toFixed(2)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 900,
        "wires": [
            [
                "1a2e721a.f5e876",
                "f802b47c44c5b85d"
            ]
        ]
    },
    {
        "id": "59164d65.e7993c",
        "type": "ui_toast",
        "z": "baa1e3d9.cb29d",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1230,
        "y": 940,
        "wires": []
    },
    {
        "id": "8c7348aa.1962e8",
        "type": "template",
        "z": "baa1e3d9.cb29d",
        "name": "Create sentence",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "The {{topic}} is {{payload.status}}",
        "output": "str",
        "x": 990,
        "y": 940,
        "wires": [
            [
                "59164d65.e7993c"
            ]
        ]
    },
    {
        "id": "6742014e.1bb238",
        "type": "change",
        "z": "baa1e3d9.cb29d",
        "name": "Remove high-level topic",
        "rules": [
            {
                "t": "change",
                "p": "topic",
                "pt": "msg",
                "from": "status/",
                "fromt": "str",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 940,
        "wires": [
            [
                "8c7348aa.1962e8"
            ]
        ]
    },
    {
        "id": "1a2e721a.f5e876",
        "type": "ui_gauge",
        "z": "baa1e3d9.cb29d",
        "name": "progress donut",
        "group": "b5d61bc7.54fe48",
        "order": 2,
        "width": 6,
        "height": 3,
        "gtype": "donut",
        "title": "",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#ffa83f",
            "#e6ff02",
            "#00dfe9"
        ],
        "seg1": "50",
        "seg2": "75",
        "x": 1220,
        "y": 900,
        "wires": []
    },
    {
        "id": "9bd72495.a8a098",
        "type": "ui_text",
        "z": "baa1e3d9.cb29d",
        "group": "4322c187.e73e5",
        "order": 5,
        "width": 5,
        "height": 1,
        "name": "Total imaged volume",
        "label": "Total imaged volume",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 1200,
        "y": 180,
        "wires": []
    },
    {
        "id": "99b11fe4.2795d",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "imaged volume calc",
        "func": "camera = global.get(\"acq_camera\");\ncell = global.get(\"acq_celltype\");\nnb_frame = global.get(\"nb_frame\");\nprocess_pixel = global.get(\"process_pixel\");\n\nvar volume = 0\nif (camera == \"HQ Camera\"){\n    volume = nb_frame * (process_pixel*4056*process_pixel*3040*cell/1000000000) / 1000;\n}\nelse if (camera == \"Camera v2.1\"){\n    volume = nb_frame * (process_pixel*3280*process_pixel*2464*cell/1000000000) / 1000;\n}\nelse{\n    msg.payload = \"The camera is not known to this system\";\n    return msg;\n}\n\nglobal.set(\"acq_imaged_volume\", volume.toFixed(4))\n\nmsg.payload = volume.toFixed(2) + \" mL\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 180,
        "wires": [
            [
                "9bd72495.a8a098"
            ]
        ],
        "info": "### Focusing\n##### focus.py `nb_step` `orientation`\n\n- `nb_step` : **integer** (from 1 to 100000) - number of step to perform by the stage (about 31um/step)\n- `orientation` : **string** - orientation of the focus either `up` or `down`\n\nExample:\n\n    python3.7 $HOME/PlanktoScope/scripts/focus.py 650 up\n"
    },
    {
        "id": "8e16aa2f.e40398",
        "type": "ui_text",
        "z": "baa1e3d9.cb29d",
        "group": "4322c187.e73e5",
        "order": 6,
        "width": 5,
        "height": 1,
        "name": "Total pumped volume",
        "label": "Total pumped volume",
        "format": "{{msg.payload}} mL",
        "layout": "col-center",
        "className": "",
        "x": 1200,
        "y": 340,
        "wires": []
    },
    {
        "id": "67091ac0.8f9f6c",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "acq_volume calc",
        "func": "var imaging_pump_volume = global.get(\"imaging_pump_volume\");\nvar nb_frame = global.get(\"nb_frame\");\nvar acq_volume = 0\n\nacq_volume =  (Number(nb_frame)*Number(imaging_pump_volume)).toFixed(2)\nglobal.set(\"acq_volume\", acq_volume)\n\nmsg.payload = acq_volume\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 340,
        "wires": [
            [
                "8e16aa2f.e40398"
            ]
        ],
        "info": "### Focusing\n##### focus.py `nb_step` `orientation`\n\n- `nb_step` : **integer** (from 1 to 100000) - number of step to perform by the stage (about 31um/step)\n- `orientation` : **string** - orientation of the focus either `up` or `down`\n\nExample:\n\n    python3.7 $HOME/PlanktoScope/scripts/focus.py 650 up\n"
    },
    {
        "id": "2b9d6988.d84836",
        "type": "switch",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "status",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "camera_name",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 800,
        "wires": [
            [
                "2b009bd7.c07004"
            ],
            [
                "3bbb756a.84190a"
            ]
        ]
    },
    {
        "id": "3bbb756a.84190a",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "set camera name",
        "func": "global.set(\"acq_camera\", msg.payload.camera_name);\n\nmsg.payload = msg.payload.camera_name;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 820,
        "wires": [
            [
                "559a8085.1d6b9"
            ]
        ]
    },
    {
        "id": "559a8085.1d6b9",
        "type": "link out",
        "z": "baa1e3d9.cb29d",
        "name": "Camera Name",
        "links": [
            "30067f35.532f2",
            "572a6daa.6004c4",
            "cfc783d7.d6ceb",
            "6746f61cadaa1038",
            "dfefeb6072e3ee44"
        ],
        "x": 905,
        "y": 820,
        "wires": []
    },
    {
        "id": "49ea1123.ee1768",
        "type": "ui_numeric",
        "z": "baa1e3d9.cb29d",
        "name": "sleep_before",
        "label": "Delay to stabilize image (s)",
        "tooltip": "Happens before every capture",
        "group": "4322c187.e73e5",
        "order": 4,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "sleep_before",
        "topicType": "str",
        "format": "{{value}}",
        "min": "0.1",
        "max": "5",
        "step": "0.1",
        "className": "",
        "x": 670,
        "y": 180,
        "wires": [
            [
                "fb887036.12429"
            ]
        ]
    },
    {
        "id": "572a6daa.6004c4",
        "type": "link in",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "links": [
            "559a8085.1d6b9"
        ],
        "x": 775,
        "y": 160,
        "wires": [
            [
                "99b11fe4.2795d"
            ]
        ]
    },
    {
        "id": "8032ea50.1b57f",
        "type": "ui_template",
        "z": "baa1e3d9.cb29d",
        "group": "b5d61bc7.54fe48",
        "name": "progress header",
        "order": 3,
        "width": 4,
        "height": 1,
        "format": "<center><h3>Capture progress</h3></center>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1040,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "a4abb1ae.2ae418",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "env": [],
        "x": 930,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "4be09c97f86897d9",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "get nb_frame",
        "func": "msg.payload = msg.payload.nb_frame;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 300,
        "wires": [
            [
                "51b4d0df.d70a88"
            ]
        ]
    },
    {
        "id": "f573206abefa9518",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "get imaging_pump_volume",
        "func": "msg.payload = msg.payload.imaging_pump_volume;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "5caf2937aeda4e4a"
            ]
        ]
    },
    {
        "id": "f948151ab4031df4",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "get sleep_before",
        "func": "msg.payload = msg.payload.sleep_before;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 180,
        "wires": [
            [
                "49ea1123.ee1768"
            ]
        ]
    },
    {
        "id": "c515edcd8681c244",
        "type": "link in",
        "z": "baa1e3d9.cb29d",
        "name": "Cam Stream",
        "links": [
            "49111a72f4e32740"
        ],
        "x": 275,
        "y": 40,
        "wires": [
            [
                "a77625dc21c8a3cc"
            ]
        ]
    },
    {
        "id": "a77625dc21c8a3cc",
        "type": "template",
        "z": "baa1e3d9.cb29d",
        "name": "Prepare stream HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<center>\n  <img src=\"http://{{payload}}:8000/stream.mjpg\"\n    onerror=\"this.onerror=null; this.src='http://{{payload}}:80/error.svg'\"\n    alt=\"If you see this, there probably is an error either with your camera or with the python service. Please restart your machine.\"\n    width=\"100%\" height=\"100%\">\n</center>",
        "output": "str",
        "x": 420,
        "y": 40,
        "wires": [
            [
                "bb2bb7ce.1d1458",
                "bb39836bae9d2d2f"
            ]
        ]
    },
    {
        "id": "ad153212312f0347",
        "type": "ui_ui_control",
        "z": "baa1e3d9.cb29d",
        "name": "onTab",
        "events": "all",
        "x": 330,
        "y": 420,
        "wires": [
            [
                "9b69ea945b587192"
            ]
        ]
    },
    {
        "id": "9b69ea945b587192",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "check tab",
        "func": "if (msg.name == \"Fluidic Acquisition\"){\n    return { \"topic\": \"imager/ image\" }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 420,
        "wires": [
            [
                "52ea7d01.711034"
            ]
        ],
        "outputLabels": [
            "interface"
        ]
    },
    {
        "id": "5caf2937aeda4e4a",
        "type": "ui_numeric",
        "z": "baa1e3d9.cb29d",
        "name": "imaging_pump_volume",
        "label": "Select Pumped volume (mL) : ",
        "tooltip": "",
        "group": "4322c187.e73e5",
        "order": 2,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "imaging_pump_volume",
        "topicType": "str",
        "format": "{{value}}",
        "min": "0.02",
        "max": "0.5",
        "step": "0.01",
        "className": "",
        "x": 670,
        "y": 360,
        "wires": [
            [
                "67091ac0.8f9f6c",
                "fb887036.12429"
            ]
        ]
    },
    {
        "id": "1ffcd52e93271266",
        "type": "ui_ui_control",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "events": "change",
        "x": 1220,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "f7735eeda428d214",
        "type": "ui_button",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "group": "b7919ae2.c01788",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Continue",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_tab",
        "payload": "{\"tab\":\"Segmentation\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 1080,
        "y": 740,
        "wires": [
            [
                "1ffcd52e93271266"
            ]
        ]
    },
    {
        "id": "21031ffc6f65e987",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "Change mode",
        "func": "var activation_msg = {}\n\n//Mode expert\nif (msg.payload === 0){\n    activation_msg.payload = {\"group\":{\"show\":[\"Fluidic_Acquisition_Preview_Expert\",\"Fluidic_Acquisition_Acquisition\", \"Fluidic_Acquisition_Statistics_Expert\", \"Fluidic_Acquisition_Status\",\"Fraction size\"],\"hide\":[\"Fluidic_Acquisition_Preview_Beginner\", \"Fluidic_Acquisition_Statistics_Beginner\", \"Fraction size\"]}};    \n    return activation_msg;\n}\n\n//Mode débutant\nelse if (msg.payload === 1){\n    activation_msg.payload = {\"group\":{\"show\":[\"Fluidic_Acquisition_Preview_Beginner\",\"Fluidic_Acquisition_Acquisition\", \"Fluidic_Acquisition_Statistics_Beginner\"],\"hide\":[\"Fluidic_Acquisition_Preview_Expert\", \"Fluidic_Acquisition_Statistics_Expert\", \"Fluidic_Acquisition_Status\",\"Fraction size\"]}};\n    return activation_msg;\n}\nelse{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1120,
        "wires": [
            [
                "74b222e832764b41"
            ]
        ]
    },
    {
        "id": "74b222e832764b41",
        "type": "ui_ui_control",
        "z": "baa1e3d9.cb29d",
        "name": "show/hide net groups",
        "events": "change",
        "x": 720,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "159f2c48f920d7d6",
        "type": "ui_multistate_switch",
        "z": "baa1e3d9.cb29d",
        "d": true,
        "name": "Mode selection",
        "group": "b7919ae2.c01788",
        "order": 3,
        "width": 10,
        "height": 1,
        "label": "",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Expert mode",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Beginner mode",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 340,
        "y": 1080,
        "wires": [
            [
                "4f25cc7d67324a4d",
                "21031ffc6f65e987"
            ]
        ]
    },
    {
        "id": "a906d3253974acca",
        "type": "change",
        "z": "baa1e3d9.cb29d",
        "name": "Change global mode",
        "rules": [
            {
                "t": "set",
                "p": "mode",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 1040,
        "wires": [
            [
                "319bff50477bc5fc"
            ]
        ]
    },
    {
        "id": "319bff50477bc5fc",
        "type": "link out",
        "z": "baa1e3d9.cb29d",
        "name": "out_acquisition_mode",
        "mode": "link",
        "links": [
            "4dd140903cddda10",
            "713395d7523b16e8",
            "87171ccda60d4390",
            "97f9c6da2e1095d2",
            "a45e550cb5e1c1d1",
            "c840a7c66cf51acc"
        ],
        "x": 855,
        "y": 1040,
        "wires": []
    },
    {
        "id": "127fd2e4447c6ad1",
        "type": "link in",
        "z": "baa1e3d9.cb29d",
        "name": "in_acquisition_mode",
        "links": [
            "082af9181824a196",
            "4cfbba68449a28e2",
            "7a7343ef8627ec57",
            "a85a1f2d75981a8c",
            "b6e04f52920c6dcb",
            "bfce8e77727b9fbf",
            "de32bd4b6ba8dfd3",
            "d3892bf83549fd59"
        ],
        "x": 175,
        "y": 1080,
        "wires": [
            [
                "159f2c48f920d7d6",
                "21031ffc6f65e987"
            ]
        ]
    },
    {
        "id": "4f25cc7d67324a4d",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "Get mode value",
        "func": "if (msg.payload != global.get(\"mode\")){\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1040,
        "wires": [
            [
                "a906d3253974acca"
            ]
        ]
    },
    {
        "id": "c5e1441e122690bc",
        "type": "ui_template",
        "z": "baa1e3d9.cb29d",
        "group": "5762ede5e23a8f84",
        "name": "progress header",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<center><h3>Capture progress</h3></center>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1220,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "f802b47c44c5b85d",
        "type": "ui_gauge",
        "z": "baa1e3d9.cb29d",
        "name": "progress donut",
        "group": "5762ede5e23a8f84",
        "order": 3,
        "width": 6,
        "height": 3,
        "gtype": "donut",
        "title": "",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#ffa83f",
            "#e6ff02",
            "#00dfe9"
        ],
        "seg1": "50",
        "seg2": "75",
        "className": "",
        "x": 1220,
        "y": 860,
        "wires": []
    },
    {
        "id": "bb39836bae9d2d2f",
        "type": "ui_template",
        "z": "baa1e3d9.cb29d",
        "group": "2cf6f444c75c82ae",
        "name": "Stream Pi Camera",
        "order": 1,
        "width": 18,
        "height": 14,
        "format": "<span ng-bind-html=\"msg.payload\"></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 650,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "8ec68b82.17e3d8",
        "type": "ui_button",
        "z": "cb95299c.2817c8",
        "name": "Start segmentation",
        "group": "abeb6dad.635a2",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Start segmentation",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"action\":\"segment\"}",
        "payloadType": "json",
        "topic": "segmenter/segment",
        "topicType": "str",
        "x": 250,
        "y": 520,
        "wires": [
            [
                "33c28dc1.238002",
                "c72a1064.1ec388"
            ]
        ]
    },
    {
        "id": "27be7971.b3fbce",
        "type": "ui_button",
        "z": "cb95299c.2817c8",
        "d": true,
        "name": "Stop segmentation",
        "group": "abeb6dad.635a2",
        "order": 9,
        "width": 12,
        "height": 1,
        "passthru": true,
        "label": "Stop segmentation",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "",
        "payload": "{\"action\":\"stop\"}",
        "payloadType": "json",
        "topic": "segmenter/segment",
        "topicType": "str",
        "x": 250,
        "y": 580,
        "wires": [
            [
                "16f3cef4.0acac9"
            ]
        ]
    },
    {
        "id": "16f3cef4.0acac9",
        "type": "mqtt out",
        "z": "cb95299c.2817c8",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "8dc3722c.06efa8",
        "x": 730,
        "y": 580,
        "wires": []
    },
    {
        "id": "8f3788f6.ddcf98",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "obj_counter",
        "func": "obj_counter = flow.get('obj_counter')\nobj_counter = obj_counter + 1\nflow.set('obj_counter', obj_counter)\nmsg.payload = obj_counter\nmsg.topic = \"object count\"\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 860,
        "wires": [
            [
                "fa3b7929.ac7da8",
                "9d53dbe2.dbffe8"
            ]
        ]
    },
    {
        "id": "aa38dbbc.cf0a9",
        "type": "switch",
        "z": "cb95299c.2817c8",
        "name": "Segmenter",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "status/segmenter",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status/segmenter/name",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status/segmenter/object_id",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status/segmenter/metric",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 370,
        "y": 800,
        "wires": [
            [
                "b9a23b91.93638",
                "6919465f.332e5"
            ],
            [
                "49af3d24.1799e4"
            ],
            [
                "8f3788f6.ddcf98"
            ],
            [
                "50ce901f.b5034"
            ]
        ]
    },
    {
        "id": "9d53dbe2.dbffe8",
        "type": "ui_chart",
        "z": "cb95299c.2817c8",
        "d": true,
        "name": "counter graph",
        "group": "46be9c86.dea684",
        "order": 7,
        "width": 16,
        "height": 2,
        "label": "",
        "chartType": "horizontalBar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Objects count will be shown here once the segmentation is started",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1220,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "50ce901f.b5034",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "ex : area",
        "func": "// Payload looks like this:\n// {'name': '01_13_28_232066_0',\n//  'metadata': {\n//      'label': 0, 'width': 29, 'height': 80, ....\n\nmsg.payload=msg.payload.metadata.area_exc\nmsg.topic=\"area\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 980,
        "wires": [
            [
                "458cd82e.03d258"
            ]
        ]
    },
    {
        "id": "a4f0f0d1.3aca88",
        "type": "ui_toast",
        "z": "cb95299c.2817c8",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1220,
        "y": 740,
        "wires": []
    },
    {
        "id": "458cd82e.03d258",
        "type": "ui_chart",
        "z": "cb95299c.2817c8",
        "d": true,
        "name": "Area chart",
        "group": "46be9c86.dea684",
        "order": 9,
        "width": 16,
        "height": 6,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Objects area will be shown here once the segmentation is started",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1210,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "49af3d24.1799e4",
        "type": "debug",
        "z": "cb95299c.2817c8",
        "name": "segmentation name",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 820,
        "wires": []
    },
    {
        "id": "7088a5be.0c79a4",
        "type": "template",
        "z": "cb95299c.2817c8",
        "name": "Create sentence",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "The {{topic}} is {{payload.status}}",
        "output": "str",
        "x": 980,
        "y": 740,
        "wires": [
            [
                "a4f0f0d1.3aca88"
            ]
        ]
    },
    {
        "id": "b9a23b91.93638",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "Remove high-level topic",
        "rules": [
            {
                "t": "change",
                "p": "topic",
                "pt": "msg",
                "from": "status/",
                "fromt": "str",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 740,
        "wires": [
            [
                "7088a5be.0c79a4"
            ]
        ]
    },
    {
        "id": "6919465f.332e5",
        "type": "ui_text",
        "z": "cb95299c.2817c8",
        "group": "46be9c86.dea684",
        "order": 1,
        "width": 16,
        "height": 1,
        "name": "segmenter",
        "label": "Segmenter status:",
        "format": "{{msg.payload.status}}",
        "layout": "row-spread",
        "x": 690,
        "y": 780,
        "wires": []
    },
    {
        "id": "fa3b7929.ac7da8",
        "type": "ui_text",
        "z": "cb95299c.2817c8",
        "group": "46be9c86.dea684",
        "order": 5,
        "width": 4,
        "height": 1,
        "name": "counter",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 1200,
        "y": 860,
        "wires": []
    },
    {
        "id": "640ece83.88cab",
        "type": "inject",
        "z": "cb95299c.2817c8",
        "name": "Init graphs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "object count",
        "payload": "0",
        "payloadType": "num",
        "x": 690,
        "y": 940,
        "wires": [
            [
                "ac439738.28bc18",
                "4f3f7c4a.cb21c4"
            ]
        ]
    },
    {
        "id": "25867454.a8e334",
        "type": "link in",
        "z": "cb95299c.2817c8",
        "name": "Segmenter module status",
        "links": [
            "dcf5bd45.16a8d"
        ],
        "x": 175,
        "y": 800,
        "wires": [
            [
                "aa38dbbc.cf0a9"
            ]
        ]
    },
    {
        "id": "c8749cbb.55254",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "set global",
        "func": "global.set(msg.topic, msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "d43c3ed9.e6cb1",
        "type": "ui_template",
        "z": "cb95299c.2817c8",
        "group": "46be9c86.dea684",
        "name": "Object counts",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<div><center><h3>Object counts</h3></center></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1220,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "857e90c1.cd25b",
        "type": "ui_template",
        "z": "cb95299c.2817c8",
        "d": true,
        "group": "46be9c86.dea684",
        "name": "Area chart",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<div><center><h2>Area chart</h2></center></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1210,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "33c28dc1.238002",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "prepare segmentation",
        "func": "flow.set('obj_counter', 0);\n\nvar segmentation_list = flow.get('segmentation_list')\nif (segmentation_list !== undefined && segmentation_list !== \"\") {\n    msg.payload['path'] = segmentation_list\n}\n\n\nvar force = flow.get('force')\nif (force !== undefined && force !== \"\") {\n    msg.payload['settings'] = {\"force\":Boolean(force)}\n}\n\n\nvar recursive = flow.get('recursive')\nif (recursive !== undefined && recursive !== \"\") {\n    if (\"settings\" in msg.payload){\n        msg.payload.settings[\"recursive\"] = Boolean(recursive)\n    }\n    else{\n        msg.payload['settings'] = {\"recursive\": Boolean(recursive)}\n    }\n}\n\nvar ecotaxa = flow.get('ecotaxa')\nif (ecotaxa !== undefined && ecotaxa !== \"\") {\n    if (\"settings\" in msg.payload){\n        msg.payload.settings[\"ecotaxa\"] = Boolean(ecotaxa)\n    }\n    else{\n        msg.payload['settings'] = {\"ecotaxa\": Boolean(ecotaxa)}\n    }\n}\n\nvar keep = flow.get('keep')\nif (keep !== undefined && keep !== \"\") {\n    if (\"settings\" in msg.payload){\n        msg.payload.settings[\"keep\"] = Boolean(keep)\n    }\n    else{\n        msg.payload['settings'] = {\"keep\": Boolean(keep)}\n    }\n}\n\nvar process_id = global.get('process_id')\nif (process_id !== undefined && process_id !== \"\") {\n    if (\"settings\" in msg.payload){\n        msg.payload.settings[\"process_id\"] = process_id\n    }\n    else{\n        msg.payload['settings'] = {\"process_id\": process_id}\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 520,
        "wires": [
            [
                "16f3cef4.0acac9"
            ]
        ]
    },
    {
        "id": "fa12f9f8.00cfa8",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "cb95299c.2817c8",
        "name": "",
        "env": [],
        "x": 310,
        "y": 440,
        "wires": [
            [
                "3b72d11c.86e9e6"
            ]
        ]
    },
    {
        "id": "3b72d11c.86e9e6",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "get process_id",
        "func": "msg.payload = msg.payload.process_id;\nmsg.topic = \"process_id\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 440,
        "wires": [
            [
                "56971109c8be3b54",
                "3ca9b0414618388b"
            ]
        ]
    },
    {
        "id": "3ea12061.ce62c",
        "type": "ui_list",
        "z": "cb95299c.2817c8",
        "group": "abeb6dad.635a2",
        "name": "",
        "order": 10,
        "width": 12,
        "height": 8,
        "lineType": "one",
        "actionType": "check",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 770,
        "y": 120,
        "wires": [
            [
                "cb3b87b5.63c4"
            ]
        ]
    },
    {
        "id": "8bd8fb2c.53fa4",
        "type": "dir2files",
        "z": "cb95299c.2817c8",
        "name": "",
        "dirname": "/home/pi/data/img/",
        "pathRegex": "",
        "isRecursive": true,
        "findDir": true,
        "isArray": true,
        "x": 420,
        "y": 140,
        "wires": [
            [
                "ba2947.c854deb8"
            ]
        ]
    },
    {
        "id": "127d4ee.f8ad1b1",
        "type": "ui_button",
        "z": "cb95299c.2817c8",
        "name": "Refresh",
        "group": "abeb6dad.635a2",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Update folder list",
        "tooltip": "Refresh the list of previous acquisitions",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "mi-find_replace",
        "payload": "",
        "payloadType": "date",
        "topic": "update",
        "topicType": "str",
        "x": 220,
        "y": 140,
        "wires": [
            [
                "8bd8fb2c.53fa4",
                "56f845f5.e7c054"
            ]
        ]
    },
    {
        "id": "946ce9ee.092cf",
        "type": "inject",
        "z": "cb95299c.2817c8",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 230,
        "y": 100,
        "wires": [
            [
                "8bd8fb2c.53fa4",
                "56f845f5.e7c054"
            ]
        ]
    },
    {
        "id": "cb3b87b5.63c4",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "update segmentation_list",
        "func": "var segmentation_list = flow.get('segmentation_list');\n\nif (segmentation_list === undefined || segmentation_list === \"\") {\n    segmentation_list = []\n    console.log(\"error\")\n}\n\npath = \"/home/pi/data/img/\" + msg.payload.title\n\nif (msg.payload.isChecked){\n    if (segmentation_list.includes(path) === false){\n        segmentation_list.push(path)\n    }\n    // Element already in list, don't push it more than once\n    //segmentation_list.push(msg.payload[\"title\"])\n}\nelse {\n    var pos = segmentation_list.indexOf(path)\n    segmentation_list.splice(pos, 1)\n}\n\nflow.set('segmentation_list', segmentation_list)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "56f845f5.e7c054",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "Reset segmentation_list",
        "rules": [
            {
                "t": "set",
                "p": "segmentation_list",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "7fc72364.8f038c",
        "type": "ui_template",
        "z": "cb95299c.2817c8",
        "group": "abeb6dad.635a2",
        "name": "Update message",
        "order": 1,
        "width": 12,
        "height": 3,
        "format": "<div><left>You can choose here in which folder(s) you want the segmentation script to run. A few details though:\n<br>The segmentation is run recursively in all folders. So if you select a top level folder, the segmentation will be run in all subfolders.\n<br>Also, you will be able to chose wether for force the segmentation for folders in which it has run already.</left></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 250,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "ba2947.c854deb8",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "remove common",
        "func": "function remove_path(item, index, array) {\n  array[index] = item.replace(\"/home/pi/data/img/\", \"\")\n} \n\nmsg.payload.forEach(remove_path)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 140,
        "wires": [
            [
                "3ea12061.ce62c",
                "b3e88ba1fb60d3e8"
            ]
        ]
    },
    {
        "id": "880b192a.88e2d",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "recursive",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a4f68fa6.5d77f8",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "force",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "1ef1b43b.b0f064",
        "type": "inject",
        "z": "cb95299c.2817c8",
        "name": "1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 230,
        "y": 300,
        "wires": [
            [
                "a4f68fa6.5d77f8",
                "b49bba832cfca6d5"
            ]
        ]
    },
    {
        "id": "f078c068.eacf58",
        "type": "ui_template",
        "z": "cb95299c.2817c8",
        "group": "46be9c86.dea684",
        "name": "Stream Segmented object",
        "order": 2,
        "width": 16,
        "height": 10,
        "format": "<span ng-bind-html=\"msg.payload\"></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 1250,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "43f97b93.b76294",
        "type": "inject",
        "z": "cb95299c.2817c8",
        "name": "1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 230,
        "y": 260,
        "wires": [
            [
                "880b192a.88e2d",
                "5aab4ec92dba183f"
            ]
        ]
    },
    {
        "id": "ac439738.28bc18",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "chart init",
        "func": "obj=[{\"series\": [],\"data\": [],\"labels\": []}]\nmsg.payload = obj\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 940,
        "wires": [
            [
                "458cd82e.03d258"
            ]
        ]
    },
    {
        "id": "4f3f7c4a.cb21c4",
        "type": "change",
        "z": "cb95299c.2817c8",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "obj_counter",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 900,
        "wires": [
            [
                "fa3b7929.ac7da8",
                "9d53dbe2.dbffe8"
            ]
        ]
    },
    {
        "id": "6bce0f60.f48998",
        "type": "link in",
        "z": "cb95299c.2817c8",
        "name": "",
        "links": [
            "596fc9d4.46c75"
        ],
        "x": 735,
        "y": 900,
        "wires": [
            [
                "4f3f7c4a.cb21c4",
                "ac439738.28bc18"
            ]
        ]
    },
    {
        "id": "596fc9d4.46c75",
        "type": "link out",
        "z": "cb95299c.2817c8",
        "name": "",
        "links": [
            "6bce0f60.f48998"
        ],
        "x": 595,
        "y": 560,
        "wires": []
    },
    {
        "id": "c72a1064.1ec388",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "Reset counters",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "object count",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 560,
        "wires": [
            [
                "596fc9d4.46c75"
            ]
        ]
    },
    {
        "id": "8dd6f57f.b77f98",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "keep",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1250,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "8090df89.c029e",
        "type": "inject",
        "z": "cb95299c.2817c8",
        "name": "0",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 890,
        "y": 360,
        "wires": [
            [
                "8dd6f57f.b77f98",
                "27f15ec49da60b1e"
            ]
        ]
    },
    {
        "id": "56971109c8be3b54",
        "type": "ui_text_input",
        "z": "cb95299c.2817c8",
        "d": true,
        "name": "process_id",
        "label": "Process unique ID*",
        "tooltip": "",
        "group": "abeb6dad.635a2",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "process_id",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 670,
        "y": 460,
        "wires": [
            [
                "c8749cbb.55254"
            ]
        ]
    },
    {
        "id": "604659d148759b84",
        "type": "link in",
        "z": "cb95299c.2817c8",
        "name": "Cam Stream",
        "links": [
            "49111a72f4e32740"
        ],
        "x": 855,
        "y": 660,
        "wires": [
            [
                "e077b83ad375cb95"
            ]
        ]
    },
    {
        "id": "e077b83ad375cb95",
        "type": "template",
        "z": "cb95299c.2817c8",
        "name": "Prepare stream HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<center>\n    Latest object segmented:<br/>\n    <img src=\"http://{{payload}}:8001/object.mjpg\"\n    onerror=\"this.onerror=null; this.src='http://{{payload}}:80/error.svg'\"\n    alt=\"If you see this, there probably is an error either with your camera or with the python service. Please restart your machine.\"\n    style=\"max-width: 100%;max-height: 100%;\">\n</center>",
        "output": "str",
        "x": 1000,
        "y": 660,
        "wires": [
            [
                "f078c068.eacf58"
            ]
        ]
    },
    {
        "id": "5d292510262c81fb",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "Change mode",
        "func": "var activation_msg = {}\n\n//Mode expert\nif (msg.payload === 0){\n    activation_msg.payload = {\"group\":{\"show\":[\"Segmentation_Control_Expert\",\"Segmentation_Status\", \"Segmentation_Navigation\"],\"hide\":[\"Segmentation_Control_Beginner\"]}};    \n    return activation_msg;\n}\n\n//Mode débutant\nelse if (msg.payload === 1){\n    activation_msg.payload = {\"group\":{\"show\":[\"Segmentation_Control_Beginner\",\"Segmentation_Status\", \"Segmentation_Navigation\"],\"hide\":[\"Segmentation_Control_Expert\"]}};    \n    return activation_msg;\n}\nelse{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1180,
        "wires": [
            [
                "79229923bf5fb26a"
            ]
        ]
    },
    {
        "id": "79229923bf5fb26a",
        "type": "ui_ui_control",
        "z": "cb95299c.2817c8",
        "name": "show/hide net groups",
        "events": "change",
        "x": 840,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "84a208ae8f528987",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "Change global mode",
        "rules": [
            {
                "t": "set",
                "p": "mode",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 1100,
        "wires": [
            [
                "082af9181824a196"
            ]
        ]
    },
    {
        "id": "082af9181824a196",
        "type": "link out",
        "z": "cb95299c.2817c8",
        "name": "out_segmentation_mode",
        "mode": "link",
        "links": [
            "127fd2e4447c6ad1",
            "4dd140903cddda10",
            "7164566e38c0e242",
            "87171ccda60d4390",
            "97f9c6da2e1095d2",
            "c840a7c66cf51acc",
            "a45e550cb5e1c1d1"
        ],
        "x": 995,
        "y": 1100,
        "wires": []
    },
    {
        "id": "713395d7523b16e8",
        "type": "link in",
        "z": "cb95299c.2817c8",
        "name": "in_segmentation_mode",
        "links": [
            "319bff50477bc5fc",
            "4cfbba68449a28e2",
            "7a7343ef8627ec57",
            "a85a1f2d75981a8c",
            "b6e04f52920c6dcb",
            "bfce8e77727b9fbf",
            "c2d9b90e27bc022c",
            "de32bd4b6ba8dfd3",
            "d3892bf83549fd59"
        ],
        "x": 295,
        "y": 1140,
        "wires": [
            [
                "5d292510262c81fb",
                "eb4902f193579b72",
                "216ba1d118ccceae"
            ]
        ]
    },
    {
        "id": "783d2f1273a4036a",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "Get mode value",
        "func": "if (msg.payload != global.get(\"mode\")){\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1100,
        "wires": [
            [
                "84a208ae8f528987"
            ]
        ]
    },
    {
        "id": "17198497cd321090",
        "type": "ui_template",
        "z": "cb95299c.2817c8",
        "group": "d1074b91f48dc4dc",
        "name": "Update message",
        "order": 1,
        "width": 12,
        "height": 3,
        "format": "<div><left>You can choose here in which folder(s) you want the segmentation script to run. A few details though:\n<br>The segmentation is run recursively in all folders. So if you select a top level folder, the segmentation will be run in all subfolders.\n<br>Also, you will be able to chose wether for force the segmentation for folders in which it has run already.</left></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 470,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "8dded6e10f955b58",
        "type": "ui_button",
        "z": "cb95299c.2817c8",
        "d": true,
        "name": "Stop segmentation",
        "group": "d1074b91f48dc4dc",
        "order": 3,
        "width": 12,
        "height": 1,
        "passthru": true,
        "label": "Stop segmentation",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "",
        "payload": "{\"action\":\"stop\"}",
        "payloadType": "json",
        "topic": "segmenter/segment",
        "topicType": "str",
        "x": 250,
        "y": 620,
        "wires": [
            [
                "16f3cef4.0acac9"
            ]
        ]
    },
    {
        "id": "3ca9b0414618388b",
        "type": "ui_text_input",
        "z": "cb95299c.2817c8",
        "d": true,
        "name": "process_id",
        "label": "Process unique ID*",
        "tooltip": "",
        "group": "d1074b91f48dc4dc",
        "order": 2,
        "width": 12,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "process_id",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 670,
        "y": 420,
        "wires": [
            [
                "c8749cbb.55254"
            ]
        ]
    },
    {
        "id": "c5f901c8b78c56a2",
        "type": "ui_ui_control",
        "z": "cb95299c.2817c8",
        "name": "",
        "events": "change",
        "x": 360,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "1be1bc607441e73b",
        "type": "ui_button",
        "z": "cb95299c.2817c8",
        "name": "",
        "group": "64903b47.4034e4",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Previous",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_return",
        "payload": "{\"tab\":\"Fluidic Acquisition\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 220,
        "y": 920,
        "wires": [
            [
                "c5f901c8b78c56a2"
            ]
        ]
    },
    {
        "id": "8e7287dda6eafa85",
        "type": "ui_ui_control",
        "z": "cb95299c.2817c8",
        "name": "",
        "events": "change",
        "x": 360,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "3f7d6f11b0473b0e",
        "type": "ui_button",
        "z": "cb95299c.2817c8",
        "name": "",
        "group": "64903b47.4034e4",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Gallery",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_tab",
        "payload": "{\"tab\":\"Gallery\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 220,
        "y": 960,
        "wires": [
            [
                "8e7287dda6eafa85"
            ]
        ]
    },
    {
        "id": "eb433ba435cdf460",
        "type": "ui_ui_control",
        "z": "cb95299c.2817c8",
        "name": "",
        "events": "change",
        "x": 360,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "e9fc569b1d621aee",
        "type": "ui_button",
        "z": "cb95299c.2817c8",
        "name": "",
        "group": "64903b47.4034e4",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Download",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_tab",
        "payload": "{\"tab\":\"Download Files\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 220,
        "y": 1000,
        "wires": [
            [
                "eb433ba435cdf460"
            ]
        ]
    },
    {
        "id": "eb4902f193579b72",
        "type": "ui_multistate_switch",
        "z": "cb95299c.2817c8",
        "d": true,
        "name": "Mode selection",
        "group": "64903b47.4034e4",
        "order": 4,
        "width": 16,
        "height": 1,
        "label": "",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Expert mode",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Beginner mode",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 440,
        "y": 1140,
        "wires": [
            [
                "783d2f1273a4036a",
                "5d292510262c81fb"
            ]
        ]
    },
    {
        "id": "216ba1d118ccceae",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "Reset segmentation_list",
        "rules": [
            {
                "t": "set",
                "p": "segmentation_list",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "45a80bdd5385f629",
        "type": "ui_multistate_switch",
        "z": "cb95299c.2817c8",
        "name": "Ecotaxa archive",
        "group": "d1074b91f48dc4dc",
        "order": 4,
        "width": 6,
        "height": 1,
        "label": "Ecotaxa archive",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "No",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Yes",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 1074.6666259765625,
        "y": 235.66665649414062,
        "wires": [
            [
                "326dae091057a710"
            ]
        ]
    },
    {
        "id": "326dae091057a710",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ecotaxa",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1274.6666259765625,
        "y": 255.66665649414062,
        "wires": [
            []
        ]
    },
    {
        "id": "0241a5c066de8938",
        "type": "inject",
        "z": "cb95299c.2817c8",
        "name": "0",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 874.6666259765625,
        "y": 255.66665649414062,
        "wires": [
            [
                "45a80bdd5385f629",
                "326dae091057a710",
                "095ac6e050e6f10d"
            ]
        ]
    },
    {
        "id": "5aab4ec92dba183f",
        "type": "ui_multistate_switch",
        "z": "cb95299c.2817c8",
        "name": "recursive toggle",
        "group": "abeb6dad.635a2",
        "order": 4,
        "width": 6,
        "height": 1,
        "label": "Recursive folder",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "No",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Yes",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 440,
        "y": 180,
        "wires": [
            [
                "880b192a.88e2d"
            ]
        ]
    },
    {
        "id": "b49bba832cfca6d5",
        "type": "ui_multistate_switch",
        "z": "cb95299c.2817c8",
        "name": "force toggle",
        "group": "abeb6dad.635a2",
        "order": 3,
        "width": 6,
        "height": 1,
        "label": "Force rework",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "No",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Yes",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 430,
        "y": 360,
        "wires": [
            [
                "a4f68fa6.5d77f8"
            ]
        ]
    },
    {
        "id": "095ac6e050e6f10d",
        "type": "ui_multistate_switch",
        "z": "cb95299c.2817c8",
        "name": "Ecotaxa archive",
        "group": "abeb6dad.635a2",
        "order": 6,
        "width": 6,
        "height": 1,
        "label": "Ecotaxa archive",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "No",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Yes",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 1080,
        "y": 200,
        "wires": [
            [
                "326dae091057a710"
            ]
        ]
    },
    {
        "id": "27f15ec49da60b1e",
        "type": "ui_multistate_switch",
        "z": "cb95299c.2817c8",
        "name": "Keep objects",
        "group": "abeb6dad.635a2",
        "order": 5,
        "width": 6,
        "height": 1,
        "label": "Keep objects",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "No",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Yes",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 1050,
        "y": 420,
        "wires": [
            [
                "8dd6f57f.b77f98"
            ]
        ]
    },
    {
        "id": "abf476013f67ec1a",
        "type": "ui_button",
        "z": "cb95299c.2817c8",
        "name": "Start segmentation",
        "group": "d1074b91f48dc4dc",
        "order": 5,
        "width": "12",
        "height": 1,
        "passthru": false,
        "label": "Start segmentation",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"action\":\"segment\"}",
        "payloadType": "json",
        "topic": "segmenter/segment",
        "topicType": "str",
        "x": 250,
        "y": 480,
        "wires": [
            [
                "33c28dc1.238002",
                "c72a1064.1ec388"
            ]
        ]
    },
    {
        "id": "3fc483d2f350411a",
        "type": "ui_button",
        "z": "cb95299c.2817c8",
        "name": "Refresh",
        "group": "d1074b91f48dc4dc",
        "order": 6,
        "width": "12",
        "height": 1,
        "passthru": false,
        "label": "Update folder list",
        "tooltip": "Refresh the list of previous acquisitions",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "mi-find_replace",
        "payload": "",
        "payloadType": "date",
        "topic": "update",
        "topicType": "str",
        "x": 224,
        "y": 177,
        "wires": [
            [
                "56f845f5.e7c054",
                "8bd8fb2c.53fa4"
            ]
        ]
    },
    {
        "id": "b3e88ba1fb60d3e8",
        "type": "ui_list",
        "z": "cb95299c.2817c8",
        "group": "d1074b91f48dc4dc",
        "name": "",
        "order": 7,
        "width": 12,
        "height": 8,
        "lineType": "one",
        "actionType": "check",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 765,
        "y": 174,
        "wires": [
            [
                "cb3b87b5.63c4"
            ]
        ]
    },
    {
        "id": "09c012d3f63f207f",
        "type": "dir2files",
        "z": "31d8721d35506f94",
        "name": "",
        "dirname": "/home/pi/data/img/",
        "pathRegex": "",
        "isRecursive": false,
        "findDir": true,
        "isArray": true,
        "x": 500,
        "y": 260,
        "wires": [
            [
                "fd3d341b39c4cf2e"
            ]
        ],
        "inputLabels": [
            "files"
        ]
    },
    {
        "id": "c07bb6bb0a80f8fc",
        "type": "inject",
        "z": "31d8721d35506f94",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "d9188ac81ad3429f"
            ]
        ]
    },
    {
        "id": "205ade964b6f0d89",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "update list_path1",
        "func": "var list_path = flow.get('list_path1');\n\nif (list_path === undefined || list_path === \"\") {\n    list_path = []\n    console.log(\"error\")\n}\n\npath = msg.payload.title\n\nif (msg.payload.isChecked){\n    flow.set(\"path1\",path)\n} else {\n    flow.set(\"path1\",\"\")\n}\n\nreturn {};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 240,
        "wires": [
            [
                "3ed879aab4dc701e"
            ]
        ]
    },
    {
        "id": "fd3d341b39c4cf2e",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "remove common",
        "func": "function remove_path(item, index, array) {\n  array[index] = item.replace(\"/home/pi/data/\", \"\")\n} \n\nmsg.payload.forEach(remove_path)\n\nflow.set(\"list_path1\",msg.payload)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 240,
        "wires": [
            [
                "3ed879aab4dc701e",
                "a0aa5648a9cea66a"
            ]
        ]
    },
    {
        "id": "bd31c7d393482e08",
        "type": "ui_list",
        "z": "31d8721d35506f94",
        "group": "3b7510519e97c165",
        "name": "",
        "order": 3,
        "width": 7,
        "height": 5,
        "lineType": "one",
        "actionType": "check",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 1110,
        "y": 240,
        "wires": [
            [
                "205ade964b6f0d89",
                "6c4ff691019a5975"
            ]
        ]
    },
    {
        "id": "d9188ac81ad3429f",
        "type": "ui_multistate_switch",
        "z": "31d8721d35506f94",
        "name": "Selections Dossiers",
        "group": "3b7510519e97c165",
        "order": 1,
        "width": 5,
        "height": 1,
        "label": "",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Objects",
                "value": "0",
                "valueType": "num",
                "color": "#ff6666"
            },
            {
                "label": "Images",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "c706d303754d0ea9",
                "99d8d178def6f9a3"
            ]
        ]
    },
    {
        "id": "f1a29fe0d56133cc",
        "type": "dir2files",
        "z": "31d8721d35506f94",
        "name": "",
        "dirname": "/home/pi/data/objects",
        "pathRegex": "",
        "isRecursive": false,
        "findDir": true,
        "isArray": true,
        "x": 500,
        "y": 220,
        "wires": [
            [
                "fd3d341b39c4cf2e"
            ]
        ]
    },
    {
        "id": "c706d303754d0ea9",
        "type": "switch",
        "z": "31d8721d35506f94",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 240,
        "wires": [
            [
                "f1a29fe0d56133cc"
            ],
            [
                "09c012d3f63f207f"
            ]
        ]
    },
    {
        "id": "55104da9e289ea46",
        "type": "ui_list",
        "z": "31d8721d35506f94",
        "group": "abfa6f1b6ba40f94",
        "name": "",
        "order": 1,
        "width": 7,
        "height": 6,
        "lineType": "one",
        "actionType": "check",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 1130,
        "y": 400,
        "wires": [
            [
                "471038ea26114fd8",
                "796565376511728b"
            ]
        ]
    },
    {
        "id": "94d7d0a907f21a80",
        "type": "ui_list",
        "z": "31d8721d35506f94",
        "group": "ba2f06516493c247",
        "name": "",
        "order": 1,
        "width": 7,
        "height": 7,
        "lineType": "one",
        "actionType": "check",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 1130,
        "y": 560,
        "wires": [
            [
                "73594a0ffdc3edcd",
                "f097e8ca8badd4da"
            ]
        ]
    },
    {
        "id": "3ed879aab4dc701e",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "set good check path1",
        "func": "function set_good_check(item, index, array) {\n    if (array[index]==path) {\n        msg1.payload.push({\"title\":array[index],\"isChecked\":true})\n    } else { \n        msg1.payload.push(array[index]);\n    }\n}\npath=flow.get(\"path1\")\n\nif (path==undefined) {\n    path=[];\n}\n\nmsg1 = {payload:[]}\nmsg.payload = flow.get(\"list_path1\")\nmsg.payload.forEach(set_good_check)\n\nreturn msg1",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 240,
        "wires": [
            [
                "bd31c7d393482e08"
            ]
        ]
    },
    {
        "id": "471038ea26114fd8",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "update list_path2",
        "func": "var list_path = flow.get('list_path2');\n\nif (list_path === undefined || list_path === \"\") {\n    list_path = []\n    console.log(\"error\")\n}\n\npath = msg.payload.title\n\nif (msg.payload.isChecked){\n    flow.set(\"path2\",path)\n} else {\n    flow.set(\"path2\",\"\")\n}\n\nreturn {};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 400,
        "wires": [
            [
                "076982fdcf306309"
            ]
        ]
    },
    {
        "id": "73594a0ffdc3edcd",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "update list_path3",
        "func": "var list_path = flow.get('list_path3');\n\nif (list_path === undefined || list_path === \"\") {\n    list_path = []\n    console.log(\"error\")\n}\n\npath = msg.payload.title\n\nif (msg.payload.isChecked){\n    flow.set(\"path3\",path)\n} else {\n    flow.set(\"path3\",\"\")\n}\n\nreturn {};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 560,
        "wires": [
            [
                "2c40bba44424bbb9"
            ]
        ]
    },
    {
        "id": "98c36712beeaf994",
        "type": "ui_list",
        "z": "31d8721d35506f94",
        "group": "a552e218495db1d0",
        "name": "",
        "order": 1,
        "width": 7,
        "height": 7,
        "lineType": "one",
        "actionType": "click",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 1290,
        "y": 700,
        "wires": [
            [
                "433cb92bd1f354fe"
            ]
        ]
    },
    {
        "id": "b3c52a03801377e0",
        "type": "fs-file-lister",
        "z": "31d8721d35506f94",
        "name": "Files",
        "start": "/home/pi/data",
        "pattern": "*.jpg",
        "folders": "*",
        "hidden": false,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 870,
        "y": 700,
        "wires": [
            [
                "98c7ef6dc3ddd69c"
            ]
        ]
    },
    {
        "id": "98c7ef6dc3ddd69c",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "Adapt msg and set list_files",
        "func": "function modify_objects (item, index, array) {\n    array[index] = array[index].name;\n}\n\nfunction simplify_path (item, index, array) {\n    const regex = new RegExp('\\/.+\\/.+\\/.+\\/.+\\/');\n    array[index] = item.replace(regex, \"\")\n}\n\nmsg.payload.forEach(modify_objects)\n\nflow.set(\"list_files\",msg.payload)\n\nif (msg.payload[0]!=undefined) {\n    const regex1 = new RegExp('\\/[^\\/]+$');\n    flow.set(\"path_files\",msg.payload[0].replace(regex1,\"/\"))\n}\n\nmsg.payload.forEach(simplify_path)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 700,
        "wires": [
            [
                "98c36712beeaf994"
            ]
        ]
    },
    {
        "id": "047d6a121c4c915c",
        "type": "dir2files",
        "z": "31d8721d35506f94",
        "name": "",
        "dirname": "",
        "pathRegex": "",
        "isRecursive": false,
        "findDir": true,
        "isArray": true,
        "x": 520,
        "y": 400,
        "wires": [
            [
                "aaac8717f9d0ddd0"
            ]
        ]
    },
    {
        "id": "bb2bf6d3f0ad0314",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "Create msg",
        "func": "flow.set(\"index_file\")\nif (msg.payload.isChecked != undefined) {\n    if (msg.payload.isChecked) {\n        const path = flow.get(\"path1\") + \"/\" + flow.get(\"path2\") + \"/\" + msg.payload.title\n        msg.payload = {}\n        msg.payload.start = \"/home/pi/data/\" + path\n        msg.payload.pattern = \"*.jpg\"\n        return msg;\n    } \n} else {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 700,
        "wires": [
            [
                "b3c52a03801377e0"
            ]
        ]
    },
    {
        "id": "aa9fbfb97eee7c4b",
        "type": "ui_template",
        "z": "31d8721d35506f94",
        "group": "94a3c477325a32c4",
        "name": "Display image",
        "order": 1,
        "width": 16,
        "height": 12,
        "format": "<!DOCTYPE html>\n<html>\n<style>\n    .img {\n        border: 8px solid #000;\n        border-radius: 8px;\n        padding: 2px;\n        width: 800px;\n    }\n</style>\n\n<center>\n    <table>\n        <tr>\n            <!-- Row 1 -->\n            <td style=\"text-align: center\"><img src=\"data:image/jpg;base64,{{msg.payload}}\" class=img /></td>\n        </tr>\n    </table>\n</center>\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1320,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "98c9f5b4507b8cbc",
        "type": "file in",
        "z": "31d8721d35506f94",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1000,
        "y": 800,
        "wires": [
            [
                "0690936feb60d6f7"
            ]
        ]
    },
    {
        "id": "0690936feb60d6f7",
        "type": "base64",
        "z": "31d8721d35506f94",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 1140,
        "y": 800,
        "wires": [
            [
                "aa9fbfb97eee7c4b"
            ]
        ]
    },
    {
        "id": "433cb92bd1f354fe",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "Adapt msg and set index",
        "func": "list_files=flow.get(\"list_files\")\n\nflow.set(\"index_file\",list_files.findIndex(x=>x==msg.payload.title))\n\npath_files=flow.get(\"path_files\")\nmsg.filename = path_files+msg.payload.title;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 800,
        "wires": [
            [
                "98c9f5b4507b8cbc"
            ]
        ]
    },
    {
        "id": "99d8d178def6f9a3",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "Reset list1",
        "func": "flow.set(\"list_path1\",[])\nflow.set(\"path1\",\"\")\n\nmsg.payload=[];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 180,
        "wires": [
            [
                "bd31c7d393482e08",
                "a0aa5648a9cea66a"
            ]
        ]
    },
    {
        "id": "076982fdcf306309",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "set good check path2",
        "func": "function set_good_check(item, index, array) {\n    if (array[index]==path) {\n        msg1.payload.push({\"title\":array[index],\"isChecked\":true})\n    } else { \n        msg1.payload.push(array[index]);\n    }\n}\npath=flow.get(\"path2\")\n\nif (path==undefined) {\n    path=[];\n}\n\nmsg1 = {payload:[]}\nmsg.payload = flow.get(\"list_path2\")\nmsg.payload.forEach(set_good_check)\n\nreturn msg1",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 400,
        "wires": [
            [
                "55104da9e289ea46"
            ]
        ]
    },
    {
        "id": "2c40bba44424bbb9",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "set good check path3",
        "func": "function set_good_check(item, index, array) {\n    if (array[index]==path) {\n        msg1.payload.push({\"title\":array[index],\"isChecked\":true})\n    } else { \n        msg1.payload.push(array[index]);\n    }\n}\npath=flow.get(\"path3\")\n\nif (path==undefined) {\n    path=[];\n}\n\nmsg1 = {payload:[]}\nmsg.payload = flow.get(\"list_path3\")\nmsg.payload.forEach(set_good_check)\n\nreturn msg1",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 560,
        "wires": [
            [
                "94d7d0a907f21a80"
            ]
        ]
    },
    {
        "id": "aaac8717f9d0ddd0",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "remove common",
        "func": "path=flow.get(\"path1\")\nfunction remove_path(item, index, array) {\n  array[index] = item.replace(\"/home/pi/data/\"+path+\"/\", \"\")\n} \n\nmsg.payload.forEach(remove_path)\n\nflow.set(\"list_path2\",msg.payload)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 400,
        "wires": [
            [
                "076982fdcf306309",
                "5d648daada2b9a47"
            ]
        ]
    },
    {
        "id": "74e572a5af4a669f",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "Create msg",
        "func": "path = flow.get(\"path1\")\nflow.set(\"path2\",\"\")\n\nif (path != undefined && path != \"\") {\n    msg = {}\n    msg.dirname = \"/home/pi/data/\" + path\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 400,
        "wires": [
            [
                "047d6a121c4c915c"
            ]
        ]
    },
    {
        "id": "6c4ff691019a5975",
        "type": "switch",
        "z": "31d8721d35506f94",
        "name": "",
        "property": "payload.isChecked",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 320,
        "wires": [
            [
                "a0aa5648a9cea66a"
            ],
            [
                "74e572a5af4a669f"
            ]
        ]
    },
    {
        "id": "a0aa5648a9cea66a",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "Reset list2",
        "func": "flow.set(\"list_path2\",[])\nflow.set(\"path2\",\"\")\n\nmsg.payload=[];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 320,
        "wires": [
            [
                "55104da9e289ea46",
                "5d648daada2b9a47"
            ]
        ]
    },
    {
        "id": "796565376511728b",
        "type": "switch",
        "z": "31d8721d35506f94",
        "name": "",
        "property": "payload.isChecked",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 480,
        "wires": [
            [
                "5d648daada2b9a47"
            ],
            [
                "5647974fe41efd1e"
            ]
        ]
    },
    {
        "id": "5d648daada2b9a47",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "Reset list3",
        "func": "flow.set(\"list_path3\",[])\nflow.set(\"path3\",\"\")\n\nmsg.payload=[];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 480,
        "wires": [
            [
                "94d7d0a907f21a80",
                "3aa14e0191041817"
            ]
        ]
    },
    {
        "id": "f097e8ca8badd4da",
        "type": "switch",
        "z": "31d8721d35506f94",
        "name": "",
        "property": "payload.isChecked",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 640,
        "wires": [
            [
                "3aa14e0191041817"
            ],
            [
                "bb2bf6d3f0ad0314"
            ]
        ]
    },
    {
        "id": "3aa14e0191041817",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "Reset list_files",
        "func": "flow.set(\"list_files\",[])\nflow.set(\"path_files\",\"\")\nflow.set(\"index_file\")\n\nmsg.payload=[];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 640,
        "wires": [
            [
                "98c36712beeaf994"
            ]
        ]
    },
    {
        "id": "bff1aa8052cf81c6",
        "type": "dir2files",
        "z": "31d8721d35506f94",
        "name": "",
        "dirname": "",
        "pathRegex": "",
        "isRecursive": false,
        "findDir": true,
        "isArray": true,
        "x": 520,
        "y": 560,
        "wires": [
            [
                "c46ab9536c451f01"
            ]
        ]
    },
    {
        "id": "c46ab9536c451f01",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "remove common",
        "func": "path=flow.get(\"path1\") + \"/\" + flow.get(\"path2\")\nfunction remove_path(item, index, array) {\n  array[index] = item.replace(\"/home/pi/data/\"+path+\"/\", \"\")\n} \n\nmsg.payload.forEach(remove_path)\n\nflow.set(\"list_path3\",msg.payload)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 560,
        "wires": [
            [
                "2c40bba44424bbb9",
                "3aa14e0191041817"
            ]
        ]
    },
    {
        "id": "5647974fe41efd1e",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "Create msg",
        "func": "path = flow.get(\"path1\") + \"/\" + flow.get(\"path2\")\nflow.set(\"path3\",\"\")\n\nif (path != undefined && path != \"\") {\n    msg = {}\n    msg.dirname = \"/home/pi/data/\" + path\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 560,
        "wires": [
            [
                "bff1aa8052cf81c6"
            ]
        ]
    },
    {
        "id": "40e467ea6524e689",
        "type": "ui_button",
        "z": "31d8721d35506f94",
        "name": "",
        "group": "94a3c477325a32c4",
        "order": 2,
        "width": 8,
        "height": 1,
        "passthru": false,
        "label": "Previous",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "keyboard_arrow_left",
        "payload": "",
        "payloadType": "str",
        "topic": "Previous",
        "topicType": "str",
        "x": 600,
        "y": 880,
        "wires": [
            [
                "42f0dc86642c39b9"
            ]
        ]
    },
    {
        "id": "59f76f7c0b39e2f9",
        "type": "ui_button",
        "z": "31d8721d35506f94",
        "name": "",
        "group": "94a3c477325a32c4",
        "order": 3,
        "width": 8,
        "height": 1,
        "passthru": false,
        "label": "Next",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "keyboard_arrow_right",
        "payload": "",
        "payloadType": "str",
        "topic": "Next",
        "topicType": "str",
        "x": 610,
        "y": 920,
        "wires": [
            [
                "b9d2d1f1b3becac6"
            ]
        ]
    },
    {
        "id": "b9d2d1f1b3becac6",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "Get next file path",
        "func": "path_files=flow.get(\"path_files\")\nindex_file=flow.get(\"index_file\")\nlist_files=flow.get(\"list_files\")\n\nif (index_file!=undefined && list_files.length>0) {\n    if (index_file>=list_files.length-1) {\n        msg.payload=\"Last\"\n    } else {\n        msg.payload={}\n        msg.filename = path_files+list_files[index_file+1];\n        flow.set(\"index_file\",index_file+1)\n    }\n} else {\n    msg.payload=\"No_Image\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 920,
        "wires": [
            [
                "16ddb5710b66f514"
            ]
        ]
    },
    {
        "id": "42f0dc86642c39b9",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "Get previous file path",
        "func": "path_files=flow.get(\"path_files\")\nindex_file=flow.get(\"index_file\")\nlist_files=flow.get(\"list_files\")\n\nif (index_file!=undefined && list_files.length>0) {\n    if (index_file<=0) {\n        msg.payload=\"First\"\n    } else {\n        msg.payload={}\n        msg.filename = path_files+list_files[index_file-1];\n        flow.set(\"index_file\",index_file-1)\n    }\n} else {\n    msg.payload=\"No_Image\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 880,
        "wires": [
            [
                "16ddb5710b66f514"
            ]
        ]
    },
    {
        "id": "346fd71c312f06f6",
        "type": "ui_toast",
        "z": "31d8721d35506f94",
        "position": "dialog",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1350,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "43930684c476c2cb",
        "type": "change",
        "z": "31d8721d35506f94",
        "name": "Last image message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Last picture, no more picture",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 920,
        "wires": [
            [
                "346fd71c312f06f6"
            ]
        ]
    },
    {
        "id": "3be75efb372ddc73",
        "type": "ui_toast",
        "z": "31d8721d35506f94",
        "position": "dialog",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1350,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "55d83c196ba3d82f",
        "type": "change",
        "z": "31d8721d35506f94",
        "name": "First image message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "First picture, no more picture",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 880,
        "wires": [
            [
                "3be75efb372ddc73"
            ]
        ]
    },
    {
        "id": "16ddb5710b66f514",
        "type": "switch",
        "z": "31d8721d35506f94",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "First",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Last",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "No_Image",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 970,
        "y": 900,
        "wires": [
            [
                "55d83c196ba3d82f"
            ],
            [
                "43930684c476c2cb"
            ],
            [
                "e205f4d015f3aef4"
            ],
            [
                "98c9f5b4507b8cbc"
            ]
        ]
    },
    {
        "id": "524b33b91876dfd2",
        "type": "ui_toast",
        "z": "31d8721d35506f94",
        "position": "dialog",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1350,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "e205f4d015f3aef4",
        "type": "change",
        "z": "31d8721d35506f94",
        "name": "No pictures",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "No pictures, Please select a picture",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 960,
        "wires": [
            [
                "524b33b91876dfd2"
            ]
        ]
    },
    {
        "id": "a807ca0c7ddeb119",
        "type": "ui_list",
        "z": "31d8721d35506f94",
        "group": "e69195eabe55bed4",
        "name": "",
        "order": 1,
        "width": 1,
        "height": 14,
        "lineType": "two",
        "actionType": "none",
        "allowHTML": false,
        "outputs": 0,
        "topic": "",
        "x": 290,
        "y": 780,
        "wires": []
    },
    {
        "id": "a937d010b85fe9d5",
        "type": "ui_template",
        "z": "31d8721d35506f94",
        "group": "c9aaf84f0d1abd88",
        "name": "Style",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>     \n#Gallery_Hidden_Group{\n    opacity:0;\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 160,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "faf829c1c0be2306",
        "type": "ui_button",
        "z": "31d8721d35506f94",
        "name": "",
        "group": "3b7510519e97c165",
        "order": 2,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-refresh",
        "payload": "0",
        "payloadType": "num",
        "topic": "topic",
        "topicType": "msg",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "d9188ac81ad3429f"
            ]
        ]
    },
    {
        "id": "24d378ba25490d0f",
        "type": "ui_ui_control",
        "z": "31d8721d35506f94",
        "name": "",
        "events": "change",
        "x": 300,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "513275a52aa0b3a3",
        "type": "ui_button",
        "z": "31d8721d35506f94",
        "name": "",
        "group": "76f69c5fc64fb5e9",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Previous",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_return",
        "payload": "{\"tab\":\"Segmentation\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 160,
        "y": 640,
        "wires": [
            [
                "24d378ba25490d0f"
            ]
        ]
    },
    {
        "id": "6aa24027d11425fd",
        "type": "ui_ui_control",
        "z": "31d8721d35506f94",
        "name": "",
        "events": "change",
        "x": 300,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "7ac48bda85a63542",
        "type": "ui_button",
        "z": "31d8721d35506f94",
        "name": "",
        "group": "76f69c5fc64fb5e9",
        "order": 3,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "New Acquisition",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_tab",
        "payload": "{\"tab\":\"Optic Configuration\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 140,
        "y": 720,
        "wires": [
            [
                "6aa24027d11425fd"
            ]
        ]
    },
    {
        "id": "53f40b6328ce57e8",
        "type": "ui_ui_control",
        "z": "31d8721d35506f94",
        "name": "",
        "events": "change",
        "x": 300,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "2ee44795ce4f5323",
        "type": "ui_button",
        "z": "31d8721d35506f94",
        "name": "",
        "group": "76f69c5fc64fb5e9",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Download",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_tab",
        "payload": "{\"tab\":\"Download Files\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 160,
        "y": 680,
        "wires": [
            [
                "53f40b6328ce57e8"
            ]
        ]
    },
    {
        "id": "a8239b7594db425e",
        "type": "ui_ui_control",
        "z": "31d8721d35506f94",
        "name": "onTab",
        "events": "all",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "7a4683ef38aa7978"
            ]
        ]
    },
    {
        "id": "7a4683ef38aa7978",
        "type": "function",
        "z": "31d8721d35506f94",
        "name": "check tab",
        "func": "if (msg.name == \"Gallery\"){\n    msg={}\n    msg.payload = 0\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 60,
        "wires": [
            [
                "d9188ac81ad3429f"
            ]
        ],
        "outputLabels": [
            "interface"
        ]
    },
    {
        "id": "fc810aba72e5e946",
        "type": "dir2files",
        "z": "ee49a6917e33b587",
        "name": "",
        "dirname": "/home/pi/data/img",
        "pathRegex": "",
        "isRecursive": true,
        "findDir": true,
        "isArray": true,
        "x": 500,
        "y": 120,
        "wires": [
            [
                "5cd546871808739f"
            ]
        ],
        "inputLabels": [
            "files"
        ]
    },
    {
        "id": "69ed58a84c8f6965",
        "type": "inject",
        "z": "ee49a6917e33b587",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "cde4a7eadbcd7348",
                "079006a476e530bd"
            ]
        ]
    },
    {
        "id": "eba66c193415778c",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "update list_path1",
        "func": "var list_path1 = flow.get('list_path1');\n\nif (list_path1 === undefined || list_path1 === \"\") {\n    list_path1 = []\n    console.log(\"error\")\n}\n\npath = \"data/\" + msg.payload.title\n\nif (msg.payload.isChecked){\n    if (list_path1.includes(path) === false){\n        list_path1.push(path)\n    }\n    // Element already in list, don't push it more than once\n    //segmentation_list.push(msg.payload[\"title\"])\n}\nelse {\n    var pos = list_path1.indexOf(path)\n    list_path1.splice(pos, 1)\n}\n\nflow.set('list_path1', list_path1)\nflow.set('list_path2', [])\nflow.set('list_path3', [])\n\nreturn {};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 200,
        "wires": [
            [
                "8007c75096f8ea69"
            ]
        ]
    },
    {
        "id": "4bc096796a557677",
        "type": "change",
        "z": "ee49a6917e33b587",
        "name": "Reset All List",
        "rules": [
            {
                "t": "set",
                "p": "list_path",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "list_path1",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "list_path2",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "list_path3",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "bouton_choice",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "download_path",
                "pt": "flow",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 80,
        "wires": [
            [
                "8007c75096f8ea69",
                "7cef951a56a80418",
                "d333608e0d967c90"
            ]
        ]
    },
    {
        "id": "5cd546871808739f",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "remove common",
        "func": "function remove_path(item, index, array) {\n  array[index] = item.replace(\"/home/pi/data/\", \"\")\n} \n\nmsg.payload.forEach(remove_path)\nmsg.topic = \"list_path\"\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 120,
        "wires": [
            [
                "2da5b04af4aa162f",
                "8007c75096f8ea69"
            ]
        ]
    },
    {
        "id": "c5a981d121c3e0a1",
        "type": "ui_list",
        "z": "ee49a6917e33b587",
        "group": "4a1683be6c899941",
        "name": "",
        "order": 1,
        "width": 8,
        "height": 8,
        "lineType": "one",
        "actionType": "check",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 910,
        "y": 200,
        "wires": [
            [
                "eba66c193415778c",
                "46f6bef9bbaff6d6"
            ]
        ]
    },
    {
        "id": "cde4a7eadbcd7348",
        "type": "ui_multistate_switch",
        "z": "ee49a6917e33b587",
        "name": "Selections Dossiers",
        "group": "9666b54a41785169",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "change",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "All",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Images",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            },
            {
                "label": "Objects",
                "value": "2",
                "valueType": "num",
                "color": "#ff6666"
            },
            {
                "label": "Ecotaxa",
                "value": "3",
                "valueType": "str",
                "color": "#009999"
            }
        ],
        "topic": "",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "786f625705d4b138",
                "4bc096796a557677",
                "ce6a4d0c368155fc"
            ]
        ]
    },
    {
        "id": "9e83d1c96ed6acb5",
        "type": "dir2files",
        "z": "ee49a6917e33b587",
        "name": "",
        "dirname": "/home/pi/data/objects",
        "pathRegex": "",
        "isRecursive": true,
        "findDir": true,
        "isArray": true,
        "x": 500,
        "y": 160,
        "wires": [
            [
                "5cd546871808739f"
            ]
        ]
    },
    {
        "id": "786f625705d4b138",
        "type": "switch",
        "z": "ee49a6917e33b587",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 330,
        "y": 140,
        "wires": [
            [
                "4bc096796a557677"
            ],
            [
                "fc810aba72e5e946"
            ],
            [
                "9e83d1c96ed6acb5"
            ],
            [
                "08c5ab954fe08c83"
            ]
        ]
    },
    {
        "id": "8ab20d99e15f9d79",
        "type": "ui_dropdown",
        "z": "ee49a6917e33b587",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Choose USB device",
        "group": "9666b54a41785169",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "No Drive Detected",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "device_path",
        "topicType": "str",
        "className": "",
        "x": 820,
        "y": 460,
        "wires": [
            [
                "177bc1aceabf890b"
            ]
        ]
    },
    {
        "id": "1d91037f349c365d",
        "type": "ui_button",
        "z": "ee49a6917e33b587",
        "name": "Detect drive",
        "group": "9666b54a41785169",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Detect drive",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-usb fa-2x",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "7641929e284f8259"
            ]
        ]
    },
    {
        "id": "7641929e284f8259",
        "type": "exec",
        "z": "ee49a6917e33b587",
        "command": "lsblk --bytes --json --paths --output-all",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "detect drive",
        "x": 310,
        "y": 460,
        "wires": [
            [
                "848ae15a09506f17"
            ],
            [],
            []
        ]
    },
    {
        "id": "848ae15a09506f17",
        "type": "json",
        "z": "ee49a6917e33b587",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 470,
        "y": 460,
        "wires": [
            [
                "acdeb250539a9d91"
            ]
        ]
    },
    {
        "id": "acdeb250539a9d91",
        "type": "change",
        "z": "ee49a6917e33b587",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "[payload.blockdevices.children[mountpoint=null].name]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 460,
        "wires": [
            [
                "8ab20d99e15f9d79"
            ]
        ]
    },
    {
        "id": "e690c0b6f9091e27",
        "type": "ui_button",
        "z": "ee49a6917e33b587",
        "name": "Backup to USB",
        "group": "9666b54a41785169",
        "order": 5,
        "width": "3",
        "height": 1,
        "passthru": false,
        "label": "Backup to USB",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "archive",
        "payload": "",
        "payloadType": "str",
        "topic": "USB Backup",
        "topicType": "str",
        "x": 140,
        "y": 640,
        "wires": [
            [
                "cb91da4b183ac947"
            ]
        ]
    },
    {
        "id": "177bc1aceabf890b",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "set local",
        "func": "flow.set(msg.topic,msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "cb91da4b183ac947",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "get device_path",
        "func": "msg.payload = flow.get(\"device_path\");\nvar download_path = flow.get(\"download_path\")\nif (download_path != undefined) {\n    msg.payload = msg.payload + \" \" + download_path;\n}\nelse {\n    msg.payload = msg.payload + \" data/\";\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 640,
        "wires": [
            [
                "7f26cf9f0c34f41c"
            ]
        ]
    },
    {
        "id": "2356b9c6a799057d",
        "type": "exec",
        "z": "ee49a6917e33b587",
        "command": "sudo /home/pi/PlanktoScope/scripts/bash/usb_backup.sh",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "usb_backup.sh",
        "x": 700,
        "y": 660,
        "wires": [
            [
                "85c8cc35300aadd9",
                "13dba74c591aeb38"
            ],
            [],
            [
                "e9c8dc20cfa646a9"
            ]
        ]
    },
    {
        "id": "7f26cf9f0c34f41c",
        "type": "switch",
        "z": "ee49a6917e33b587",
        "name": "No Drive",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "No Drive Detected",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 500,
        "y": 640,
        "wires": [
            [
                "f0faf613fee90606"
            ],
            [
                "2356b9c6a799057d",
                "db3b4dd37386d61f",
                "2071e8b89cf65249",
                "5d77d5cde8cd0f70",
                "4c35bd6eeae22984",
                "46bfc81417803902"
            ]
        ]
    },
    {
        "id": "f0faf613fee90606",
        "type": "ui_toast",
        "z": "ee49a6917e33b587",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 690,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "85c8cc35300aadd9",
        "type": "ui_toast",
        "z": "ee49a6917e33b587",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 910,
        "y": 640,
        "wires": []
    },
    {
        "id": "5608baf86cae1a79",
        "type": "ui_toast",
        "z": "ee49a6917e33b587",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1110,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "e9c8dc20cfa646a9",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "return code",
        "func": "switch (msg.payload.code){\ncase 0:\n    msg.payload = \"All files successfully copied, you can remove your usb drive!\";\n    break;\ncase 1:\n    msg.payload = \"There was an error!\";\n    break;\ncase 2:\n    msg.payload = \"Error: your device is already mounted\"\n    break;\ncase 3:\n    msg.payload = \"Error while mounting the device\"\n    break;\ncase 4:\n    msg.payload = \"Error: some files were corrupted during the copy!\"\n    break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 680,
        "wires": [
            [
                "5608baf86cae1a79",
                "3d2030c104c81694",
                "57d864808eebd20b",
                "d081f63b3381cf74"
            ]
        ]
    },
    {
        "id": "db3b4dd37386d61f",
        "type": "change",
        "z": "ee49a6917e33b587",
        "name": "Backup starting message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"The backup is starting now, please wait for the complete message before removing the drive\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 720,
        "wires": [
            [
                "5608baf86cae1a79"
            ]
        ]
    },
    {
        "id": "6f3de2b116d58cd7",
        "type": "ui_list",
        "z": "ee49a6917e33b587",
        "group": "35b8cc9737fbb93c",
        "name": "",
        "order": 1,
        "width": 8,
        "height": 8,
        "lineType": "one",
        "actionType": "check",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 850,
        "y": 280,
        "wires": [
            [
                "5a7b2f6129ca8305",
                "46f6bef9bbaff6d6"
            ]
        ]
    },
    {
        "id": "b92196c037facd99",
        "type": "ui_list",
        "z": "ee49a6917e33b587",
        "group": "7775cf1d4585df3b",
        "name": "",
        "order": 1,
        "width": 8,
        "height": 8,
        "lineType": "one",
        "actionType": "check",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 850,
        "y": 380,
        "wires": [
            [
                "6d5f76b4bbfff883",
                "46f6bef9bbaff6d6"
            ]
        ]
    },
    {
        "id": "767f13fcd7ed3f35",
        "type": "ui_text",
        "z": "ee49a6917e33b587",
        "group": "9666b54a41785169",
        "order": 4,
        "width": 8,
        "height": 2,
        "name": "",
        "label": "You are going to download or delete",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 570,
        "y": 1020,
        "wires": []
    },
    {
        "id": "8007c75096f8ea69",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "Only keep img or obj",
        "func": "function remove_not_img_or_obj(item, index, array) {\n    const regex = new RegExp('(img|objects)\\/.+\\/.+');\n    if (regex.test(array[index])==false) {\n        if ((list_path.length==1 && (\"data/\"+array[index])==list_path[0]) || (list_path.length>=2 && (\"data/\"+array[index])==list_path[1])) {\n            msg1.payload.push({\"title\":array[index],\"isChecked\":true});\n            if (list_path.length>1) {\n                flow.set(\"list_path1\",[list_path[1]])\n            }\n        } else { \n            msg1.payload.push(array[index]);\n        }\n    }\n}\nlist_path=flow.get(\"list_path1\")\n\nif (list_path==undefined) {\n    list_path=[];\n}\n\nmsg1 = {payload:[]}\nmsg.payload = flow.get(\"list_path\")\nmsg.payload.forEach(remove_not_img_or_obj)\n\nreturn msg1",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 200,
        "wires": [
            [
                "c5a981d121c3e0a1",
                "7cef951a56a80418"
            ]
        ]
    },
    {
        "id": "2da5b04af4aa162f",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "set local",
        "func": "flow.set(msg.topic,msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "5a7b2f6129ca8305",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "update list_path2",
        "func": "var list_path2 = flow.get('list_path2');\n\nif (list_path2 === undefined || list_path2 === \"\") {\n    list_path2 = []\n    console.log(\"error\")\n}\n\npath = \"data/\" + msg.payload.title\n\nif (msg.payload.isChecked){\n    if (list_path2.includes(path) === false){\n        list_path2.push(path)\n    }\n    // Element already in list, don't push it more than once\n    //segmentation_list.push(msg.payload[\"title\"])\n}\nelse {\n    var pos = list_path2.indexOf(path)\n    list_path2.splice(pos, 1)\n}\n\nflow.set('list_path2', list_path2)\nflow.set('list_path3', [])\n\nreturn {}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 280,
        "wires": [
            [
                "7cef951a56a80418"
            ]
        ]
    },
    {
        "id": "6d5f76b4bbfff883",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "update list_path3",
        "func": "var list_path3 = flow.get('list_path3');\n\nif (list_path3 === undefined || list_path3 === \"\") {\n    list_path3 = []\n    console.log(\"error\")\n}\n\npath = \"data/\" + msg.payload.title\n\nif (msg.payload.isChecked){\n    if (list_path3.includes(path) === false){\n        list_path3.push(path)\n    }\n    // Element already in list, don't push it more than once\n    //segmentation_list.push(msg.payload[\"title\"])\n}\nelse {\n    var pos = list_path3.indexOf(path)\n    list_path3.splice(pos, 1)\n}\n\nflow.set('list_path3', list_path3)\n\nreturn {}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 380,
        "wires": [
            [
                "d333608e0d967c90"
            ]
        ]
    },
    {
        "id": "7cef951a56a80418",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "Only keep img or obj => /something",
        "func": "function remove_not_img_or_obj(item, index, array) {\n    const regex1 = new RegExp(path+'\\/.+\\/.+');\n    const regex2 = new RegExp(path+'\\/.+');\n    if (regex1.test(\"data/\"+array[index])==false && regex2.test(\"data/\"+array[index])==true) {\n        if ((list_path.length==1 && (\"data/\"+array[index])==list_path[0]) || (list_path.length>=2 && (\"data/\"+array[index])==list_path[1])) {\n            msg1.payload.push({\"title\":array[index],\"isChecked\":true});\n            if (list_path.length>1) {\n                flow.set(\"list_path2\",[list_path[1]])\n            }\n        } else { \n            msg1.payload.push(array[index]);\n        }\n    }\n}\npath=flow.get(\"list_path1\")\nif (path==undefined) {\n    path=\"\"\n} else {\n    path=path[0]\n}\n\nlist_path=flow.get(\"list_path2\")\nif (list_path==undefined) {\n    list_path=[];\n}\n\nmsg1 = {payload:[]}\nmsg.payload = flow.get(\"list_path\")\nmsg.payload.forEach(remove_not_img_or_obj)\n\nreturn msg1",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 280,
        "wires": [
            [
                "6f3de2b116d58cd7",
                "d333608e0d967c90"
            ]
        ]
    },
    {
        "id": "d333608e0d967c90",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "Only keep img or obj => /something/something",
        "func": "function remove_not_img_or_obj(item, index, array) {\n    const regex = new RegExp(path+'\\/.+');\n    if (regex.test(\"data/\"+array[index])==true) {\n        if ((list_path.length==1 && (\"data/\"+array[index])==list_path[0]) || (list_path.length>=2 && (\"data/\"+array[index])==list_path[1])) {\n            msg1.payload.push({\"title\":array[index],\"isChecked\":true});\n            if (list_path.length>1) {\n                flow.set(\"list_path3\",[list_path[1]])\n            }\n        } else { \n            msg1.payload.push(array[index]);\n        }\n    }\n}\npath=flow.get(\"list_path2\")\nif (path==undefined) {\n    path=\"\"\n} else {\n    path=path[0]\n}\n\nlist_path=flow.get(\"list_path3\")\nif (list_path==undefined) {\n    list_path=[];\n}\n\nmsg1 = {payload:[]}\nmsg.payload = flow.get(\"list_path\")\nmsg.payload.forEach(remove_not_img_or_obj)\n\nreturn msg1",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 380,
        "wires": [
            [
                "b92196c037facd99"
            ]
        ]
    },
    {
        "id": "111b153dfaaf2f68",
        "type": "link in",
        "z": "ee49a6917e33b587",
        "name": "Texte download",
        "links": [
            "46f6bef9bbaff6d6",
            "ce6a4d0c368155fc",
            "44343e3703437644",
            "7c5352c31c1ac346"
        ],
        "x": 175,
        "y": 1020,
        "wires": [
            [
                "724a4ac3403262b6"
            ]
        ]
    },
    {
        "id": "46f6bef9bbaff6d6",
        "type": "link out",
        "z": "ee49a6917e33b587",
        "name": "",
        "mode": "link",
        "links": [
            "111b153dfaaf2f68"
        ],
        "x": 995,
        "y": 340,
        "wires": []
    },
    {
        "id": "ce6a4d0c368155fc",
        "type": "link out",
        "z": "ee49a6917e33b587",
        "name": "",
        "mode": "link",
        "links": [
            "111b153dfaaf2f68"
        ],
        "x": 295,
        "y": 200,
        "wires": []
    },
    {
        "id": "724a4ac3403262b6",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "choose folder",
        "func": "bouton = flow.get(\"bouton_choice\")\nvar download_path;\n\nif (bouton==0) {\n    download_path = \"data/\"\n} else {\n    path1 = flow.get(\"list_path1\")\n    path2 = flow.get(\"list_path2\")\n    path3 = flow.get(\"list_path3\")\n    \n    if (path3!=undefined && path3.length>=1) {\n        download_path = path3[0]\n    } else if (path2!=undefined && path2.length>=1) {\n        download_path = path2[0]\n    } else if (path1!=undefined && path1.length>=1) {\n        download_path = path1[0]\n    } else if (bouton==1) {\n        download_path = \"data/img/\"\n    } else {\n        download_path = \"data/objects/\"\n    }\n}\n\nflow.set(\"download_path\", download_path)\n\nmsg = {payload:download_path}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1020,
        "wires": [
            [
                "767f13fcd7ed3f35"
            ]
        ]
    },
    {
        "id": "4156bf50b481d8ba",
        "type": "ui_button",
        "z": "ee49a6917e33b587",
        "name": "Delete Files",
        "group": "9666b54a41785169",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Delete Files",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "className": "",
        "icon": "fa-trash",
        "payload": "Do you realy want to delete this files ?",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 130,
        "y": 1080,
        "wires": [
            [
                "d466bda2afaa4036"
            ]
        ]
    },
    {
        "id": "d466bda2afaa4036",
        "type": "ui_toast",
        "z": "ee49a6917e33b587",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "YES",
        "cancel": "NO",
        "raw": false,
        "className": "",
        "topic": "Delete files",
        "name": "Confirmation message",
        "x": 320,
        "y": 1080,
        "wires": [
            [
                "76eaad03795c7a37"
            ]
        ]
    },
    {
        "id": "76eaad03795c7a37",
        "type": "switch",
        "z": "ee49a6917e33b587",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "YES",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 1080,
        "wires": [
            [
                "974b84c90d916a0d"
            ]
        ]
    },
    {
        "id": "974b84c90d916a0d",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "get device_path",
        "func": "var download_path = flow.get(\"download_path\")\nif (download_path == undefined) {\n    msg.path = \" data/\";\n} else if (download_path == \"\") {\n    msg.path = \" data/\";\n}\nelse {\n    msg.path = download_path;\n}\n\nmsg.payload = msg.path;\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1080,
        "wires": [
            [
                "eb19afeb514accc0"
            ]
        ]
    },
    {
        "id": "341947559e2690af",
        "type": "exec",
        "z": "ee49a6917e33b587",
        "command": "rm -r ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "delete",
        "x": 430,
        "y": 1180,
        "wires": [
            [
                "89fa218f5f81f8ef"
            ],
            [],
            [
                "362342c1bac176db"
            ]
        ]
    },
    {
        "id": "89fa218f5f81f8ef",
        "type": "ui_toast",
        "z": "ee49a6917e33b587",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Delete files : Error",
        "name": "",
        "x": 600,
        "y": 1160,
        "wires": []
    },
    {
        "id": "dc850832f3e442f7",
        "type": "change",
        "z": "ee49a6917e33b587",
        "name": "Backup starting message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "The delete is starting now, please wait",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 1240,
        "wires": [
            [
                "b10aaa95e1bf18bb"
            ]
        ]
    },
    {
        "id": "b10aaa95e1bf18bb",
        "type": "ui_toast",
        "z": "ee49a6917e33b587",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Delete Files",
        "name": "",
        "x": 810,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "362342c1bac176db",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "",
        "func": "msg.payload = \"Delete Completed\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1200,
        "wires": [
            [
                "b10aaa95e1bf18bb",
                "be9e189760ae0a40"
            ]
        ]
    },
    {
        "id": "eb19afeb514accc0",
        "type": "ui_toast",
        "z": "ee49a6917e33b587",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "YES",
        "cancel": "NO",
        "raw": false,
        "className": "",
        "topic": "You are going to delete all this folder",
        "name": "Confirmation message",
        "x": 840,
        "y": 1080,
        "wires": [
            [
                "14069623f462fc9e"
            ]
        ]
    },
    {
        "id": "14069623f462fc9e",
        "type": "switch",
        "z": "ee49a6917e33b587",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "YES",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 130,
        "y": 1180,
        "wires": [
            [
                "dc850832f3e442f7",
                "c5ebeb93c0047247"
            ]
        ]
    },
    {
        "id": "c5ebeb93c0047247",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "",
        "func": "if (msg.path == \"/data\") {\n    msg.payload = \"/home/pi/data/img/* /home/pi/data/objects/* /home/pi/data/export/* /home/pi/data/clean/*\"\n} else if (msg.path == \"/data/img\" || msg.path == \"/data/objects\") {\n    msg.payload = \"/home/pi/\" + msg.path + \"/*\";\n} else {\n    msg.payload = \"/home/pi/\" + msg.path;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1180,
        "wires": [
            [
                "341947559e2690af"
            ]
        ]
    },
    {
        "id": "83b19dee1f28db21",
        "type": "link in",
        "z": "ee49a6917e33b587",
        "name": "",
        "links": [
            "be9e189760ae0a40"
        ],
        "x": 75,
        "y": 200,
        "wires": [
            [
                "eec9e1c8fd75cd0d"
            ]
        ]
    },
    {
        "id": "be9e189760ae0a40",
        "type": "link out",
        "z": "ee49a6917e33b587",
        "name": "",
        "mode": "link",
        "links": [
            "83b19dee1f28db21"
        ],
        "x": 755,
        "y": 1200,
        "wires": []
    },
    {
        "id": "eec9e1c8fd75cd0d",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "Reset",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 200,
        "wires": [
            [
                "cde4a7eadbcd7348"
            ]
        ]
    },
    {
        "id": "68d97e9b2d59f2fa",
        "type": "ui_ui_control",
        "z": "ee49a6917e33b587",
        "name": "",
        "events": "change",
        "x": 260,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "7d583ffc57a6dfae",
        "type": "ui_button",
        "z": "ee49a6917e33b587",
        "name": "",
        "group": "fc44ae89e1931ced",
        "order": 1,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Previous",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_return",
        "payload": "{\"tab\":\"Gallery\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "68d97e9b2d59f2fa"
            ]
        ]
    },
    {
        "id": "8c589e5bee31bbe2",
        "type": "ui_ui_control",
        "z": "ee49a6917e33b587",
        "name": "",
        "events": "change",
        "x": 260,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "896e3637b936ac58",
        "type": "ui_button",
        "z": "ee49a6917e33b587",
        "name": "",
        "group": "fc44ae89e1931ced",
        "order": 2,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Home",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_tab",
        "payload": "{\"tab\":\"Home\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "8c589e5bee31bbe2"
            ]
        ]
    },
    {
        "id": "5dc0d24300cbc47a",
        "type": "ui_text",
        "z": "ee49a6917e33b587",
        "group": "9666b54a41785169",
        "order": 7,
        "width": 5,
        "height": 2,
        "name": "",
        "label": "Status",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 170,
        "y": 720,
        "wires": []
    },
    {
        "id": "4ad29db06e90be5f",
        "type": "ui_gauge",
        "z": "ee49a6917e33b587",
        "name": "",
        "group": "9666b54a41785169",
        "order": 8,
        "width": 3,
        "height": 2,
        "gtype": "gage",
        "title": "",
        "label": "",
        "format": "{{msg.payload}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1350,
        "y": 960,
        "wires": []
    },
    {
        "id": "4c35bd6eeae22984",
        "type": "trigger",
        "z": "ee49a6917e33b587",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "reset",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 690,
        "y": 960,
        "wires": [
            [
                "568a0c5c1bf7bedc"
            ]
        ]
    },
    {
        "id": "ac6b04f349847acb",
        "type": "exec",
        "z": "ee49a6917e33b587",
        "command": "du -s ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Size folder download",
        "x": 960,
        "y": 820,
        "wires": [
            [
                "c0a019df88728b1a"
            ],
            [],
            []
        ]
    },
    {
        "id": "93e4b1de0c9b3a8e",
        "type": "exec",
        "z": "ee49a6917e33b587",
        "command": "du -s ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Size USB",
        "x": 1000,
        "y": 960,
        "wires": [
            [
                "b02cdb8bdbcda597"
            ],
            [],
            []
        ]
    },
    {
        "id": "2071e8b89cf65249",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "",
        "func": "msg = {};\ndownload_path = flow.get(\"download_path\")\nif (download_path != undefined) {\n    msg.payload = download_path\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 820,
        "wires": [
            [
                "ac6b04f349847acb"
            ]
        ]
    },
    {
        "id": "568a0c5c1bf7bedc",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "",
        "func": "msg = {};\ndevice_path = flow.get(\"device_path\")\nif (device_path != undefined) {\n    device_path = device_path.replace(\"/dev\",\"\")\n    msg.payload = \"/media\" + device_path + \"/planktoscope_data\"\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 960,
        "wires": [
            [
                "93e4b1de0c9b3a8e"
            ]
        ]
    },
    {
        "id": "3d2030c104c81694",
        "type": "change",
        "z": "ee49a6917e33b587",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "reset",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 680,
        "wires": [
            [
                "4c35bd6eeae22984"
            ]
        ]
    },
    {
        "id": "04ec1285a00acdfe",
        "type": "exec",
        "z": "ee49a6917e33b587",
        "command": "du -s ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Size USB",
        "x": 1000,
        "y": 880,
        "wires": [
            [
                "1f8afd5161040cb3"
            ],
            [],
            []
        ]
    },
    {
        "id": "57acc4094b13077b",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "",
        "func": "msg = {};\ndevice_path = flow.get(\"device_path\")\nif (device_path != undefined) {\n    device_path = device_path.replace(\"/dev\",\"\")\n    msg.payload = \"/media\" + device_path + \"/planktoscope_data\"\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 880,
        "wires": [
            [
                "04ec1285a00acdfe"
            ]
        ]
    },
    {
        "id": "5d77d5cde8cd0f70",
        "type": "delay",
        "z": "ee49a6917e33b587",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 880,
        "wires": [
            [
                "57acc4094b13077b"
            ]
        ]
    },
    {
        "id": "c0a019df88728b1a",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "",
        "func": "if (msg.payload != undefined) {\n    taille = msg.payload.split(\"\\t\")[0];\n    flow.set(\"download_size\",taille);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "1f8afd5161040cb3",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "",
        "func": "if (msg.payload != undefined) {\n    taille = msg.payload.split(\"\\t\")[0];\n    flow.set(\"usb_size\",taille);\n    msg.payload = taille;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "b02cdb8bdbcda597",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "",
        "func": "if (msg.payload != undefined) {\n    taille = msg.payload.split(\"\\t\")[0];\n    \n    usb_size = flow.get(\"usb_size\")\n    download_size = flow.get(\"download_size\")\n    \n    if (usb_size == undefined || download_size == undefined) {\n        msg.payload = 0;\n    } else {\n        msg.payload = ((taille - usb_size)/download_size)*100\n    }\n\n} else {\n    msg.payload = 0;\n}\n\nmsg.payload = Math.round(msg.payload)\n\nif (msg.payload<0) {\n    msg.payload=0;\n}\nif (msg.payload>100) {\n    msg.payload=100;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 960,
        "wires": [
            [
                "4ad29db06e90be5f"
            ]
        ]
    },
    {
        "id": "46bfc81417803902",
        "type": "change",
        "z": "ee49a6917e33b587",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "In Progress (download)",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 760,
        "wires": [
            [
                "d25aa542120d7811"
            ]
        ]
    },
    {
        "id": "57d864808eebd20b",
        "type": "change",
        "z": "ee49a6917e33b587",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Done",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 640,
        "wires": [
            [
                "f99bb2e8eccd3dc4"
            ]
        ]
    },
    {
        "id": "079006a476e530bd",
        "type": "change",
        "z": "ee49a6917e33b587",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Waiting",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 40,
        "wires": [
            [
                "c81fe000ba2f5d49"
            ]
        ]
    },
    {
        "id": "5c51ec9357b4db40",
        "type": "link in",
        "z": "ee49a6917e33b587",
        "name": "Status",
        "links": [
            "d25aa542120d7811",
            "c81fe000ba2f5d49",
            "f99bb2e8eccd3dc4",
            "deeb637f6e64e8da"
        ],
        "x": 75,
        "y": 720,
        "wires": [
            [
                "5dc0d24300cbc47a"
            ]
        ]
    },
    {
        "id": "d25aa542120d7811",
        "type": "link out",
        "z": "ee49a6917e33b587",
        "name": "",
        "mode": "link",
        "links": [
            "5c51ec9357b4db40"
        ],
        "x": 825,
        "y": 760,
        "wires": []
    },
    {
        "id": "c81fe000ba2f5d49",
        "type": "link out",
        "z": "ee49a6917e33b587",
        "name": "",
        "mode": "link",
        "links": [
            "5c51ec9357b4db40"
        ],
        "x": 475,
        "y": 40,
        "wires": []
    },
    {
        "id": "f99bb2e8eccd3dc4",
        "type": "link out",
        "z": "ee49a6917e33b587",
        "name": "",
        "mode": "link",
        "links": [
            "5c51ec9357b4db40"
        ],
        "x": 1275,
        "y": 580,
        "wires": []
    },
    {
        "id": "d081f63b3381cf74",
        "type": "change",
        "z": "ee49a6917e33b587",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "100",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 600,
        "wires": [
            [
                "4ad29db06e90be5f"
            ]
        ]
    },
    {
        "id": "5fbf80c17060587c",
        "type": "inject",
        "z": "ee49a6917e33b587",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 1150,
        "y": 1000,
        "wires": [
            [
                "4ad29db06e90be5f"
            ]
        ]
    },
    {
        "id": "0ef09fd97499978b",
        "type": "change",
        "z": "ee49a6917e33b587",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "In Progress (Integrity)",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 520,
        "wires": [
            [
                "f99bb2e8eccd3dc4"
            ]
        ]
    },
    {
        "id": "13dba74c591aeb38",
        "type": "switch",
        "z": "ee49a6917e33b587",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Main copy done",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 890,
        "y": 560,
        "wires": [
            [
                "0ef09fd97499978b",
                "f5df597ad2634287"
            ]
        ]
    },
    {
        "id": "f5df597ad2634287",
        "type": "change",
        "z": "ee49a6917e33b587",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "90",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 560,
        "wires": [
            [
                "4ad29db06e90be5f"
            ]
        ]
    },
    {
        "id": "b265fa7e81190247",
        "type": "ui_ui_control",
        "z": "ee49a6917e33b587",
        "name": "onTab",
        "events": "all",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "3ea9ec754800e613"
            ]
        ]
    },
    {
        "id": "3ea9ec754800e613",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "check tab",
        "func": "if (msg.name == \"Download Files\"){\n    msg={}\n    msg.payload = 0\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 240,
        "wires": [
            [
                "cde4a7eadbcd7348"
            ]
        ],
        "outputLabels": [
            "interface"
        ]
    },
    {
        "id": "bc9086f9fa8a6b7e",
        "type": "ui_button",
        "z": "ee49a6917e33b587",
        "name": "Ecotaxa",
        "group": "9666b54a41785169",
        "order": 5,
        "width": "2",
        "height": 1,
        "passthru": false,
        "label": "Ecotaxa",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "archive",
        "payload": "",
        "payloadType": "str",
        "topic": "Ecotaxa",
        "topicType": "str",
        "x": 140,
        "y": 1320,
        "wires": [
            [
                "81c1e6f19f45f6cd"
            ]
        ]
    },
    {
        "id": "81c1e6f19f45f6cd",
        "type": "function",
        "z": "ee49a6917e33b587",
        "name": "get device_path",
        "func": "var download_path = flow.get(\"download_path\")\n\nif (download_path != undefined) {\n    msg.payload = download_path;\n}\nelse {\n    msg.payload = msg.payload + \" data/\";\n}\nmsg.payload = msg.payload.replace(\"data/export/ecotaxa/\",\"\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1320,
        "wires": [
            [
                "be0f1174d1a18284",
                "e08463cd885bb24c"
            ]
        ]
    },
    {
        "id": "be0f1174d1a18284",
        "type": "exec",
        "z": "ee49a6917e33b587",
        "command": "bash /home/pi/PlanktoScope/scripts/bash/ftp_connect.sh",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "ftp_connect.sh",
        "x": 540,
        "y": 1320,
        "wires": [
            [],
            [
                "e08463cd885bb24c"
            ],
            []
        ]
    },
    {
        "id": "e08463cd885bb24c",
        "type": "debug",
        "z": "ee49a6917e33b587",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1440,
        "wires": []
    },
    {
        "id": "08c5ab954fe08c83",
        "type": "dir2files",
        "z": "ee49a6917e33b587",
        "name": "",
        "dirname": "/home/pi/data/export/ecotaxa",
        "pathRegex": "",
        "isRecursive": true,
        "findDir": false,
        "isArray": true,
        "x": 500,
        "y": 200,
        "wires": [
            [
                "5cd546871808739f"
            ]
        ]
    },
    {
        "id": "2c8c45ab.610c0a",
        "type": "ui_gauge",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "d89ce6f9f1138668",
        "order": 1,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "CPU Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": "30",
        "max": "55",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 610,
        "y": 100,
        "wires": []
    },
    {
        "id": "ddcbbfa5.cd158",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "vcgencmd measure_temp | tr -d \"temp=\" | tr -d \"'C\" | tr -d \"\\n\"",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "winHide": false,
        "name": "RPi Temp.",
        "x": 330,
        "y": 120,
        "wires": [
            [
                "bc503fa5.f46dd",
                "2c8c45ab.610c0a",
                "cef370c7.1f7a"
            ],
            [],
            []
        ]
    },
    {
        "id": "cef370c7.1f7a",
        "type": "ui_chart",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "d89ce6f9f1138668",
        "order": 3,
        "width": 6,
        "height": 3,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "30",
        "ymax": "70",
        "removeOlder": "20",
        "removeOlderPoints": "200",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 570,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "55749fd8.3aca5",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "top -d 0.5 -b -n2 | grep \"Cpu(s)\"|tail -n 1 | awk '{print $2 + $4}' | tr -d \"\\n\"",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "winHide": false,
        "name": "CPU Load",
        "x": 330,
        "y": 200,
        "wires": [
            [
                "e046247c.c466e8",
                "4b2b9a70.6a9af4"
            ],
            [],
            []
        ]
    },
    {
        "id": "c2b8d8b.0d90328",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "free | grep Mem | awk '{print 100*($2-$7)/$2}' | awk '{print int($1+0.5)}' | tr -d \"\\n\"",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Free Memory",
        "x": 330,
        "y": 280,
        "wires": [
            [
                "e84f6e08.5d147",
                "c7c8d192.3df27"
            ],
            [],
            []
        ]
    },
    {
        "id": "e046247c.c466e8",
        "type": "ui_gauge",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "d89ce6f9f1138668",
        "order": 2,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "Processor",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 580,
        "y": 180,
        "wires": []
    },
    {
        "id": "e84f6e08.5d147",
        "type": "ui_gauge",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "d89ce6f9f1138668",
        "order": 5,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "Memory",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 580,
        "y": 260,
        "wires": []
    },
    {
        "id": "3910d662.fa1f7a",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "df -h | grep /dev/root | awk -F ' ' '{print $5}' | tr -d % | tr \"\\n$\" \"\\ \" |  sed 's/,/./' | tr -d \" \"",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "winHide": false,
        "name": "Disk Usage",
        "x": 330,
        "y": 360,
        "wires": [
            [
                "45e1912a.36a23",
                "84ac8611.1a6ac8",
                "eaf74a43.fa27d"
            ],
            [],
            []
        ]
    },
    {
        "id": "45e1912a.36a23",
        "type": "ui_gauge",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "d89ce6f9f1138668",
        "order": 6,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "Disk",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 570,
        "y": 340,
        "wires": []
    },
    {
        "id": "4b2b9a70.6a9af4",
        "type": "ui_chart",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "d89ce6f9f1138668",
        "order": 4,
        "width": 6,
        "height": 3,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "20",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 570,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "c7c8d192.3df27",
        "type": "ui_chart",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "d89ce6f9f1138668",
        "order": 7,
        "width": 6,
        "height": 3,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "20",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 570,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "84ac8611.1a6ac8",
        "type": "ui_chart",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "d89ce6f9f1138668",
        "order": 8,
        "width": 6,
        "height": 3,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "4",
        "removeOlderPoints": "200",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 570,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "1cd5b4c0.46af9b",
        "type": "inject",
        "z": "1371dec5.76e671",
        "name": "update: 15s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "3910d662.fa1f7a",
                "c2b8d8b.0d90328",
                "55749fd8.3aca5",
                "ddcbbfa5.cd158"
            ]
        ]
    },
    {
        "id": "8485d05.444903",
        "type": "ui_switch",
        "z": "1371dec5.76e671",
        "name": "fan_state",
        "label": "Fan",
        "tooltip": "",
        "group": "3ca00bf9.e5cac4",
        "order": 2,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "topicType": "str",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "x": 880,
        "y": 40,
        "wires": [
            [
                "7fb13a4a53b612a0"
            ]
        ]
    },
    {
        "id": "2549f778.4eb828",
        "type": "python3-function",
        "z": "1371dec5.76e671",
        "name": "fan control",
        "func": "import smbus2 as smbus\n\nstate = msg[\"payload\"]\nbus = smbus.SMBus(1)\n\nDEVICE_ADDRESS = 0x0d\n# command happens twice, for reasons\nif state == \"off\":\n    with smbus.SMBus(1) as bus:\n        bus.write_byte_data(DEVICE_ADDRESS, 0x08, 0x00)\n        bus.write_byte_data(DEVICE_ADDRESS, 0x08, 0x00)\n    return msg\nif state == \"on\":\n    with smbus.SMBus(1) as bus:\n        bus.write_byte_data(DEVICE_ADDRESS, 0x08, 0x01)\n        bus.write_byte_data(DEVICE_ADDRESS, 0x08, 0x01)\n    return msg\n",
        "outputs": 1,
        "x": 1150,
        "y": 40,
        "wires": [
            [
                "e640ebb5c397f424"
            ]
        ]
    },
    {
        "id": "b7ab1ada.1f4158",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "i2cdetect -y 1",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "1",
        "winHide": false,
        "oldrc": false,
        "name": "i2c update",
        "x": 1440,
        "y": 40,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "bc503fa5.f46dd",
        "type": "switch",
        "z": "1371dec5.76e671",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "40",
                "vt": "num"
            },
            {
                "t": "lte",
                "v": "35",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 40,
        "wires": [
            [
                "a25d6486.e1ce28"
            ],
            [
                "5d4f3e71.1bad4"
            ]
        ]
    },
    {
        "id": "5d4f3e71.1bad4",
        "type": "change",
        "z": "1371dec5.76e671",
        "name": "Set OFF",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "off",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 60,
        "wires": [
            [
                "8485d05.444903"
            ]
        ]
    },
    {
        "id": "a25d6486.e1ce28",
        "type": "change",
        "z": "1371dec5.76e671",
        "name": "Set ON",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "on",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 20,
        "wires": [
            [
                "8485d05.444903"
            ]
        ]
    },
    {
        "id": "569154a.b53182c",
        "type": "inject",
        "z": "1371dec5.76e671",
        "name": "once",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "start",
        "payloadType": "str",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "452af41c.43940c"
            ]
        ]
    },
    {
        "id": "452af41c.43940c",
        "type": "python3-function",
        "z": "1371dec5.76e671",
        "name": "Get MachineName",
        "func": "import sys\nsys.path.append('/home/pi/PlanktoScope/scripts')\nimport planktoscope.uuidName\n\nmsg['payload'] = planktoscope.uuidName.machineName(machine=planktoscope.uuidName.getSerial())\nmsg['topic'] = \"acq_instrument_id\";\nreturn msg",
        "outputs": 1,
        "x": 350,
        "y": 620,
        "wires": [
            [
                "4828d2f4.7c712c",
                "a400a97e.e333a8"
            ]
        ]
    },
    {
        "id": "4828d2f4.7c712c",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "set global",
        "func": "global.set(msg.topic,msg.payload);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "3e64877a.9684b",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "store version",
        "func": "msg.payload = \"PlanktoScope v2.3-IESE_2022-\"+msg.payload.trim()\n\nglobal.set(\"acq_software\",msg.payload);\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 520,
        "wires": [
            [
                "8343fa69.49339"
            ]
        ]
    },
    {
        "id": "bdc6718a.dd5d48",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "ce9e278.781eed8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Instrument Type",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 840,
        "y": 560,
        "wires": []
    },
    {
        "id": "a400a97e.e333a8",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "ce9e278.781eed8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Instrument Name",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 610,
        "y": 600,
        "wires": []
    },
    {
        "id": "8343fa69.49339",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "ce9e278.781eed8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Software version",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 840,
        "y": 520,
        "wires": []
    },
    {
        "id": "f783aefd.c3bfd8",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "ce9e278.781eed8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Camera Name",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 1020,
        "y": 620,
        "wires": []
    },
    {
        "id": "30067f35.532f2",
        "type": "link in",
        "z": "1371dec5.76e671",
        "name": "Camera Name",
        "links": [
            "559a8085.1d6b9"
        ],
        "x": 875,
        "y": 620,
        "wires": [
            [
                "f783aefd.c3bfd8"
            ]
        ]
    },
    {
        "id": "11b51f8f.acd308",
        "type": "python3-function",
        "z": "1371dec5.76e671",
        "d": true,
        "name": "fan temperature",
        "func": "import smbus\nbus = smbus.SMBus(1)\n\naddr = 0x0d\nfan_reg = 0x08\n\ntemp = float( msg[\"payload\"])\n\n# 0x01 full speed, 0x02: 20% speed, ..., 0x09: 90% speed\n\nif temp < 38:\n    bus.write_byte_data(addr, fan_reg, 0x00)\nelif temp < 43:\n    bus.write_byte_data(addr, fan_reg, 0x02)\nelif temp < 46:\n    bus.write_byte_data(addr, fan_reg, 0x04)\nelif temp < 48:\n    bus.write_byte_data(addr, fan_reg, 0x06)\nelif temp < 52:\n    bus.write_byte_data(addr, fan_reg, 0x08)\nelse:\n    bus.write_byte_data(addr, fan_reg, 0x01)\n\nreturn msg",
        "outputs": 1,
        "x": 1440,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "eaf74a43.fa27d",
        "type": "switch",
        "z": "1371dec5.76e671",
        "name": "if disk > 90%",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "90",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 420,
        "wires": [
            [
                "6d09f428.930bcc"
            ]
        ]
    },
    {
        "id": "46d5e78b.15f998",
        "type": "ui_toast",
        "z": "1371dec5.76e671",
        "position": "dialog",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1090,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "24df077a.cb252",
        "type": "change",
        "z": "1371dec5.76e671",
        "name": "full disk msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"Your drive has reached 90% capacity, you should do a backup to an external drive and a purge.\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 420,
        "wires": [
            [
                "46d5e78b.15f998"
            ]
        ]
    },
    {
        "id": "f344dc9e.3c9278",
        "type": "ui_button",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "3ca00bf9.e5cac4",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Home",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "home",
        "payload": "{\"tab\":\"Home\"}",
        "payloadType": "json",
        "topic": "",
        "x": 430,
        "y": 740,
        "wires": [
            [
                "5f94b366.e4d3a4"
            ]
        ]
    },
    {
        "id": "5f94b366.e4d3a4",
        "type": "ui_ui_control",
        "z": "1371dec5.76e671",
        "name": "",
        "events": "change",
        "x": 580,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "f30bf784.90d58",
        "type": "ui_dropdown",
        "z": "1371dec5.76e671",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Choose USB device",
        "group": "52d1b77.28369c8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "No Drive Detected",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "device_path",
        "topicType": "str",
        "className": "",
        "x": 840,
        "y": 820,
        "wires": [
            [
                "d1b9fed3.f3ead8"
            ]
        ]
    },
    {
        "id": "fe29acc2.c25d18",
        "type": "ui_button",
        "z": "1371dec5.76e671",
        "name": "Detect drive",
        "group": "52d1b77.28369c8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Detect drive",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-usb fa-2x",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 150,
        "y": 820,
        "wires": [
            [
                "4c00cd96.6b2f6c"
            ]
        ]
    },
    {
        "id": "4c00cd96.6b2f6c",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "lsblk --bytes --json --paths --output-all",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "detect drive",
        "x": 330,
        "y": 820,
        "wires": [
            [
                "2dc1e43d.cd3d64"
            ],
            [],
            []
        ]
    },
    {
        "id": "2dc1e43d.cd3d64",
        "type": "json",
        "z": "1371dec5.76e671",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 820,
        "wires": [
            [
                "6b730649.09351"
            ]
        ]
    },
    {
        "id": "6b730649.09351",
        "type": "change",
        "z": "1371dec5.76e671",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "[payload.blockdevices.children[mountpoint=null].name]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 820,
        "wires": [
            [
                "f30bf784.90d58"
            ]
        ]
    },
    {
        "id": "1ece8d8e.1008e2",
        "type": "ui_button",
        "z": "1371dec5.76e671",
        "name": "Backup to USB",
        "group": "52d1b77.28369c8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Backup to USB",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "archive",
        "payload": "",
        "payloadType": "str",
        "topic": "USB Backup",
        "topicType": "str",
        "x": 160,
        "y": 900,
        "wires": [
            [
                "6b2fed77.883c0c"
            ]
        ]
    },
    {
        "id": "d1b9fed3.f3ead8",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "set local",
        "func": "flow.set(msg.topic,msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "6b2fed77.883c0c",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "get device_path",
        "func": "msg.payload = flow.get(\"device_path\");\nmsg.payload = msg.payload + \" data/\";\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 900,
        "wires": [
            [
                "df4d4d6a.24787"
            ]
        ]
    },
    {
        "id": "c74fe76.bcba718",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "sudo /home/pi/PlanktoScope/scripts/bash/usb_backup.sh",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "usb_backup.sh",
        "x": 720,
        "y": 920,
        "wires": [
            [
                "72f5e8d4.40fcb8"
            ],
            [],
            [
                "a2c36500.6d376"
            ]
        ]
    },
    {
        "id": "df4d4d6a.24787",
        "type": "switch",
        "z": "1371dec5.76e671",
        "name": "No Drive",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "No Drive Detected",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 520,
        "y": 900,
        "wires": [
            [
                "9a577caa.1535a"
            ],
            [
                "c74fe76.bcba718",
                "4997446.5176d3c"
            ]
        ]
    },
    {
        "id": "9a577caa.1535a",
        "type": "ui_toast",
        "z": "1371dec5.76e671",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 710,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "72f5e8d4.40fcb8",
        "type": "ui_toast",
        "z": "1371dec5.76e671",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 930,
        "y": 900,
        "wires": []
    },
    {
        "id": "81a48376.27a66",
        "type": "ui_toast",
        "z": "1371dec5.76e671",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1110,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "a2c36500.6d376",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "return code",
        "func": "switch (msg.payload.code){\ncase 0:\n    msg.payload = \"All files successfully copied, you can remove your usb drive!\";\n    break;\ncase 1:\n    msg.payload = \"There was an error!\";\n    break;\ncase 2:\n    msg.payload = \"Error: your device is already mounted\"\n    break;\ncase 3:\n    msg.payload = \"Error while mounting the device\"\n    break;\ncase 4:\n    msg.payload = \"Error: some files were corrupted during the copy!\"\n    break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 940,
        "wires": [
            [
                "81a48376.27a66"
            ]
        ]
    },
    {
        "id": "dde0025c.3df9f",
        "type": "ui_button",
        "z": "1371dec5.76e671",
        "name": "Purge local",
        "group": "52d1b77.28369c8",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Purge local data",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "icon": "delete_forever",
        "payload": "THIS IS GOING TO WIPE ALL THE LOCAL DATA. MAKE SURE YOU DID A BACKUP TO AN USB DRIVE BEFOREHAND.",
        "payloadType": "str",
        "topic": "BE EXTRA CAREFUL",
        "x": 150,
        "y": 1040,
        "wires": [
            [
                "ba72704a.8a38a"
            ]
        ]
    },
    {
        "id": "ba72704a.8a38a",
        "type": "ui_toast",
        "z": "1371dec5.76e671",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "GO BACK",
        "cancel": "YES I'M SURE, I WANT TO PURGE THE DATA",
        "raw": false,
        "className": "",
        "topic": "Data purge",
        "name": "",
        "x": 330,
        "y": 1040,
        "wires": [
            [
                "d80e6307.3aaf8"
            ]
        ]
    },
    {
        "id": "d80e6307.3aaf8",
        "type": "switch",
        "z": "1371dec5.76e671",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "YES I'M SURE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 1040,
        "wires": [
            [
                "4a8cb5d4.52e4bc"
            ]
        ]
    },
    {
        "id": "4a8cb5d4.52e4bc",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "rm -rf /home/pi/data/img /home/pi/data/objects /home/pi/data/export",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "rm data",
        "x": 700,
        "y": 1040,
        "wires": [
            [
                "c5b1e763.d1bba8"
            ],
            [],
            []
        ]
    },
    {
        "id": "c5b1e763.d1bba8",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "error message",
        "func": "// TODO revoir cette partie\n\nswitch (msg.rc.code){\ncase 0:\n    msg.payload = \"/home/pi/data was purged successfully!\";\n    break;\ndefault:\n    msg.payload = \"There was an error! The error is \" + msg.rc.message;\n    break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 900,
        "y": 1040,
        "wires": [
            [
                "81a48376.27a66"
            ]
        ]
    },
    {
        "id": "6d09f428.930bcc",
        "type": "delay",
        "z": "1371dec5.76e671",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 760,
        "y": 420,
        "wires": [
            [
                "24df077a.cb252"
            ]
        ]
    },
    {
        "id": "4997446.5176d3c",
        "type": "change",
        "z": "1371dec5.76e671",
        "name": "Backup starting message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"The backup is starting now, please wait for the complete message before removing the drive\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 980,
        "wires": [
            [
                "81a48376.27a66"
            ]
        ]
    },
    {
        "id": "6c7f0cc5.ea30d4",
        "type": "gpsd",
        "z": "1371dec5.76e671",
        "name": "",
        "hostname": "localhost",
        "port": "2947",
        "tpv": true,
        "sky": false,
        "info": false,
        "device": false,
        "gst": false,
        "att": false,
        "x": 170,
        "y": 1360,
        "wires": [
            [
                "906072b1.42c7c8",
                "cd3b05d6.5a3e2",
                "9b29e0e2.475e08",
                "96fefa8b.b7d538",
                "49a98fe9.9450d8",
                "f2a62d0.f5e135"
            ]
        ]
    },
    {
        "id": "96bc0179.5c37",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "cfe2288f.a8862",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "GPS Status Display",
        "label": "GPS Status:",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "x": 660,
        "y": 1200,
        "wires": []
    },
    {
        "id": "8c731f52.2b5f3",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "cfe2288f.a8862",
        "order": 7,
        "width": 4,
        "height": 1,
        "name": "Latitude",
        "label": "Latitude",
        "format": "{{msg.payload.lat.deg}}&deg{{msg.payload.lat.min}}'{{msg.payload.lat.sec}}{{msg.payload.lat.dir}}",
        "layout": "col-center",
        "x": 620,
        "y": 1240,
        "wires": []
    },
    {
        "id": "34e4b5ea.27b4a2",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "cfe2288f.a8862",
        "order": 9,
        "width": 4,
        "height": 1,
        "name": "Longitude",
        "label": "Longitude",
        "format": "{{msg.payload.lon.deg}}&deg{{msg.payload.lon.min}}'{{msg.payload.lon.sec}}{{msg.payload.lon.dir}}",
        "layout": "col-center",
        "x": 620,
        "y": 1280,
        "wires": []
    },
    {
        "id": "906072b1.42c7c8",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "Convert DD to DMS",
        "func": "function ConvertDDToDMS(D, lng){\n    // from https://stackoverflow.com/a/5786281/2108279\n    return {\n        dir : D<0?lng?'W':'S':lng?'E':'N',\n        deg : 0|(D<0?D=-D:D),\n        min : 0|D%1*60,\n        sec :(0|D*60%1*6000)/100\n    };\n}\n\nmsg.payload = {\n    \"lat\":ConvertDDToDMS(msg.payload.lat, false),\n    \"lon\":ConvertDDToDMS(msg.payload.lon, true)\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 1260,
        "wires": [
            [
                "8c731f52.2b5f3",
                "34e4b5ea.27b4a2"
            ]
        ]
    },
    {
        "id": "4584c817.0be238",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "cfe2288f.a8862",
        "order": 4,
        "width": 4,
        "height": 1,
        "name": "Speed",
        "label": "Speed",
        "format": "{{msg.payload}} kts",
        "layout": "col-center",
        "x": 610,
        "y": 1320,
        "wires": []
    },
    {
        "id": "cd3b05d6.5a3e2",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "cfe2288f.a8862",
        "order": 6,
        "width": 4,
        "height": 1,
        "name": "Direction",
        "label": "Direction",
        "format": "{{msg.payload.track}} °",
        "layout": "col-center",
        "x": 620,
        "y": 1360,
        "wires": []
    },
    {
        "id": "9b29e0e2.475e08",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "GPS Mode",
        "func": "switch (msg.payload.mode){\n case 1:msg.payload = \"No Fix\"; break\n case 2:msg.payload = \"2D Fix\"; break\n case 3:msg.payload = \"3D Fix\"; break\n default: msg.payload = \"No info\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 1200,
        "wires": [
            [
                "96bc0179.5c37"
            ]
        ]
    },
    {
        "id": "96fefa8b.b7d538",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "Speed conversion",
        "func": "msg.payload = (0|msg.payload.speed) * 1.9438\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 1320,
        "wires": [
            [
                "4584c817.0be238"
            ]
        ]
    },
    {
        "id": "49a98fe9.9450d8",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "cfe2288f.a8862",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "GPS UTC datetime",
        "label": "GPS UTC datetime",
        "format": "{{msg.payload.time}}",
        "layout": "col-center",
        "className": "",
        "x": 650,
        "y": 1400,
        "wires": []
    },
    {
        "id": "3c3f334e.d691ac",
        "type": "ui_button",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "cfe2288f.a8862",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Force local clock update",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 670,
        "y": 1480,
        "wires": [
            [
                "c60030d4.317418"
            ]
        ]
    },
    {
        "id": "c60030d4.317418",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "sudo hwclock -w",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 920,
        "y": 1480,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "6d144078.508d9",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "cfe2288f.a8862",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Local UTC datetime",
        "label": "Local UTC datetime",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 660,
        "y": 1440,
        "wires": []
    },
    {
        "id": "f2a62d0.f5e135",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "",
        "func": "msg.payload = new Date()\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1440,
        "wires": [
            [
                "6d144078.508d9"
            ]
        ]
    },
    {
        "id": "9373b3f6.33a2b",
        "type": "link in",
        "z": "1371dec5.76e671",
        "name": "Git Rev",
        "links": [
            "6c20d6a7.869b6"
        ],
        "x": 375,
        "y": 520,
        "wires": [
            [
                "3e64877a.9684b"
            ]
        ]
    },
    {
        "id": "e640ebb5c397f424",
        "type": "delay",
        "z": "1371dec5.76e671",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1300,
        "y": 40,
        "wires": [
            [
                "b7ab1ada.1f4158"
            ]
        ]
    },
    {
        "id": "7fb13a4a53b612a0",
        "type": "rbe",
        "z": "1371dec5.76e671",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1010,
        "y": 40,
        "wires": [
            [
                "2549f778.4eb828"
            ]
        ]
    },
    {
        "id": "6cdcee66c59df982",
        "type": "link in",
        "z": "1371dec5.76e671",
        "name": "Name Machine",
        "links": [
            "7d2fdac8f6d69a07"
        ],
        "x": 575,
        "y": 560,
        "wires": [
            [
                "bdc6718a.dd5d48"
            ]
        ]
    },
    {
        "id": "b9bf06d6.26c518",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "sudo iwlist wlan0 scan | grep ESSID | sed 's/ESSID://g;s/\"//g;s/^ *//;s/ *$//'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "scan",
        "x": 450,
        "y": 80,
        "wires": [
            [
                "9642cb31.663b4"
            ],
            [],
            []
        ]
    },
    {
        "id": "9642cb31.663b4",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "parseOptions",
        "func": "var ssids = msg.payload.split('\\n').filter(s => !!s)\n\nssids = [...new Set(ssids)];\n\nmsg.options = ssids\nmsg.payload = null\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 610,
        "y": 80,
        "wires": [
            [
                "dbc0d44.5361b28"
            ]
        ]
    },
    {
        "id": "dbc0d44.5361b28",
        "type": "ui_dropdown",
        "z": "f21ba04.c26266",
        "name": "",
        "label": "Wifi",
        "tooltip": "",
        "place": "Select a WIFI",
        "group": "9e409235.73cd7",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 770,
        "y": 80,
        "wires": [
            [
                "cdfa9013.b91278"
            ]
        ]
    },
    {
        "id": "2bf338e3.966468",
        "type": "ui_button",
        "z": "f21ba04.c26266",
        "name": "",
        "group": "9e409235.73cd7",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Scan",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-wifi fa-2x",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "topicType": "str",
        "x": 270,
        "y": 40,
        "wires": [
            [
                "b9bf06d6.26c518"
            ]
        ]
    },
    {
        "id": "4c0400c.69a1e8",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "ip -j addr show",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "getInfo",
        "x": 450,
        "y": 180,
        "wires": [
            [
                "88e05f37a8745216"
            ],
            [],
            []
        ]
    },
    {
        "id": "bcb20e39.00cea8",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "parse IP Info",
        "func": "var ip = \"\";\nvar broadcast = \"\";\nvar iface = \"\";\nvar iface_up = false;\n\nif (msg.rc.code === 0){\n    payload = msg.payload\n    for (let info in payload) {\n      if (payload[info].operstate === \"UP\") {\n      \tif (iface_up){\n        \t// We have two concurrent interfaces up\n          // We need to deactivate one\n          ip = \"Remove Ethernet cable or disconnect wifi\"\n          broadcast = \"Remove Ethernet cable or disconnect wifi\"\n          iface = \"Remove Ethernet cable or disconnect wifi\"\n          break\n        }\n        if (payload[info].ifname === \"eth0\") {\n          iface = \"Ethernet\"\n        } else if (payload[info].ifname === \"wifi0\" || payload[info].ifname === \"wlan0\") {\n          iface = \"Wifi\"\n        }\n        ip = payload[info].addr_info[0].local;\n        broadcast = payload[info].addr_info[0].broadcast;\n        iface_up = true;\n      }\n    }\n}\n\nif (iface_up) {\n  return([{\n    topic: 'interface',\n    payload: iface\n  }, {\n    topic: 'ip',\n    payload: ip\n  }, {\n    topic: 'broadcast',\n    payload: broadcast\n  }])\n}\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 180,
        "wires": [
            [
                "67d052ba.99ff24"
            ],
            [
                "d71c8185.800fd",
                "49111a72f4e32740"
            ],
            [
                "dc305a26.b33fc"
            ]
        ],
        "outputLabels": [
            "interface",
            "ip",
            "broadcast"
        ]
    },
    {
        "id": "d71c8185.800fd",
        "type": "ui_text",
        "z": "f21ba04.c26266",
        "group": "919923a3.d10868",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "IP",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "className": "",
        "x": 930,
        "y": 180,
        "wires": []
    },
    {
        "id": "67d052ba.99ff24",
        "type": "ui_text",
        "z": "f21ba04.c26266",
        "group": "919923a3.d10868",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Interface",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "x": 940,
        "y": 140,
        "wires": []
    },
    {
        "id": "dc305a26.b33fc",
        "type": "ui_text",
        "z": "f21ba04.c26266",
        "group": "919923a3.d10868",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Broadcast",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "x": 940,
        "y": 220,
        "wires": []
    },
    {
        "id": "94b2e8fc.aa20e",
        "type": "ui_form",
        "z": "f21ba04.c26266",
        "name": "",
        "label": "Update",
        "group": "9e409235.73cd7",
        "order": 6,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "SSID",
                "value": "ssid",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "ssid": "",
            "password": ""
        },
        "payload": "",
        "submit": "Add the network",
        "cancel": "Reset fields",
        "topic": "",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 1100,
        "y": 80,
        "wires": [
            [
                "d59021e3.1b63e8"
            ]
        ]
    },
    {
        "id": "cdfa9013.b91278",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "insert ssid",
        "func": "\nmsg.payload = {ssid: msg.payload}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 930,
        "y": 80,
        "wires": [
            [
                "94b2e8fc.aa20e"
            ]
        ]
    },
    {
        "id": "448b4c37.be50bc",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "iw dev wlan0 info",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "getCurrentSSID",
        "x": 480,
        "y": 260,
        "wires": [
            [
                "151819d4.0dbe56"
            ],
            [],
            []
        ]
    },
    {
        "id": "c8a5ae48.ef1308",
        "type": "ui_text",
        "z": "f21ba04.c26266",
        "group": "919923a3.d10868",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SSID",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "x": 930,
        "y": 259,
        "wires": []
    },
    {
        "id": "151819d4.0dbe56",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "parse SSID",
        "func": "var ssid = \"\"\n\nif (msg.rc.code === 0){\n    ssid = msg.payload.match(/\\sssid (.+)/)[1];\n    return({topic: 'ssid', payload: ssid})\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 260,
        "wires": [
            [
                "c8a5ae48.ef1308"
            ]
        ]
    },
    {
        "id": "ff059f3f.9c0f28",
        "type": "ui_ui_control",
        "z": "f21ba04.c26266",
        "name": "onTab",
        "events": "all",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "f103cd20eb4362a4"
            ]
        ]
    },
    {
        "id": "167d7bd0.679ce4",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "update contry code",
        "func": "var template = `sudo sed -i \\\"s/^country.*/country=\"${msg.payload}\"/\\\" /home/pi/wpa_supplicant.conf`\n// sudo tee /etc/wpa_supplicant/wpa_supplicant.conf <<EOF\n//ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\n//update_config=1\n//country=IT\nmsg.payload = template\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 630,
        "y": 400,
        "wires": [
            [
                "9d30f7b5.aac88"
            ]
        ]
    },
    {
        "id": "9d30f7b5.aac88",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "updateConf",
        "x": 890,
        "y": 400,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "deb8c14e.ff1fd",
        "type": "ui_button",
        "z": "f21ba04.c26266",
        "d": true,
        "name": "",
        "group": "9e409235.73cd7",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Change Country Code",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "country_code",
        "payloadType": "flow",
        "topic": "",
        "topicType": "str",
        "x": 400,
        "y": 400,
        "wires": [
            [
                "167d7bd0.679ce4"
            ]
        ]
    },
    {
        "id": "6d4ce391.04abf4",
        "type": "ui_text_input",
        "z": "f21ba04.c26266",
        "d": true,
        "name": "country_code",
        "label": "Country Code",
        "tooltip": "ISO/IEC alpha2 country code",
        "group": "9e409235.73cd7",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "500",
        "topic": "country_code",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 420,
        "y": 360,
        "wires": [
            [
                "3f60469d.620aea"
            ]
        ]
    },
    {
        "id": "3f60469d.620aea",
        "type": "change",
        "z": "f21ba04.c26266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "country_code",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "d59021e3.1b63e8",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "add network",
        "func": "var data = msg.payload\n\nvar command = `wpa_passphrase \"${data.ssid}\" \"${data.password}\" | sed '/#psk=\".*\"/d' | sudo tee -a /etc/wpa_supplicant/wpa_supplicant.conf > /dev/null`\n \nmsg.payload = command\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1270,
        "y": 80,
        "wires": [
            [
                "64a1f2f2.3de8b4"
            ]
        ]
    },
    {
        "id": "64a1f2f2.3de8b4",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Save Network",
        "x": 1460,
        "y": 80,
        "wires": [
            [
                "6868b4c4.65987c"
            ],
            [],
            []
        ]
    },
    {
        "id": "6868b4c4.65987c",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "sudo /usr/bin/autohotspotN >/dev/null",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "reconfigure",
        "x": 1250,
        "y": 180,
        "wires": [
            [
                "59e24c40.e1a4dc"
            ],
            [],
            []
        ]
    },
    {
        "id": "59e24c40.e1a4dc",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "showMessage",
        "func": "msg.payload = \"Wifi configuration updated successfully\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1420,
        "y": 180,
        "wires": [
            [
                "4ecb6be2.ad39f4"
            ]
        ]
    },
    {
        "id": "4ecb6be2.ad39f4",
        "type": "ui_toast",
        "z": "f21ba04.c26266",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1590,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "991d1df9.3ffb3",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "reset wpa_supplicant.conf",
        "func": "country_code = flow.get(\"country_code\")\n\nvar template = `sudo tee /etc/wpa_supplicant/wpa_supplicant.conf <<EOF\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=${country_code}\n\nEOF`\n\nmsg.payload = template\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 460,
        "wires": [
            [
                "2124997d.2cbf0e"
            ]
        ]
    },
    {
        "id": "2124997d.2cbf0e",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "resetConf",
        "x": 880,
        "y": 460,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "8b3a1ecb.c4d2e8",
        "type": "ui_button",
        "z": "f21ba04.c26266",
        "name": "",
        "group": "9e409235.73cd7",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset wifi networks",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "",
        "payload": "country_code",
        "payloadType": "flow",
        "topic": "",
        "topicType": "str",
        "x": 410,
        "y": 460,
        "wires": [
            [
                "991d1df9.3ffb3"
            ]
        ]
    },
    {
        "id": "49111a72f4e32740",
        "type": "link out",
        "z": "f21ba04.c26266",
        "name": "IP",
        "mode": "link",
        "links": [
            "142bc61a0bde1ba9",
            "3bb4970164f5e7b2",
            "604659d148759b84",
            "c515edcd8681c244"
        ],
        "x": 1035,
        "y": 160,
        "wires": []
    },
    {
        "id": "3db572cd.cf972e",
        "type": "inject",
        "z": "f21ba04.c26266",
        "name": "once",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 270,
        "y": 180,
        "wires": [
            [
                "b9bf06d6.26c518",
                "4c0400c.69a1e8",
                "448b4c37.be50bc"
            ]
        ]
    },
    {
        "id": "88e05f37a8745216",
        "type": "json",
        "z": "f21ba04.c26266",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 590,
        "y": 180,
        "wires": [
            [
                "bcb20e39.00cea8"
            ]
        ]
    },
    {
        "id": "f103cd20eb4362a4",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "check tab",
        "func": "if (msg.name === \"Wifi\"){\n    return [msg, msg]\n}\n\nif ([\"Optic Configuration\", \"Fluidic Acquisition\", \"Segmentation\", \"Gallery\"].includes(msg.name)){\n    return [null, msg]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 80,
        "wires": [
            [
                "b9bf06d6.26c518",
                "4c0400c.69a1e8",
                "448b4c37.be50bc"
            ],
            [
                "4c0400c.69a1e8",
                "448b4c37.be50bc"
            ]
        ],
        "outputLabels": [
            "interface",
            "ip"
        ]
    },
    {
        "id": "4f02c726.de69b8",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "name": "",
        "group": "1be83144.4fe4bf",
        "order": 12,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Reboot",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "fa-repeat fa-2x",
        "payload": "reboot",
        "payloadType": "str",
        "topic": "reboot",
        "topicType": "str",
        "x": 420,
        "y": 680,
        "wires": [
            [
                "4af9112d.87767",
                "c8c06e4e131b1820"
            ]
        ]
    },
    {
        "id": "611a8b1c.a829b4",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "command": "sudo",
        "addpay": "payload",
        "append": "now",
        "useSpawn": "false",
        "timer": "2",
        "winHide": false,
        "oldrc": false,
        "name": "sudo cmd now",
        "x": 740,
        "y": 720,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "bc76c4d6.a7ad28",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "name": "",
        "group": "1be83144.4fe4bf",
        "order": 14,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Shutdown",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "icon": "fa-power-off fa-2x",
        "payload": "shutdown",
        "payloadType": "str",
        "topic": "shutdown",
        "x": 420,
        "y": 760,
        "wires": [
            [
                "4af9112d.87767",
                "c8c06e4e131b1820"
            ]
        ]
    },
    {
        "id": "4af9112d.87767",
        "type": "python3-function",
        "z": "9daf9e2b.019fc",
        "name": "action",
        "func": "#!/usr/bin/python3\nimport smbus2 as smbus\n\nbus = smbus.SMBus(1)\n#turn off LED\nbus.write_byte_data(0x0d, 0x07, 0x00)\n#turn off Fan\nbus.write_byte_data(0x0d, 0x08, 0x00)\n\n#msg[\"payload\"] = str(msg[\"topic\"])+' now'\nreturn msg",
        "outputs": 1,
        "x": 590,
        "y": 720,
        "wires": [
            [
                "611a8b1c.a829b4"
            ]
        ]
    },
    {
        "id": "fa914867.0a0658",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "command": "python3 -u /home/pi/PlanktoScope/scripts/main.py",
        "addpay": false,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1090,
        "y": 600,
        "wires": [
            [],
            [
                "8b511c2b.9c24c8"
            ],
            []
        ]
    },
    {
        "id": "1575db82.742854",
        "type": "delay",
        "z": "9daf9e2b.019fc",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 720,
        "y": 600,
        "wires": [
            [
                "fa914867.0a0658"
            ]
        ]
    },
    {
        "id": "466eb611.4da048",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "name": "Restart Python",
        "group": "1be83144.4fe4bf",
        "order": 10,
        "width": 4,
        "height": 1,
        "passthru": true,
        "label": "Restart Python",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "icon": "fa-refresh fa-2x",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 400,
        "y": 600,
        "wires": [
            [
                "1575db82.742854",
                "bd5cceef.b17ad",
                "ed7503f3.d95a48"
            ]
        ]
    },
    {
        "id": "ed7503f3.d95a48",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "command": "sudo kill -15 `cat /tmp/pscope_pid`",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Python soft kill",
        "x": 740,
        "y": 660,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "bd5cceef.b17ad",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "command": "sudo killall -15 raspimjpeg",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Raspimjpeg soft kill",
        "x": 750,
        "y": 540,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d12008a0.47be4",
        "type": "ui_template",
        "z": "9daf9e2b.019fc",
        "group": "a7d64879.38298",
        "name": "Log table",
        "order": 1,
        "width": 14,
        "height": 10,
        "format": "<script type=\"text/javascript\">\n    function selectElementContents(el) {\n        var body = document.body, range, sel;\n        if (document.createRange && window.getSelection) {\n            range = document.createRange();\n            sel = window.getSelection();\n            sel.removeAllRanges();\n            try {\n                range.selectNodeContents(el);\n                sel.addRange(range);\n            } catch (e) {\n                range.selectNode(el);\n                sel.addRange(range);\n            }\n            document.execCommand(\"copy\");\n            sel.removeAllRanges();\n\n        } else if (body.createTextRange) {\n            range = body.createTextRange();\n            range.moveToElementText(el);\n            range.select();\n            range.execCommand(\"Copy\");\n        }\n    }\n</script>\n\n<md-button onclick=\"selectElementContents( document.getElementById('log_table') );\">\n    <i class=\"fa fa-copy fa-1x\"></i> Copy Log\n</md-button>\n\n<table id=\"log_table\" style=\"font-family: mono;font-size: 12px;\">\n    <tr ng-repeat=\"row in msg.payload\">\n        <td>{{row}}</td>\n    </tr>\n</table>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1600,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "8b511c2b.9c24c8",
        "type": "function",
        "z": "9daf9e2b.019fc",
        "name": "Log array",
        "func": "var log = flow.get(\"python_log\")||[];\n\nlog = log.concat(msg.payload.trim().split('\\n'));\n\nwhile (log.length > 500){\n    log.shift();\n}\n\nflow.set(\"python_log\", log);\n\nmsg.payload = log;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 560,
        "wires": [
            [
                "d12008a0.47be4",
                "c44f40d112dd2647"
            ]
        ]
    },
    {
        "id": "7a1dedf.1c63094",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "name": "",
        "group": "a7d64879.38298",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Clear Log",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-eraser",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 1220,
        "y": 720,
        "wires": [
            [
                "73500be7.9ab7c4"
            ]
        ]
    },
    {
        "id": "9187bf97.9922b8",
        "type": "catch",
        "z": "9daf9e2b.019fc",
        "name": "Catch Errors",
        "scope": null,
        "uncaught": false,
        "x": 1050,
        "y": 660,
        "wires": [
            [
                "f9a871d5.a73828"
            ]
        ]
    },
    {
        "id": "f9a871d5.a73828",
        "type": "function",
        "z": "9daf9e2b.019fc",
        "name": "Get error",
        "func": "msg.payload = \"Node Red Error: \" + msg.error + \" created by the message \" + msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1220,
        "y": 660,
        "wires": [
            [
                "8b511c2b.9c24c8"
            ]
        ]
    },
    {
        "id": "73500be7.9ab7c4",
        "type": "function",
        "z": "9daf9e2b.019fc",
        "name": "Clear log",
        "func": "flow.set(\"python_log\", [\"Log cleared!\"]);\n\nmsg.payload = [\"Log cleared!\"];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 720,
        "wires": [
            [
                "d12008a0.47be4",
                "c44f40d112dd2647"
            ]
        ]
    },
    {
        "id": "7372e83e.5fc0e8",
        "type": "inject",
        "z": "9daf9e2b.019fc",
        "name": "once",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "start",
        "payloadType": "str",
        "x": 150,
        "y": 600,
        "wires": [
            [
                "466eb611.4da048"
            ]
        ]
    },
    {
        "id": "43cf8ff7.75231",
        "type": "rpi-gpio out",
        "z": "9daf9e2b.019fc",
        "name": "Pump Enable",
        "pin": "4",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 420,
        "y": 80,
        "wires": []
    },
    {
        "id": "4bca8a25.15be3c",
        "type": "rpi-gpio out",
        "z": "9daf9e2b.019fc",
        "name": "Focus Enable",
        "pin": "12",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 420,
        "y": 120,
        "wires": []
    },
    {
        "id": "50f9b5b.a84bccc",
        "type": "inject",
        "z": "9daf9e2b.019fc",
        "name": "Default: ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.01",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "43cf8ff7.75231",
                "4bca8a25.15be3c",
                "6db0fcf5.f0effc",
                "5fc4ede4.72516c"
            ]
        ]
    },
    {
        "id": "8bd1f3dc.9affe8",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "d": true,
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "1",
        "winHide": false,
        "oldrc": false,
        "name": "git user.name",
        "x": 1160,
        "y": 60,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "b40d1f65.39e14",
        "type": "template",
        "z": "9daf9e2b.019fc",
        "d": true,
        "name": "git config",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "git config --global --replace-all user.name \"{{payload}}\"",
        "output": "str",
        "x": 960,
        "y": 60,
        "wires": [
            [
                "8bd1f3dc.9affe8"
            ]
        ]
    },
    {
        "id": "35eb925e.5f8016",
        "type": "link in",
        "z": "9daf9e2b.019fc",
        "name": "Git config",
        "links": [
            "52af9ac0.60eb24",
            "035b819e4418d6c1",
            "a86c6e1ba3645871"
        ],
        "x": 795,
        "y": 100,
        "wires": [
            [
                "b40d1f65.39e14",
                "6d7dd372.3b7814"
            ]
        ]
    },
    {
        "id": "4e5183bd.e77bac",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "d": true,
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "1",
        "winHide": false,
        "oldrc": false,
        "name": "git user.email",
        "x": 1150,
        "y": 140,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "6d7dd372.3b7814",
        "type": "template",
        "z": "9daf9e2b.019fc",
        "d": true,
        "name": "git config",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "git config --global --replace-all user.email \"{{payload}}\"",
        "output": "str",
        "x": 960,
        "y": 140,
        "wires": [
            [
                "4e5183bd.e77bac"
            ]
        ]
    },
    {
        "id": "e564e9ad.7c312",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "d": true,
        "name": "Update",
        "group": "1be83144.4fe4bf",
        "order": 15,
        "width": 14,
        "height": 1,
        "passthru": false,
        "label": "System Update",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "mi-system_update",
        "payload": " ",
        "payloadType": "str",
        "topic": "update",
        "topicType": "str",
        "x": 260,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "2d2ef1fd.40e6e6",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "command": "bash /home/pi/PlanktoScope/scripts/bash/start_update.sh",
        "addpay": true,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "oldrc": false,
        "name": "Update",
        "x": 420,
        "y": 460,
        "wires": [
            [
                "64f61762.68c788",
                "8b511c2b.9c24c8",
                "83c5a708.a5715",
                "d334d264.8a7728"
            ],
            [
                "8b511c2b.9c24c8"
            ],
            []
        ]
    },
    {
        "id": "8f08c4eb.db74b8",
        "type": "ui_template",
        "z": "9daf9e2b.019fc",
        "group": "1be83144.4fe4bf",
        "name": "Update message",
        "order": 2,
        "width": 14,
        "height": 3,
        "format": "<div><center>If you want to update to the latest code version of Node-Red and Python, please click here.\nWe are trying to save your configuration changes with git stash and restore them afterwards, but clearly, things may break!\nAlso, you can choose the branch you want to update to. BE CAREFUL, selecting a branch WILL update the code immediately.\nIf you have made changes to the flow, you will lose them. Please commit those changes from Node-Red interface, from the Project History tab.</center></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 150,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "64f61762.68c788",
        "type": "ui_toast",
        "z": "9daf9e2b.019fc",
        "position": "dialog",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Update notif",
        "x": 730,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "45a7b5aa.2ed20c",
        "type": "link in",
        "z": "9daf9e2b.019fc",
        "name": "Python restart",
        "links": [
            "e41870d7.300eb8"
        ],
        "x": 175,
        "y": 560,
        "wires": [
            [
                "466eb611.4da048"
            ]
        ]
    },
    {
        "id": "f4f6e3fa.0234f",
        "type": "inject",
        "z": "9daf9e2b.019fc",
        "name": "once",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "start",
        "payloadType": "str",
        "x": 1070,
        "y": 720,
        "wires": [
            [
                "7a1dedf.1c63094",
                "ad3276c0f8a06cb6"
            ]
        ]
    },
    {
        "id": "b81b990a.d4dca",
        "type": "link in",
        "z": "9daf9e2b.019fc",
        "name": "Shutdown",
        "links": [
            "e08cfcb8.2a67e8"
        ],
        "x": 455,
        "y": 720,
        "wires": [
            [
                "4af9112d.87767",
                "c8c06e4e131b1820"
            ]
        ]
    },
    {
        "id": "83c5a708.a5715",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "command": "git --git-dir=/home/pi/PlanktoScope/.git describe --long --tags",
        "addpay": false,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get git revision",
        "x": 660,
        "y": 340,
        "wires": [
            [
                "af2b8d95.195bb8",
                "6c20d6a7.869b6"
            ],
            [],
            []
        ]
    },
    {
        "id": "d334d264.8a7728",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "command": "git --git-dir=/home/pi/PlanktoScope/.git branch --remotes --list | awk '/HEAD/{next;} split($1, a, \"/\") {print a[2]}'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get git branch",
        "x": 660,
        "y": 260,
        "wires": [
            [
                "e5e8e66c.899588"
            ],
            [],
            []
        ]
    },
    {
        "id": "e4342b66.72972",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "name": "get git branch",
        "group": "1be83144.4fe4bf",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Update branch list",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "mi-compare_arrows",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 420,
        "y": 260,
        "wires": [
            [
                "d334d264.8a7728"
            ]
        ]
    },
    {
        "id": "3f13b9f8.bac94e",
        "type": "ui_dropdown",
        "z": "9daf9e2b.019fc",
        "name": "Git branch list",
        "label": "Switch branch to",
        "tooltip": "If you choose something, the code WILL be updated to that branch, don't touch if you don't know what you are doing!",
        "place": "branch",
        "group": "1be83144.4fe4bf",
        "order": 7,
        "width": 8,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "branch",
        "x": 1160,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e5e8e66c.899588",
        "type": "function",
        "z": "9daf9e2b.019fc",
        "name": "filter branch",
        "func": "msg.options = msg.payload.trimEnd().split('\\n')\nmsg.payload = msg.options.find((str) => str.startsWith('*'));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 260,
        "wires": [
            [
                "3f13b9f8.bac94e",
                "ccc7d79b.a419f"
            ]
        ]
    },
    {
        "id": "c1fb03f7.e675f8",
        "type": "inject",
        "z": "9daf9e2b.019fc",
        "name": "once",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "start",
        "payloadType": "str",
        "x": 430,
        "y": 300,
        "wires": [
            [
                "d334d264.8a7728",
                "83c5a708.a5715"
            ]
        ]
    },
    {
        "id": "af2b8d95.195bb8",
        "type": "ui_text",
        "z": "9daf9e2b.019fc",
        "group": "1be83144.4fe4bf",
        "order": 5,
        "width": 14,
        "height": 1,
        "name": "",
        "label": "Current code version",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 900,
        "y": 320,
        "wires": []
    },
    {
        "id": "6c20d6a7.869b6",
        "type": "link out",
        "z": "9daf9e2b.019fc",
        "name": "Git revision",
        "links": [
            "9373b3f6.33a2b"
        ],
        "x": 1035,
        "y": 360,
        "wires": []
    },
    {
        "id": "7de3a9b4.0ab108",
        "type": "ui_toast",
        "z": "9daf9e2b.019fc",
        "position": "top right",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Git branch update",
        "x": 1290,
        "y": 260,
        "wires": []
    },
    {
        "id": "ccc7d79b.a419f",
        "type": "change",
        "z": "9daf9e2b.019fc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "List update successfull",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Branch list update",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 260,
        "wires": [
            [
                "7de3a9b4.0ab108"
            ]
        ]
    },
    {
        "id": "5fc4ede4.72516c",
        "type": "rpi-gpio out",
        "z": "9daf9e2b.019fc",
        "name": "HAT Pump Enable",
        "pin": "23",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 430,
        "y": 40,
        "wires": []
    },
    {
        "id": "6db0fcf5.f0effc",
        "type": "rpi-gpio out",
        "z": "9daf9e2b.019fc",
        "name": "HAT Focus Enable",
        "pin": "5",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 430,
        "y": 160,
        "wires": []
    },
    {
        "id": "a7a41c6af9137b69",
        "type": "ui_template",
        "z": "9daf9e2b.019fc",
        "group": "1be83144.4fe4bf",
        "name": "Link to our github",
        "order": 3,
        "width": 14,
        "height": 1,
        "format": "<div><center>\n    <a style=\"color:DodgerBlue;\" href=\"https://github.com/lacoscope/PlanktonScope\"><span>GitHub : Projet Lacoscope</span></a>\n</center></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 150,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "86e60338d48158e6",
        "type": "function",
        "z": "9daf9e2b.019fc",
        "name": "Change mode",
        "func": "var activation_msg = {}\n\n//Mode expert\nif (msg.payload === 0){\n    activation_msg.payload = {\"group\":{\"show\":[\"Administration_Danger_Zone_Expert\",\"Administration_Python_Log_Expert\", \"Administration_Mode_Selection\"],\"hide\":[\"Administration_Python_Log_Beginner\",\"Administration_Danger_Zone_Beginner\"]}};    \n    return activation_msg;\n}\n\n//Mode débutant\nelse if (msg.payload === 1){\n    activation_msg.payload = {\"group\":{\"show\":[\"Administration_Python_Log_Beginner\", \"Administration_Mode_Selection\",\"Administration_Danger_Zone_Beginner\"],\"hide\":[\"Administration_Danger_Zone_Expert\",\"Administration_Python_Log_Expert\"]}};\n    return activation_msg;\n}\nelse{\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1040,
        "wires": [
            [
                "7cd751f71051c53b"
            ]
        ]
    },
    {
        "id": "7cd751f71051c53b",
        "type": "ui_ui_control",
        "z": "9daf9e2b.019fc",
        "name": "show/hide net groups",
        "events": "change",
        "x": 800,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "3a6737417c388a7e",
        "type": "ui_multistate_switch",
        "z": "9daf9e2b.019fc",
        "d": true,
        "name": "Mode selection",
        "group": "527c2bcfd97bfea3",
        "order": 1,
        "width": 6,
        "height": 1,
        "label": "",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Expert mode",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Beginner mode",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 420,
        "y": 1000,
        "wires": [
            [
                "32228eaaadeb2437",
                "86e60338d48158e6"
            ]
        ]
    },
    {
        "id": "102079036ea77d48",
        "type": "change",
        "z": "9daf9e2b.019fc",
        "name": "Change global mode",
        "rules": [
            {
                "t": "set",
                "p": "mode",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 960,
        "wires": [
            [
                "4cfbba68449a28e2"
            ]
        ]
    },
    {
        "id": "4cfbba68449a28e2",
        "type": "link out",
        "z": "9daf9e2b.019fc",
        "name": "out_administration_mode",
        "mode": "link",
        "links": [
            "127fd2e4447c6ad1",
            "4dd140903cddda10",
            "713395d7523b16e8",
            "7164566e38c0e242",
            "87171ccda60d4390",
            "c840a7c66cf51acc",
            "a45e550cb5e1c1d1"
        ],
        "x": 935,
        "y": 960,
        "wires": []
    },
    {
        "id": "97f9c6da2e1095d2",
        "type": "link in",
        "z": "9daf9e2b.019fc",
        "name": "in_administration_mode",
        "links": [
            "082af9181824a196",
            "319bff50477bc5fc",
            "7a7343ef8627ec57",
            "a85a1f2d75981a8c",
            "b6e04f52920c6dcb",
            "bfce8e77727b9fbf",
            "c2d9b90e27bc022c",
            "de32bd4b6ba8dfd3",
            "d3892bf83549fd59"
        ],
        "x": 275,
        "y": 1000,
        "wires": [
            [
                "3a6737417c388a7e",
                "86e60338d48158e6"
            ]
        ]
    },
    {
        "id": "32228eaaadeb2437",
        "type": "function",
        "z": "9daf9e2b.019fc",
        "name": "Get mode value",
        "func": "if (msg.payload != global.get(\"mode\")){\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 960,
        "wires": [
            [
                "102079036ea77d48"
            ]
        ]
    },
    {
        "id": "ad3276c0f8a06cb6",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "name": "",
        "group": "6c57a903b8155d3d",
        "order": 2,
        "width": 20,
        "height": 1,
        "passthru": true,
        "label": "Clear Log",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-eraser",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 1220,
        "y": 760,
        "wires": [
            [
                "73500be7.9ab7c4"
            ]
        ]
    },
    {
        "id": "c44f40d112dd2647",
        "type": "ui_template",
        "z": "9daf9e2b.019fc",
        "group": "6c57a903b8155d3d",
        "name": "Log table",
        "order": 1,
        "width": 20,
        "height": 12,
        "format": "<script type=\"text/javascript\">\n    function selectElementContents(el) {\n        var body = document.body, range, sel;\n        if (document.createRange && window.getSelection) {\n            range = document.createRange();\n            sel = window.getSelection();\n            sel.removeAllRanges();\n            try {\n                range.selectNodeContents(el);\n                sel.addRange(range);\n            } catch (e) {\n                range.selectNode(el);\n                sel.addRange(range);\n            }\n            document.execCommand(\"copy\");\n            sel.removeAllRanges();\n\n        } else if (body.createTextRange) {\n            range = body.createTextRange();\n            range.moveToElementText(el);\n            range.select();\n            range.execCommand(\"Copy\");\n        }\n    }\n</script>\n\n<md-button onclick=\"selectElementContents( document.getElementById('log_table') );\">\n    <i class=\"fa fa-copy fa-1x\"></i> Copy Log\n</md-button>\n\n<table id=\"log_table\" style=\"font-family: mono;font-size: 15px;\">\n    <tr ng-repeat=\"row in msg.payload\">\n        <td>{{row}}</td>\n    </tr>\n</table>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1600,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "c8c06e4e131b1820",
        "type": "function",
        "z": "9daf9e2b.019fc",
        "name": "set mode beginner for reboot",
        "func": "msg = {}\nmsg.payload = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 780,
        "wires": [
            [
                "224c34bfa19426ec"
            ]
        ]
    },
    {
        "id": "224c34bfa19426ec",
        "type": "change",
        "z": "9daf9e2b.019fc",
        "name": "Change global mode",
        "rules": [
            {
                "t": "set",
                "p": "mode",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 780,
        "wires": [
            [
                "d3892bf83549fd59"
            ]
        ]
    },
    {
        "id": "d3892bf83549fd59",
        "type": "link out",
        "z": "9daf9e2b.019fc",
        "name": "",
        "mode": "link",
        "links": [
            "127fd2e4447c6ad1",
            "4dd140903cddda10",
            "713395d7523b16e8",
            "87171ccda60d4390",
            "97f9c6da2e1095d2",
            "a45e550cb5e1c1d1",
            "c840a7c66cf51acc"
        ],
        "x": 1035,
        "y": 780,
        "wires": []
    },
    {
        "id": "fa3a3f2c77212b81",
        "type": "ui_template",
        "z": "9daf9e2b.019fc",
        "group": "1be83144.4fe4bf",
        "name": "Link to PlanktoScope github",
        "order": 4,
        "width": 14,
        "height": 1,
        "format": "<div><center>\n    <a style=\"color:DodgerBlue;\" href=\"https://github.com/PlanktoScope/PlanktoScope\"><span>GitHub : PlanktoScope</span></a>\n</center></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 180,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "50347e313939eabf",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "name": "Restart Python",
        "group": "e00e107dc2d1b6ad",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": "Restart Python",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "fa-refresh fa-2x",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 400,
        "y": 560,
        "wires": [
            [
                "ed7503f3.d95a48",
                "1575db82.742854",
                "bd5cceef.b17ad"
            ]
        ]
    },
    {
        "id": "7cf689a45c33dcc3",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "name": "",
        "group": "e00e107dc2d1b6ad",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Reboot",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "fa-repeat fa-2x",
        "payload": "reboot",
        "payloadType": "str",
        "topic": "reboot",
        "topicType": "str",
        "x": 420,
        "y": 640,
        "wires": [
            [
                "c8c06e4e131b1820",
                "4af9112d.87767"
            ]
        ]
    },
    {
        "id": "42d351cb9b3e4c88",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "name": "",
        "group": "e00e107dc2d1b6ad",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Shutdown",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "fa-power-off fa-2x",
        "payload": "shutdown",
        "payloadType": "str",
        "topic": "shutdown",
        "topicType": "str",
        "x": 420,
        "y": 800,
        "wires": [
            [
                "4af9112d.87767",
                "c8c06e4e131b1820"
            ]
        ]
    },
    {
        "id": "dd5201ade3a85e20",
        "type": "ui_text",
        "z": "9daf9e2b.019fc",
        "group": "1be83144.4fe4bf",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "DO NOT TOUCH HERE UNLESS YOU KNOW WHAT YOU ARE DOING",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 340,
        "y": 860,
        "wires": []
    },
    {
        "id": "1f2312748cd7006b",
        "type": "ui_text",
        "z": "9daf9e2b.019fc",
        "group": "e00e107dc2d1b6ad",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "DO NOT TOUCH HERE UNLESS YOU KNOW WHAT YOU ARE DOING",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 920,
        "y": 860,
        "wires": []
    },
    {
        "id": "911996d59bdf1f9a",
        "type": "ui_text",
        "z": "9daf9e2b.019fc",
        "group": "e00e107dc2d1b6ad",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Take care, these buttons will make python or the planktoscope restart. You could lose informations.",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 1000,
        "y": 900,
        "wires": []
    },
    {
        "id": "44efaeb3.59bf6",
        "type": "subflow:4ed26b8b.253504",
        "z": "1eaf21c8.f7a21e",
        "name": "",
        "env": [],
        "x": 120,
        "y": 340,
        "wires": [
            [
                "e10f5e55.00b828",
                "c534fd26.13741",
                "54ba7f16.709ad8",
                "11955bbeefc29ab4"
            ]
        ]
    },
    {
        "id": "e10f5e55.00b828",
        "type": "change",
        "z": "1eaf21c8.f7a21e",
        "name": "Get stepper_type",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.stepper_type",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 260,
        "wires": [
            [
                "b29f7504364cf0ea"
            ]
        ]
    },
    {
        "id": "dee52a36.2af72",
        "type": "ui_dropdown",
        "z": "1eaf21c8.f7a21e",
        "name": "stepper_type",
        "label": "",
        "tooltip": "",
        "place": "",
        "group": "6be36295.0ab324",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "adafruit",
                "type": "str"
            },
            {
                "label": "",
                "value": "waveshare",
                "type": "str"
            },
            {
                "label": "",
                "value": "pscope_hat",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "stepper_type",
        "topicType": "str",
        "className": "",
        "x": 770,
        "y": 260,
        "wires": [
            [
                "2068e7f.f4efb18",
                "8e3b3d3c.955148"
            ]
        ]
    },
    {
        "id": "e41870d7.300eb8",
        "type": "link out",
        "z": "1eaf21c8.f7a21e",
        "name": "Stepper config change",
        "links": [
            "45a7b5aa.2ed20c"
        ],
        "x": 1215,
        "y": 260,
        "wires": []
    },
    {
        "id": "2068e7f.f4efb18",
        "type": "delay",
        "z": "1eaf21c8.f7a21e",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1100,
        "y": 260,
        "wires": [
            [
                "e41870d7.300eb8"
            ]
        ]
    },
    {
        "id": "8e3b3d3c.955148",
        "type": "subflow:4ed26b8b.253504",
        "z": "1eaf21c8.f7a21e",
        "name": "",
        "env": [],
        "x": 1120,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "c534fd26.13741",
        "type": "change",
        "z": "1eaf21c8.f7a21e",
        "name": "Get stepper_reverse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.stepper_reverse",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 340,
        "wires": [
            [
                "665d7efc068aa806"
            ]
        ]
    },
    {
        "id": "cd1987c7.027f58",
        "type": "ui_switch",
        "z": "1eaf21c8.f7a21e",
        "name": "stepper_reverse",
        "label": "Invert stepper output",
        "tooltip": "Stepper 1 is controlled by output 1 or the other way around",
        "group": "6be36295.0ab324",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "false",
        "topic": "stepper_reverse",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 780,
        "y": 340,
        "wires": [
            [
                "8e3b3d3c.955148",
                "2068e7f.f4efb18"
            ]
        ]
    },
    {
        "id": "54ba7f16.709ad8",
        "type": "change",
        "z": "1eaf21c8.f7a21e",
        "name": "Get pump_steps_per_ml",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.pump_steps_per_ml",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 300,
        "wires": [
            [
                "65d8a0bfeed001d4"
            ]
        ]
    },
    {
        "id": "ee58b91c.396108",
        "type": "ui_text_input",
        "z": "1eaf21c8.f7a21e",
        "name": "pump_steps_per_ml",
        "label": "Pump: steps per mL",
        "tooltip": "",
        "group": "6be36295.0ab324",
        "order": 6,
        "width": 5,
        "height": 1,
        "passthru": false,
        "mode": "number",
        "delay": "2000",
        "topic": "pump_steps_per_ml",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 800,
        "y": 300,
        "wires": [
            [
                "2068e7f.f4efb18",
                "8e3b3d3c.955148"
            ]
        ]
    },
    {
        "id": "be888117.5cd67",
        "type": "ui_template",
        "z": "1eaf21c8.f7a21e",
        "group": "6be36295.0ab324",
        "name": "Stepper controller type header",
        "order": 3,
        "width": 6,
        "height": 1,
        "format": "<div>Stepper controller type</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 830,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "7534dfd9.8cf3e8",
        "type": "ui_template",
        "z": "1eaf21c8.f7a21e",
        "group": "6be36295.0ab324",
        "name": "Information",
        "order": 2,
        "width": 12,
        "height": 2,
        "format": "<div style=\"text-align: center;\">\n    <p>Changing one of these values will make the python back-end to restart.</p>\n    <p>If you are not sure, you probably should not be touching anything here!</p>\n    <p>If you quit Custom Version, you will loose all your calibration values</p>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 890,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a7e5c7f4.644678",
        "type": "ui_dropdown",
        "z": "1eaf21c8.f7a21e",
        "name": "Machine Version",
        "label": "Machine version",
        "tooltip": "",
        "place": "Select option",
        "group": "6be36295.0ab324",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "Projet Lac0scope 0 (Babamu Xapoiteo)",
                "value": "Projeat Lac0scope 0",
                "type": "str"
            },
            {
                "label": "Projet Lac0scope 1 (Babajai Muqouqo)",
                "value": "Projet Lac0scope 1",
                "type": "str"
            },
            {
                "label": "Projet Lac0scope 2 (Babayou Qexoamou)",
                "value": "Projet Lac0scope 2",
                "type": "str"
            },
            {
                "label": "Projet Lac0scope 3 (Ense3)",
                "value": "Projet Lac0scope 3",
                "type": "str"
            },
            {
                "label": "Custom Version",
                "value": "Custom Version",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "acq_instrument",
        "topicType": "str",
        "className": "",
        "x": 600,
        "y": 60,
        "wires": [
            [
                "3e2c5c1c.4c57b4",
                "593a285b59c9a2ba"
            ]
        ]
    },
    {
        "id": "1cfadc66.3cde8c",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "1eaf21c8.f7a21e",
        "name": "",
        "env": [],
        "x": 690,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "3e2c5c1c.4c57b4",
        "type": "function",
        "z": "1eaf21c8.f7a21e",
        "name": "Set and update settings",
        "func": "global.set(msg.topic,msg.payload);\n\nif (msg.payload.includes(\"Lac0scope 0\")){\n    msg_stepper_type = {topic:\"stepper_type\", payload:\"adafruit\"};\n    msg_pump_steps = {topic:\"pump_steps_per_ml\", payload:434};\n    return [msg, msg_stepper_type, msg_pump_steps];\n}\nelse if (msg.payload.includes(\"Lac0scope 1\")){\n    msg_stepper_type = {topic:\"stepper_type\", payload:\"adafruit\"};\n    msg_pump_steps = {topic:\"pump_steps_per_ml\", payload:428};\n    return [msg, msg_stepper_type, msg_pump_steps];\n}\nelse if (msg.payload.includes(\"Lac0scope 2\")){\n    msg_stepper_type = {topic:\"stepper_type\", payload:\"adafruit\"};\n    msg_pump_steps = {topic:\"pump_steps_per_ml\", payload:1310};\n    return [msg, msg_stepper_type, msg_pump_steps];\n}\nelse if (msg.payload.includes(\"Lac0scope 3\")){\n    msg_stepper_type = {topic:\"stepper_type\", payload:\"adafruit\"};\n    msg_pump_steps = {topic:\"pump_steps_per_ml\", payload:1776};\n    return [msg, msg_stepper_type, msg_pump_steps];\n}\nelse{\n    return [msg, null, null];\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "1cfadc66.3cde8c"
            ],
            [
                "8e3b3d3c.955148",
                "2068e7f.f4efb18",
                "b29f7504364cf0ea"
            ],
            [
                "8e3b3d3c.955148",
                "65d8a0bfeed001d4"
            ]
        ]
    },
    {
        "id": "427c312.fc5e65",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "1eaf21c8.f7a21e",
        "name": "",
        "env": [],
        "x": 150,
        "y": 60,
        "wires": [
            [
                "237809c1.2c64ce"
            ]
        ]
    },
    {
        "id": "237809c1.2c64ce",
        "type": "function",
        "z": "1eaf21c8.f7a21e",
        "name": "get acq_instrument",
        "func": "if (msg.payload.acq_instrument != undefined) {\n    msg1={}\n    msg1.payload = msg.payload.acq_instrument;\n    return msg1;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 60,
        "wires": [
            [
                "a7e5c7f4.644678",
                "f9e535a5a1b53862"
            ]
        ]
    },
    {
        "id": "c67c305004f87e39",
        "type": "change",
        "z": "1eaf21c8.f7a21e",
        "name": "Get process_pixel_fixed",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.process_pixel",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 380,
        "wires": [
            [
                "743342cefd0e6eac"
            ]
        ]
    },
    {
        "id": "244ca5dd62df2bcd",
        "type": "ui_text_input",
        "z": "1eaf21c8.f7a21e",
        "name": "process_pixel_fixed",
        "label": "Pixel size calibration",
        "tooltip": "Object size in µm / pixel. 0 will remove this calibration.",
        "group": "6be36295.0ab324",
        "order": 8,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "process_pixel",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 800,
        "y": 380,
        "wires": [
            [
                "8e3b3d3c.955148",
                "f9b47f4b1da15778"
            ]
        ]
    },
    {
        "id": "f9b47f4b1da15778",
        "type": "function",
        "z": "1eaf21c8.f7a21e",
        "name": "Set or remove if null",
        "func": "if (msg.payload == 0){\n    global.set(msg.topic,undefined)\n}\nelse {\n    global.set(msg.topic,msg.payload);\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 340,
        "wires": [
            [
                "5d5ad36d2c50dcc2"
            ]
        ]
    },
    {
        "id": "5d5ad36d2c50dcc2",
        "type": "link out",
        "z": "1eaf21c8.f7a21e",
        "name": "Process_pixel calibration",
        "links": [
            "cfc783d7.d6ceb",
            "6746f61cadaa1038",
            "dfefeb6072e3ee44"
        ],
        "x": 1375,
        "y": 340,
        "wires": []
    },
    {
        "id": "a6983d3232b570a7",
        "type": "change",
        "z": "1eaf21c8.f7a21e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "acq_fnumber_objective",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 380,
        "wires": [
            [
                "5d5ad36d2c50dcc2"
            ]
        ]
    },
    {
        "id": "11955bbeefc29ab4",
        "type": "change",
        "z": "1eaf21c8.f7a21e",
        "name": "Get acq_fnumber_objective",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.acq_fnumber_objective",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "acq_fnumber_objective",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 420,
        "wires": [
            [
                "95b374a91cb16f2b"
            ]
        ]
    },
    {
        "id": "95b374a91cb16f2b",
        "type": "link out",
        "z": "1eaf21c8.f7a21e",
        "name": "Choice objective",
        "mode": "link",
        "links": [
            "9bc3e85c28d70120",
            "4d29b4f3ab226c2c"
        ],
        "x": 555,
        "y": 420,
        "wires": []
    },
    {
        "id": "a9f290c81031e81e",
        "type": "link in",
        "z": "1eaf21c8.f7a21e",
        "name": "",
        "links": [
            "75b7aeca42db75bd",
            "9d94dcc24bdc7ea1"
        ],
        "x": 955,
        "y": 380,
        "wires": [
            [
                "8e3b3d3c.955148",
                "a6983d3232b570a7"
            ]
        ]
    },
    {
        "id": "52f756c93fac4d70",
        "type": "inject",
        "z": "1eaf21c8.f7a21e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 950,
        "y": 420,
        "wires": [
            [
                "a6983d3232b570a7"
            ]
        ]
    },
    {
        "id": "123cc98c97bc1dd5",
        "type": "function",
        "z": "1eaf21c8.f7a21e",
        "name": "Change mode",
        "func": "var values = {}\nvar activation_msg = {}\n\n//Mode expert\nif (msg.payload === 0){\n    activation_msg.payload = {\"group\":{\"show\":[\"TAB_NAME_GROUPE_NAME\",\"TAB_NAME_GROUPE_NAME\"],\"hide\":[\"TAB_NAME_GROUPE_NAME\"]}};\n    values.enabled = true;\n    return [values, activation_msg];\n}\n\n//Mode débutant\nelse if (msg.payload === 1){\n    activation_msg.payload = {\"group\":{\"show\":[\"TAB_NAME_GROUPE_NAME\"],\"hide\":[\"TAB_NAME_GROUPE_NAME\",\"TAB_NAME_GROUPE_NAME\"]}};\n    values.enabled = false;\n    return [values, activation_msg];\n}\nelse{\n    return [null, null];\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 620,
        "wires": [
            [
                "ba4d0780e309990a",
                "244ca5dd62df2bcd",
                "cd1987c7.027f58",
                "ee58b91c.396108",
                "dee52a36.2af72",
                "be888117.5cd67"
            ]
        ]
    },
    {
        "id": "ba4d0780e309990a",
        "type": "ui_ui_control",
        "z": "1eaf21c8.f7a21e",
        "name": "show/hide net groups",
        "events": "change",
        "x": 840,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "d1cf69500811c980",
        "type": "ui_multistate_switch",
        "z": "1eaf21c8.f7a21e",
        "d": true,
        "name": "Mode selection",
        "group": "db554934a715783e",
        "order": 1,
        "width": 8,
        "height": 1,
        "label": "",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "always",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Expert mode",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Beginner mode",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "topic": "",
        "x": 340,
        "y": 580,
        "wires": [
            [
                "1abe30a22c34e19a",
                "123cc98c97bc1dd5"
            ]
        ]
    },
    {
        "id": "4091947c8187153f",
        "type": "change",
        "z": "1eaf21c8.f7a21e",
        "name": "Change global mode",
        "rules": [
            {
                "t": "set",
                "p": "mode",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 540,
        "wires": [
            [
                "7a7343ef8627ec57"
            ]
        ]
    },
    {
        "id": "7a7343ef8627ec57",
        "type": "link out",
        "z": "1eaf21c8.f7a21e",
        "name": "out_hardware_mode",
        "mode": "link",
        "links": [
            "127fd2e4447c6ad1",
            "4dd140903cddda10",
            "713395d7523b16e8",
            "7164566e38c0e242",
            "97f9c6da2e1095d2",
            "c840a7c66cf51acc",
            "a45e550cb5e1c1d1"
        ],
        "x": 1035,
        "y": 540,
        "wires": []
    },
    {
        "id": "87171ccda60d4390",
        "type": "link in",
        "z": "1eaf21c8.f7a21e",
        "name": "in_hardware_mode",
        "links": [
            "082af9181824a196",
            "319bff50477bc5fc",
            "4cfbba68449a28e2",
            "a85a1f2d75981a8c",
            "b6e04f52920c6dcb",
            "bfce8e77727b9fbf",
            "de32bd4b6ba8dfd3",
            "d3892bf83549fd59"
        ],
        "x": 175,
        "y": 580,
        "wires": [
            [
                "d1cf69500811c980",
                "123cc98c97bc1dd5"
            ]
        ]
    },
    {
        "id": "1abe30a22c34e19a",
        "type": "function",
        "z": "1eaf21c8.f7a21e",
        "name": "Get mode value",
        "func": "if (msg.payload != global.get(\"mode\")){\n    return msg;\n}\nelse {\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 540,
        "wires": [
            [
                "4091947c8187153f"
            ]
        ]
    },
    {
        "id": "1c3676fd3f8aa26d",
        "type": "link in",
        "z": "1eaf21c8.f7a21e",
        "name": "Pixel Resolution",
        "links": [
            "66c31ceb7f02964e"
        ],
        "x": 175,
        "y": 420,
        "wires": [
            [
                "c67c305004f87e39"
            ]
        ]
    },
    {
        "id": "743342cefd0e6eac",
        "type": "function",
        "z": "1eaf21c8.f7a21e",
        "name": "Fix enabled",
        "func": "mode = global.get(\"mode\")\n\nif(mode == 0) {\n    msg.enabled = true\n} else {\n    msg.enabled = false\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 380,
        "wires": [
            [
                "244ca5dd62df2bcd"
            ]
        ]
    },
    {
        "id": "665d7efc068aa806",
        "type": "function",
        "z": "1eaf21c8.f7a21e",
        "name": "Fix enabled",
        "func": "mode = global.get(\"mode\")\n\nif(mode == 0) {\n    msg.enabled = true\n} else {\n    msg.enabled = false\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 340,
        "wires": [
            [
                "cd1987c7.027f58"
            ]
        ]
    },
    {
        "id": "65d8a0bfeed001d4",
        "type": "function",
        "z": "1eaf21c8.f7a21e",
        "name": "Fix enabled",
        "func": "mode = global.get(\"mode\")\n\nif(mode == 0) {\n    msg.enabled = true\n} else {\n    msg.enabled = false\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 300,
        "wires": [
            [
                "ee58b91c.396108"
            ]
        ]
    },
    {
        "id": "b29f7504364cf0ea",
        "type": "function",
        "z": "1eaf21c8.f7a21e",
        "name": "Fix enabled",
        "func": "mode = global.get(\"mode\")\n\nif(mode == 0) {\n    msg.enabled = true\n} else {\n    msg.enabled = false\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 260,
        "wires": [
            [
                "dee52a36.2af72"
            ]
        ]
    },
    {
        "id": "7d2fdac8f6d69a07",
        "type": "link out",
        "z": "1eaf21c8.f7a21e",
        "name": "Name Machine",
        "mode": "link",
        "links": [
            "6cdcee66c59df982"
        ],
        "x": 995,
        "y": 60,
        "wires": []
    },
    {
        "id": "593a285b59c9a2ba",
        "type": "function",
        "z": "1eaf21c8.f7a21e",
        "name": "",
        "func": "name = global.get(\"acq_instrument\")\n\nif(name != undefined){\n    if (name == \"Projet Lac0scope 0\") {\n        msg.payload = \"Projet Lac0scope 0 (Babamu Xapoiteo)\"\n    }\n    if (name == \"Projet Lac0scope 1\") {\n        msg.payload = \"Projet Lac0scope 1 (Babajai Muqouqo)\"\n    }\n    if (name == \"Projet Lac0scope 2\") {\n        msg.payload = \"Projet Lac0scope 2 (Babayou Qexoamou)\"\n    }\n    if (name == \"Projet Lac0scope 3\") {\n        msg.payload = \"Projet Lac0scope 3 (Ense3)\"\n    }\n    return msg; \n}\n\n\n\n/*\nif (msg.payload == \"Projeat Lac0scope 0\") {\n    msg.payload = \"Projet Lac0scope 0 (Babamu Xapoiteo)\"\n}\nif (msg.payload == \"Projeat Lac0scope 1\") {\n    msg.payload = \"Projet Lac0scope 1 (Babajai Muqouqo)\"\n}\nif (msg.payload == \"Projeat Lac0scope 2\") {\n    msg.payload = \"Projet Lac0scope 2 (Babayou Qexoamou)\"\n}\nif (msg.payload == \"Projeat Lac0scope 3\") {\n    msg.payload = \"Projet Lac0scope 3 (Ense3)\"\n}\nreturn msg;\n\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 60,
        "wires": [
            [
                "7d2fdac8f6d69a07"
            ]
        ]
    },
    {
        "id": "f9e535a5a1b53862",
        "type": "delay",
        "z": "1eaf21c8.f7a21e",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 20,
        "wires": [
            [
                "593a285b59c9a2ba"
            ]
        ]
    },
    {
        "id": "1fdf77b5.24e4e",
        "type": "mqtt in",
        "z": "9a22e67a.378818",
        "name": "",
        "topic": "status/#",
        "qos": "0",
        "datatype": "json",
        "broker": "8dc3722c.06efa8",
        "inputs": 0,
        "x": 290,
        "y": 340,
        "wires": [
            [
                "fa73983d.318188"
            ]
        ]
    },
    {
        "id": "4a1e9e3e.27506",
        "type": "switch",
        "z": "9a22e67a.378818",
        "name": "Filter segmenter out",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "cont",
                "v": "status/segmenter",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 340,
        "wires": [
            [
                "58f2e0f.4e8b12"
            ],
            [
                "dcf5bd45.16a8d"
            ]
        ]
    },
    {
        "id": "fa73983d.318188",
        "type": "json",
        "z": "9a22e67a.378818",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 430,
        "y": 340,
        "wires": [
            [
                "4a1e9e3e.27506"
            ]
        ]
    },
    {
        "id": "58f2e0f.4e8b12",
        "type": "link out",
        "z": "9a22e67a.378818",
        "name": "Fluidic module status",
        "links": [
            "bb628f8d.98f108"
        ],
        "x": 795,
        "y": 320,
        "wires": []
    },
    {
        "id": "dcf5bd45.16a8d",
        "type": "link out",
        "z": "9a22e67a.378818",
        "name": "Segmenter module status",
        "links": [
            "25867454.a8e334"
        ],
        "x": 795,
        "y": 360,
        "wires": []
    }
]