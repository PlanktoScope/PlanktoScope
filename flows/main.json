[
    {
        "id": "eaae323a.31b3",
        "type": "tab",
        "label": "Home",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b771c342.49603",
        "type": "tab",
        "label": "Sample",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bccd1f23.87219",
        "type": "tab",
        "label": "Optical Configuration",
        "disabled": false,
        "info": ""
    },
    {
        "id": "baa1e3d9.cb29d",
        "type": "tab",
        "label": "Fluidic Acquisition",
        "disabled": false,
        "info": ""
    },
    {
        "id": "cb95299c.2817c8",
        "type": "tab",
        "label": "Segmentation",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c1660bc.e7ff7f8",
        "type": "tab",
        "label": "Gallery",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9daf9e2b.019fc",
        "type": "tab",
        "label": "Administration",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1371dec5.76e671",
        "type": "tab",
        "label": "System Monitoring",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f21ba04.c26266",
        "type": "tab",
        "label": "Wifi",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9a22e67a.378818",
        "type": "tab",
        "label": "MQTT Receive",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1eaf21c8.f7a21e",
        "type": "tab",
        "label": "Hardware Settings",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5195979a0d7a6b2a",
        "type": "tab",
        "label": "PlanktoScope",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "073a18d556c8d083",
        "type": "tab",
        "label": "Metadata",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1c24ad9c.bebec2",
        "type": "subflow",
        "name": "Metadata load",
        "info": "An input to this subflow will get the configuration to be saved to disk.\n\nOn startup, this node outputs the loaded configuration",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 80,
                "wires": [
                    {
                        "id": "6465bdd5.15eb8c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1150,
                "y": 80,
                "wires": [
                    {
                        "id": "ad541674.4791c8",
                        "port": 0
                    },
                    {
                        "id": "f439663c.8abd3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "desc": "On input, load the metadata from the disk"
        },
        "color": "#E9967A",
        "inputLabels": [
            "Force load"
        ],
        "outputLabels": [
            "Loaded configuration file"
        ],
        "icon": "node-red/file-in.svg"
    },
    {
        "id": "4ed26b8b.253504",
        "type": "subflow",
        "name": "Metadata save",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 80,
                "wires": [
                    {
                        "id": "a59d26a378a6f5b0"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {
            "desc": "On input, save to the metadata to the disk"
        },
        "color": "#E9967A",
        "inputLabels": [
            "save metadata"
        ],
        "icon": "node-red/file-out.svg"
    },
    {
        "id": "de2cd9caa0e28a7c",
        "type": "junction",
        "z": "b771c342.49603",
        "x": 960,
        "y": 300,
        "wires": [
            [
                "9f501f49.45645",
                "3ac7b631f5d8ef90"
            ]
        ]
    },
    {
        "id": "1729e84341dbb369",
        "type": "junction",
        "z": "b771c342.49603",
        "x": 200,
        "y": 320,
        "wires": [
            [
                "a3272681.f271c8",
                "f408a273.4fb538",
                "9f04c5ec.75f3d8",
                "8dff1648.82e42",
                "9ca1283cbf96e038",
                "f5013705b182c45c",
                "0df15c4740bd6864",
                "5d6ac2dd07567c4a",
                "6e725f92fcd3d59d",
                "1c40ac7b4bce5f8d",
                "097413ca3cb3c769",
                "c64d36611877bb57",
                "afc4243eee1c0cf6",
                "f0fd533e8181002f",
                "8f2340504cec3332"
            ]
        ]
    },
    {
        "id": "16426cdfcadc3056",
        "type": "junction",
        "z": "b771c342.49603",
        "x": 620,
        "y": 1140,
        "wires": [
            [
                "726a7822.cd6298",
                "19ee2680865bb205"
            ]
        ]
    },
    {
        "id": "8a3e288349643aae",
        "type": "junction",
        "z": "b771c342.49603",
        "x": 340,
        "y": 1400,
        "wires": [
            [
                "cc21ca16.b92928",
                "4a4de52c.cf2884",
                "54e37580.fdc31c",
                "258b4562.9f778a",
                "73c4a14a.9b93c8"
            ]
        ]
    },
    {
        "id": "55e67dfea72aa576",
        "type": "junction",
        "z": "1371dec5.76e671",
        "x": 260,
        "y": 1180,
        "wires": [
            [
                "9b29e0e2.475e08",
                "906072b1.42c7c8",
                "96fefa8b.b7d538",
                "cd3b05d6.5a3e2",
                "49a98fe9.9450d8",
                "f2a62d0.f5e135"
            ]
        ]
    },
    {
        "id": "dd364f1f9eaba649",
        "type": "junction",
        "z": "1371dec5.76e671",
        "x": 480,
        "y": 300,
        "wires": [
            [
                "45e1912a.36a23",
                "84ac8611.1a6ac8",
                "eaf74a43.fa27d"
            ]
        ]
    },
    {
        "id": "e366df7d663670c8",
        "type": "junction",
        "z": "1371dec5.76e671",
        "x": 480,
        "y": 200,
        "wires": [
            [
                "e84f6e08.5d147",
                "c7c8d192.3df27"
            ]
        ]
    },
    {
        "id": "f21e596e496d5dcb",
        "type": "junction",
        "z": "1371dec5.76e671",
        "x": 480,
        "y": 120,
        "wires": [
            [
                "e046247c.c466e8",
                "4b2b9a70.6a9af4"
            ]
        ]
    },
    {
        "id": "98beb1efbd08e8a5",
        "type": "junction",
        "z": "1371dec5.76e671",
        "x": 480,
        "y": 40,
        "wires": [
            [
                "2c8c45ab.610c0a",
                "cef370c7.1f7a"
            ]
        ]
    },
    {
        "id": "7f205e82db28120e",
        "type": "junction",
        "z": "1371dec5.76e671",
        "x": 600,
        "y": 840,
        "wires": [
            [
                "c74fe76.bcba718",
                "4997446.5176d3c"
            ]
        ]
    },
    {
        "id": "e4a8d854e7271119",
        "type": "junction",
        "z": "eaae323a.31b3",
        "x": 620,
        "y": 720,
        "wires": [
            [
                "a1b01adb2328d8f6",
                "b511fa878d55b303",
                "b772791e9e1fa86f",
                "49265dd55a3d74a9",
                "3ab96b29ad5330ea",
                "e7a7bb9ad10a388b"
            ]
        ]
    },
    {
        "id": "edba505a6fdd5d5b",
        "type": "junction",
        "z": "eaae323a.31b3",
        "x": 620,
        "y": 240,
        "wires": [
            [
                "4e78af2d.90be7"
            ]
        ]
    },
    {
        "id": "9f6292fdacabb97e",
        "type": "junction",
        "z": "f21ba04.c26266",
        "x": 340,
        "y": 200,
        "wires": [
            [
                "4c0400c.69a1e8"
            ]
        ]
    },
    {
        "id": "23d77b28fecb55bb",
        "type": "junction",
        "z": "bccd1f23.87219",
        "x": 760,
        "y": 920,
        "wires": [
            [
                "62030521.88317c"
            ]
        ]
    },
    {
        "id": "e18598223b99a72b",
        "type": "junction",
        "z": "baa1e3d9.cb29d",
        "x": 840,
        "y": 260,
        "wires": [
            [
                "fb887036.12429"
            ]
        ]
    },
    {
        "id": "78265e7fd1ec2e41",
        "type": "junction",
        "z": "bccd1f23.87219",
        "x": 180,
        "y": 580,
        "wires": [
            [
                "8ef294ba.12213",
                "8e336e58.14722",
                "6be64480.7e7e24",
                "6d49d161.13628",
                "15ddf0372daab1dc",
                "2f3cbb68aaad8710",
                "2b3217c91c188c10",
                "72ef9b9fcfdb5950",
                "56634eabb8a82142",
                "0adc5c5766629ac4",
                "982f7dbad4a6e35f"
            ]
        ]
    },
    {
        "id": "32a01567c2f95ebe",
        "type": "junction",
        "z": "1eaf21c8.f7a21e",
        "x": 200,
        "y": 360,
        "wires": [
            [
                "e10f5e55.00b828",
                "54ba7f16.709ad8",
                "c534fd26.13741",
                "11955bbeefc29ab4",
                "c67c305004f87e39"
            ]
        ]
    },
    {
        "id": "13d04338daf07495",
        "type": "junction",
        "z": "1eaf21c8.f7a21e",
        "x": 900,
        "y": 400,
        "wires": [
            [
                "285e3db1405b123b"
            ]
        ]
    },
    {
        "id": "51709748447380a2",
        "type": "junction",
        "z": "5195979a0d7a6b2a",
        "x": 240,
        "y": 220,
        "wires": [
            [
                "161c9f5e5c07a198",
                "95c15d65c004903c",
                "3c8899d253ff70cc",
                "341734bdbc3e223f",
                "012b19d8b462b3e2"
            ]
        ]
    },
    {
        "id": "7094dee99bbbe6ca",
        "type": "junction",
        "z": "bccd1f23.87219",
        "x": 1200,
        "y": 660,
        "wires": [
            [
                "845e06e1.0d812",
                "0449fb3f7205c9f1"
            ]
        ]
    },
    {
        "id": "833bc5bb.217ba8",
        "type": "ui_group",
        "name": "Preview",
        "tab": "181bb236.1e94be",
        "order": 1,
        "disp": true,
        "width": 18,
        "collapse": false
    },
    {
        "id": "3a6bb13f.c9703e",
        "type": "ui_tab",
        "name": "Home",
        "icon": "home",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "181bb236.1e94be",
        "type": "ui_tab",
        "name": "Optical Configuration",
        "icon": "fa-eye",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c9194f02.9d5e9",
        "type": "ui_tab",
        "name": "Fluidic Acquisition",
        "icon": "fa-flask",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "8d16beb8.9b3fb",
        "type": "ui_tab",
        "name": "Segmentation",
        "icon": "fa-crop",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d9cd733b.ab73d",
        "type": "ui_tab",
        "name": "System Monitoring",
        "icon": "fa-thermometer-full",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4248342d.e55fac",
        "type": "ui_group",
        "name": "Optics Characterization",
        "tab": "181bb236.1e94be",
        "order": 4,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "858a0e3c.987fe",
        "type": "ui_group",
        "name": "Preview",
        "tab": "c9194f02.9d5e9",
        "order": 1,
        "disp": true,
        "width": 20,
        "collapse": false
    },
    {
        "id": "64903b47.4034e4",
        "type": "ui_group",
        "name": "Navigation",
        "tab": "8d16beb8.9b3fb",
        "order": 3,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3da7da8f.179606",
        "type": "ui_group",
        "name": "Processor",
        "tab": "d9cd733b.ab73d",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "cc8bc4eb.651868",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#1a5fb4",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#af1db9",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "PlanktoScope",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "YYYY-MM-DD",
            "sizes": {
                "sx": 55,
                "sy": 55,
                "gx": 4,
                "gy": 4,
                "cx": 4,
                "cy": 4,
                "px": 4,
                "py": 4
            }
        }
    },
    {
        "id": "36739a35.7cce36",
        "type": "ui_tab",
        "name": "Gallery",
        "icon": "fa-file-image-o",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c0ebfc57.42527",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "36739a35.7cce36",
        "order": 1,
        "disp": false,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "737ec584.2eea2c",
        "type": "ui_tab",
        "name": "Sample",
        "icon": "fa-eyedropper",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6f97e7ae.270c48",
        "type": "ui_group",
        "name": "Sample",
        "tab": "3a6bb13f.c9703e",
        "order": 1,
        "disp": false,
        "width": 2,
        "collapse": false,
        "className": ""
    },
    {
        "id": "3e1ba03d.f01d8",
        "type": "ui_group",
        "name": "Sample Identification",
        "tab": "737ec584.2eea2c",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false
    },
    {
        "id": "4e0cd5ea.17e59c",
        "type": "ui_group",
        "name": "Optic Configuration",
        "tab": "3a6bb13f.c9703e",
        "order": 2,
        "disp": false,
        "width": 2,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ef590206.24f6",
        "type": "ui_group",
        "name": "Fluidic Acquisition",
        "tab": "3a6bb13f.c9703e",
        "order": 3,
        "disp": false,
        "width": 2,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ae8f6620.073358",
        "type": "ui_group",
        "name": "Segmentation",
        "tab": "3a6bb13f.c9703e",
        "order": 4,
        "disp": false,
        "width": 2,
        "collapse": false,
        "className": ""
    },
    {
        "id": "196518b2.4d53b7",
        "type": "ui_group",
        "name": "Gallery",
        "tab": "3a6bb13f.c9703e",
        "order": 5,
        "disp": false,
        "width": 2,
        "collapse": false,
        "className": ""
    },
    {
        "id": "777a7c33.fcd804",
        "type": "ui_group",
        "name": "System Monitoring",
        "tab": "3a6bb13f.c9703e",
        "order": 6,
        "disp": false,
        "width": 2,
        "collapse": false,
        "className": ""
    },
    {
        "id": "cef1e703.bcf3c8",
        "type": "ui_group",
        "name": "Single Location",
        "tab": "737ec584.2eea2c",
        "order": 3,
        "disp": false,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5517c651.b2f668",
        "type": "ui_group",
        "name": "Validation",
        "tab": "737ec584.2eea2c",
        "order": 6,
        "disp": false,
        "width": 10,
        "collapse": false
    },
    {
        "id": "fbd92986.1028c8",
        "type": "ui_group",
        "name": "Focus Adjustment",
        "tab": "181bb236.1e94be",
        "order": 2,
        "disp": true,
        "width": 18,
        "collapse": false
    },
    {
        "id": "707d9797.c8e798",
        "type": "ui_group",
        "name": "Fluidic Manual Manipulation",
        "tab": "181bb236.1e94be",
        "order": 5,
        "disp": true,
        "width": 6,
        "collapse": false
    },
    {
        "id": "7a0b4877.a5d268",
        "type": "ui_group",
        "name": "Navigation",
        "tab": "181bb236.1e94be",
        "order": 6,
        "disp": false,
        "width": 6,
        "collapse": false
    },
    {
        "id": "4322c187.e73e5",
        "type": "ui_group",
        "name": "Acquisition",
        "tab": "c9194f02.9d5e9",
        "order": 3,
        "disp": true,
        "width": 10,
        "collapse": false
    },
    {
        "id": "b7919ae2.c01788",
        "type": "ui_group",
        "name": "Navigation",
        "tab": "c9194f02.9d5e9",
        "order": 6,
        "disp": false,
        "width": 10,
        "collapse": false
    },
    {
        "id": "b5d61bc7.54fe48",
        "type": "ui_group",
        "name": "Statistics",
        "tab": "c9194f02.9d5e9",
        "order": 4,
        "disp": true,
        "width": "10",
        "collapse": false
    },
    {
        "id": "1be83144.4fe4bf",
        "type": "ui_group",
        "name": "Danger Zone (DO NOT TOUCH HERE UNLESS YOU KNOW WHAT YOU ARE DOING)",
        "tab": "2489e51c.eed77a",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": true
    },
    {
        "id": "3ca00bf9.e5cac4",
        "type": "ui_group",
        "name": "Navigation",
        "tab": "d9cd733b.ab73d",
        "order": 7,
        "disp": true,
        "width": 6,
        "collapse": false
    },
    {
        "id": "b5ba3f26.2e722",
        "type": "ui_group",
        "name": "CPU Temperature",
        "tab": "d9cd733b.ab73d",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "806d69c8.67fc58",
        "type": "ui_group",
        "name": "Memory",
        "tab": "d9cd733b.ab73d",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "405183bc.d8991c",
        "type": "ui_group",
        "name": "Disk Usage",
        "tab": "d9cd733b.ab73d",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8dc3722c.06efa8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0.0.0.0",
        "port": "1883",
        "clientid": "Client_node",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "abeb6dad.635a2",
        "type": "ui_group",
        "name": "Control",
        "tab": "8d16beb8.9b3fb",
        "order": 1,
        "disp": true,
        "width": 10,
        "collapse": false
    },
    {
        "id": "cf5d9f0e.d57e7",
        "type": "ui_group",
        "name": "Net Metadata",
        "tab": "737ec584.2eea2c",
        "order": 5,
        "disp": false,
        "width": "10",
        "collapse": false
    },
    {
        "id": "ce9e278.781eed8",
        "type": "ui_group",
        "name": "Information",
        "tab": "d9cd733b.ab73d",
        "order": 5,
        "disp": true,
        "width": 6,
        "collapse": false
    },
    {
        "id": "70de8209.68416c",
        "type": "ui_group",
        "name": "Status",
        "tab": "c9194f02.9d5e9",
        "order": 5,
        "disp": true,
        "width": 10,
        "collapse": false
    },
    {
        "id": "46be9c86.dea684",
        "type": "ui_group",
        "name": "Status",
        "tab": "8d16beb8.9b3fb",
        "order": 2,
        "disp": true,
        "width": 10,
        "collapse": false
    },
    {
        "id": "8c38a81e.9897a8",
        "type": "ui_group",
        "name": "Camera Settings",
        "tab": "181bb236.1e94be",
        "order": 3,
        "disp": true,
        "width": 6,
        "collapse": false
    },
    {
        "id": "52d1b77.28369c8",
        "type": "ui_group",
        "name": "USB Backup",
        "tab": "d9cd733b.ab73d",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": true
    },
    {
        "id": "a7d64879.38298",
        "type": "ui_group",
        "name": "Python Log",
        "tab": "2489e51c.eed77a",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": true
    },
    {
        "id": "9e409235.73cd7",
        "type": "ui_group",
        "name": "Add a new network",
        "tab": "1b49ae0f.602d6a",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "919923a3.d10868",
        "type": "ui_group",
        "name": "Current Connection",
        "tab": "1b49ae0f.602d6a",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1b49ae0f.602d6a",
        "type": "ui_tab",
        "name": "Wifi",
        "icon": "wifi",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2489e51c.eed77a",
        "type": "ui_tab",
        "name": "Administration",
        "icon": "fa-gear",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b0fb559a.6966a8",
        "type": "ui_tab",
        "name": "Hardware Settings",
        "icon": "fa-microchip",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "6be36295.0ab324",
        "type": "ui_group",
        "name": "Settings",
        "tab": "b0fb559a.6966a8",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "fc5e4e6f.5b1c8",
        "type": "ui_group",
        "name": "GPS Status",
        "tab": "737ec584.2eea2c",
        "order": 7,
        "disp": true,
        "width": 10,
        "collapse": false
    },
    {
        "id": "cfe2288f.a8862",
        "type": "ui_group",
        "name": "GPS Status",
        "tab": "d9cd733b.ab73d",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "97148e8d8e298f1a",
        "type": "ui_spacer",
        "z": "cb95299c.2817c8",
        "name": "spacer",
        "group": "abeb6dad.635a2",
        "order": 7,
        "width": 10,
        "height": 1
    },
    {
        "id": "3b2eccc574e6a9ae",
        "type": "ui_spacer",
        "z": "cb95299c.2817c8",
        "name": "spacer",
        "group": "abeb6dad.635a2",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "bbd6431d97c86f97",
        "type": "ui_spacer",
        "z": "cb95299c.2817c8",
        "name": "spacer",
        "group": "46be9c86.dea684",
        "order": 4,
        "width": 3,
        "height": 1
    },
    {
        "id": "5f98f5f140f0ecde",
        "type": "ui_spacer",
        "z": "cb95299c.2817c8",
        "name": "spacer",
        "group": "46be9c86.dea684",
        "order": 6,
        "width": 3,
        "height": 1
    },
    {
        "id": "7bc0a4c416e4545c",
        "type": "ui_group",
        "name": "Culture Date and Time",
        "tab": "737ec584.2eea2c",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bc08e94c999e8d27",
        "type": "ui_tab",
        "name": "PlanktoScope",
        "icon": "copyright",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2dbaeebc5146e634",
        "type": "ui_group",
        "name": "Modify Metadata",
        "tab": "bc08e94c999e8d27",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "bdb31b4743539bcd",
        "type": "ui_spacer",
        "z": "9daf9e2b.019fc",
        "name": "spacer",
        "group": "a7d64879.38298",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "13ce7afed5cfb452",
        "type": "ui_spacer",
        "z": "9daf9e2b.019fc",
        "name": "spacer",
        "group": "a7d64879.38298",
        "order": 7,
        "width": 1,
        "height": 1
    },
    {
        "id": "f5ac3cbe19ae7fa4",
        "type": "ui_spacer",
        "z": "9daf9e2b.019fc",
        "name": "spacer",
        "group": "1be83144.4fe4bf",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "a7a2a55ef9686aaf",
        "type": "ui_spacer",
        "z": "9daf9e2b.019fc",
        "name": "spacer",
        "group": "1be83144.4fe4bf",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "dfce2504e994acde",
        "type": "ui_spacer",
        "z": "9daf9e2b.019fc",
        "name": "spacer",
        "group": "1be83144.4fe4bf",
        "order": 7,
        "width": 12,
        "height": 1
    },
    {
        "id": "ca28d7f1b4ee2175",
        "type": "ui_spacer",
        "z": "9daf9e2b.019fc",
        "name": "spacer",
        "group": "1be83144.4fe4bf",
        "order": 8,
        "width": 12,
        "height": 1
    },
    {
        "id": "aeb8c2bcb8039038",
        "type": "ui_spacer",
        "z": "9daf9e2b.019fc",
        "name": "spacer",
        "group": "1be83144.4fe4bf",
        "order": 9,
        "width": 3,
        "height": 1
    },
    {
        "id": "378034015c5b88c3",
        "type": "ui_spacer",
        "z": "9daf9e2b.019fc",
        "name": "spacer",
        "group": "1be83144.4fe4bf",
        "order": 11,
        "width": 3,
        "height": 1
    },
    {
        "id": "46ffc315ba40e148",
        "type": "ui_group",
        "name": "Wifi",
        "tab": "3a6bb13f.c9703e",
        "order": 7,
        "disp": false,
        "width": 2,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c2be42455cd9a1c4",
        "type": "ui_group",
        "name": "Administration",
        "tab": "3a6bb13f.c9703e",
        "order": 8,
        "disp": false,
        "width": 2,
        "collapse": false,
        "className": ""
    },
    {
        "id": "0f9d334d08d20d6b",
        "type": "ui_group",
        "name": "Hardware Settings",
        "tab": "3a6bb13f.c9703e",
        "order": 9,
        "disp": false,
        "width": 2,
        "collapse": false,
        "className": ""
    },
    {
        "id": "11cf057a75411666",
        "type": "ui_group",
        "name": "Instrument Metadata",
        "tab": "3a6bb13f.c9703e",
        "order": 12,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a83b50ca8f9aca73",
        "type": "ui_group",
        "name": "Reboot",
        "tab": "3a6bb13f.c9703e",
        "order": 10,
        "disp": false,
        "width": 2,
        "collapse": false,
        "className": ""
    },
    {
        "id": "cf91e683186c8470",
        "type": "ui_group",
        "name": "Shutdown",
        "tab": "3a6bb13f.c9703e",
        "order": 11,
        "disp": false,
        "width": 2,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a154503f7c48f4f2",
        "type": "ui_tab",
        "name": "Metadata",
        "icon": "fa-database",
        "order": 12,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "623af0a87f3fb6f1",
        "type": "ui_group",
        "name": "Manage the Metadata",
        "tab": "a154503f7c48f4f2",
        "order": 1,
        "disp": true,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2cfbd3d0b5d8477e",
        "type": "ui_group",
        "name": "Table Metadata",
        "tab": "a154503f7c48f4f2",
        "order": 2,
        "disp": false,
        "width": "16",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f48d09d4b6deee50",
        "type": "ui_group",
        "name": "Net Throw and Retrieval Locations",
        "tab": "737ec584.2eea2c",
        "order": 4,
        "disp": true,
        "width": 10,
        "collapse": false,
        "className": ""
    },
    {
        "id": "614405b228e411bf",
        "type": "ui_group",
        "name": "Wireless power control",
        "tab": "1b49ae0f.602d6a",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9398d5fb9d55df14",
        "type": "ui_group",
        "name": "Sample Collection",
        "tab": "737ec584.2eea2c",
        "order": 8,
        "disp": true,
        "width": 10,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f2ff8dad23c50917",
        "type": "ui_spacer",
        "z": "5195979a0d7a6b2a",
        "name": "spacer",
        "group": "2dbaeebc5146e634",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "76d234e5737c81ff",
        "type": "ui_spacer",
        "z": "5195979a0d7a6b2a",
        "name": "spacer",
        "group": "2dbaeebc5146e634",
        "order": 8,
        "width": 6,
        "height": 1
    },
    {
        "id": "2e297e79ad22871e",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "cef1e703.bcf3c8",
        "order": 4,
        "width": 10,
        "height": 1
    },
    {
        "id": "5e3e59fa74a662de",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "fc5e4e6f.5b1c8",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "71671ef2d8f065c8",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "4322c187.e73e5",
        "order": 8,
        "width": 10,
        "height": 1
    },
    {
        "id": "3a2c179635e4f4b4",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "b5d61bc7.54fe48",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "1cdd4f5fe702cbec",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "b5d61bc7.54fe48",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "9c32fce5b451bd47",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "b5d61bc7.54fe48",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "f0b9d413efc3590f",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "b5d61bc7.54fe48",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "c473d9a510b8160c",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "b5d61bc7.54fe48",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "8b99842e40413abc",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "b5d61bc7.54fe48",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "ffb3e1bf20ce7f59",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "70de8209.68416c",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "4a7de999a2244c74",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "b7919ae2.c01788",
        "order": 2,
        "width": 5,
        "height": 1
    },
    {
        "id": "967777840e5dbf45",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "fbd92986.1028c8",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "593202a23f9f617f",
        "type": "ui_spacer",
        "z": "b771c342.49603",
        "name": "spacer",
        "group": "fbd92986.1028c8",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "6465bdd5.15eb8c",
        "type": "file in",
        "z": "1c24ad9c.bebec2",
        "name": "",
        "filename": "/home/pi/PlanktoScope/metadata.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 490,
        "y": 60,
        "wires": [
            [
                "15ceb135.6628bf"
            ]
        ],
        "info": "# PlanktoScope Help\nThis Node will read the content of the file named **config.txt** containing all the input placeholders.\n"
    },
    {
        "id": "15ceb135.6628bf",
        "type": "json",
        "z": "1c24ad9c.bebec2",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 730,
        "y": 60,
        "wires": [
            [
                "ad541674.4791c8"
            ]
        ]
    },
    {
        "id": "ad541674.4791c8",
        "type": "function",
        "z": "1c24ad9c.bebec2",
        "name": "Global Set",
        "func": "for (const key in msg.payload) {\n    global.set(key, msg.payload[key]);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "3e9a33c.141384c",
        "type": "inject",
        "z": "1c24ad9c.bebec2",
        "name": "Load config",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "x": 170,
        "y": 40,
        "wires": [
            [
                "6465bdd5.15eb8c"
            ]
        ]
    },
    {
        "id": "f439663c.8abd3",
        "type": "ui_ui_control",
        "z": "1c24ad9c.bebec2",
        "name": "Connect Event",
        "events": "connect",
        "x": 900,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "75578e53f2ef0215",
        "type": "file",
        "z": "4ed26b8b.253504",
        "name": "",
        "filename": "/home/pi/PlanktoScope/metadata.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1335a1041e8f6888",
        "type": "json",
        "z": "4ed26b8b.253504",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 450,
        "y": 80,
        "wires": [
            [
                "75578e53f2ef0215"
            ]
        ]
    },
    {
        "id": "a59d26a378a6f5b0",
        "type": "function",
        "z": "4ed26b8b.253504",
        "name": "get config payload",
        "func": "var payload = {}\n\nconst keys = global.keys()\n\nkeys.forEach(function (key, index, array) {\n  payload[key] = global.get(key);\n})\n\nreturn {\"payload\": payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 80,
        "wires": [
            [
                "1335a1041e8f6888"
            ]
        ]
    },
    {
        "id": "4e78af2d.90be7",
        "type": "ui_ui_control",
        "z": "eaae323a.31b3",
        "name": "",
        "events": "change",
        "x": 1000,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "fe29c52bc2b15e1d",
        "type": "ui_button",
        "z": "eaae323a.31b3",
        "name": "Sample",
        "group": "6f97e7ae.270c48",
        "order": 1,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-eyedropper fa-5x",
        "payload": "{\"tab\":\"Sample\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 460,
        "y": 80,
        "wires": [
            [
                "edba505a6fdd5d5b"
            ]
        ]
    },
    {
        "id": "4eeced4aff392e2b",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "6f97e7ae.270c48",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "Sample",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 180,
        "y": 80,
        "wires": []
    },
    {
        "id": "cafe3b965af5b83f",
        "type": "ui_button",
        "z": "eaae323a.31b3",
        "name": "Optic Configuration",
        "group": "4e0cd5ea.17e59c",
        "order": 1,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-eye  fa-5x",
        "payload": "{\"tab\":\"Optical Configuration\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 430,
        "y": 120,
        "wires": [
            [
                "edba505a6fdd5d5b"
            ]
        ]
    },
    {
        "id": "d752ae73a95c387e",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "4e0cd5ea.17e59c",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "Optical Configuration",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 220,
        "y": 120,
        "wires": []
    },
    {
        "id": "84ecc8b2c4553c52",
        "type": "ui_button",
        "z": "eaae323a.31b3",
        "name": "Fluidic Acquisition",
        "group": "ef590206.24f6",
        "order": 1,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-flask fa-5x",
        "payload": "{\"tab\":\"Fluidic Acquisition\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 430,
        "y": 160,
        "wires": [
            [
                "edba505a6fdd5d5b"
            ]
        ]
    },
    {
        "id": "286ae4d230af1c7e",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "ef590206.24f6",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "Fluidic Acquisition",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 210,
        "y": 160,
        "wires": []
    },
    {
        "id": "24aedb8d468ebc29",
        "type": "ui_button",
        "z": "eaae323a.31b3",
        "name": "Segmentation",
        "group": "ae8f6620.073358",
        "order": 1,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-crop  fa-5x",
        "payload": "{\"tab\":\"Segmentation\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 440,
        "y": 200,
        "wires": [
            [
                "edba505a6fdd5d5b"
            ]
        ]
    },
    {
        "id": "1b514a0ef368f395",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "ae8f6620.073358",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "Segmentation",
        "label": "Segmentation",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 200,
        "y": 200,
        "wires": []
    },
    {
        "id": "a6c91b298a5ea0a8",
        "type": "ui_button",
        "z": "eaae323a.31b3",
        "name": "Gallery",
        "group": "196518b2.4d53b7",
        "order": 1,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-file-image-o  fa-5x",
        "payload": "{\"tab\":\"Gallery\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 460,
        "y": 240,
        "wires": [
            [
                "edba505a6fdd5d5b"
            ]
        ]
    },
    {
        "id": "c03028712e3d820e",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "196518b2.4d53b7",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "Gallery",
        "label": "Gallery",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 180,
        "y": 240,
        "wires": []
    },
    {
        "id": "bcd588c0f215d20b",
        "type": "ui_button",
        "z": "eaae323a.31b3",
        "name": "System Monitoring",
        "group": "777a7c33.fcd804",
        "order": 1,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-solid fa-thermometer-full  fa-5x",
        "payload": "{\"tab\":\"System Monitoring\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 430,
        "y": 280,
        "wires": [
            [
                "edba505a6fdd5d5b"
            ]
        ]
    },
    {
        "id": "7c6fb4e53bf618a0",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "777a7c33.fcd804",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "System Monitoring",
        "label": "System Monitoring",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 210,
        "y": 280,
        "wires": []
    },
    {
        "id": "949dc5904f899486",
        "type": "ui_button",
        "z": "eaae323a.31b3",
        "name": "Wifi",
        "group": "46ffc315ba40e148",
        "order": 1,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-wifi  fa-5x",
        "payload": "{\"tab\":\"Wifi\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 470,
        "y": 320,
        "wires": [
            [
                "edba505a6fdd5d5b"
            ]
        ]
    },
    {
        "id": "5f5bc037b16d0762",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "46ffc315ba40e148",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "Wifi",
        "label": "Wifi",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 170,
        "y": 320,
        "wires": []
    },
    {
        "id": "c3fa574ac831b92b",
        "type": "ui_button",
        "z": "eaae323a.31b3",
        "name": "Administration",
        "group": "c2be42455cd9a1c4",
        "order": 1,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-gear  fa-5x",
        "payload": "{\"tab\":\"Administration\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 440,
        "y": 360,
        "wires": [
            [
                "edba505a6fdd5d5b"
            ]
        ]
    },
    {
        "id": "365b7de5e23dea1e",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "c2be42455cd9a1c4",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "Administration",
        "label": "Administration",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 200,
        "y": 360,
        "wires": []
    },
    {
        "id": "ee943d671be44225",
        "type": "ui_button",
        "z": "eaae323a.31b3",
        "name": "Hardware Settings",
        "group": "0f9d334d08d20d6b",
        "order": 1,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-microchip  fa-5x",
        "payload": "{\"tab\":\"Hardware Settings\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 430,
        "y": 400,
        "wires": [
            [
                "edba505a6fdd5d5b"
            ]
        ]
    },
    {
        "id": "f31897999d5d0bf6",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "0f9d334d08d20d6b",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "Hardware Settings",
        "label": "Hardware Settings",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 210,
        "y": 400,
        "wires": []
    },
    {
        "id": "09044da761150d4a",
        "type": "ui_button",
        "z": "eaae323a.31b3",
        "name": "Load",
        "group": "11cf057a75411666",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Load from metada",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Loading...",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 210,
        "y": 720,
        "wires": [
            [
                "ab012c06222d5c99"
            ]
        ]
    },
    {
        "id": "b511fa878d55b303",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "11cf057a75411666",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Instrument ID",
        "format": "{{msg.payload.acq_instrument_id}}",
        "layout": "row-spread",
        "className": "",
        "x": 780,
        "y": 820,
        "wires": []
    },
    {
        "id": "3ab96b29ad5330ea",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "11cf057a75411666",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Instrument type",
        "format": "{{msg.payload.acq_instrument}}",
        "layout": "row-spread",
        "className": "",
        "x": 780,
        "y": 660,
        "wires": []
    },
    {
        "id": "b772791e9e1fa86f",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "11cf057a75411666",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Manufacturer",
        "format": "{{msg.payload.inst_manufacturer}}",
        "layout": "row-spread",
        "className": "",
        "x": 770,
        "y": 740,
        "wires": []
    },
    {
        "id": "49265dd55a3d74a9",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "11cf057a75411666",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Serial Number",
        "format": "{{msg.payload.inst_serial_number}}",
        "layout": "row-spread",
        "className": "",
        "x": 780,
        "y": 780,
        "wires": []
    },
    {
        "id": "a1b01adb2328d8f6",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "11cf057a75411666",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Model",
        "format": "{{msg.payload.inst_model}}",
        "layout": "row-spread",
        "className": "",
        "x": 750,
        "y": 700,
        "wires": []
    },
    {
        "id": "1eb543129806cbb0",
        "type": "ui_button",
        "z": "eaae323a.31b3",
        "name": "Reboot",
        "group": "a83b50ca8f9aca73",
        "order": 1,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "fa-repeat fa-5x",
        "payload": "reboot",
        "payloadType": "str",
        "topic": "reboot",
        "topicType": "str",
        "x": 460,
        "y": 480,
        "wires": [
            [
                "f7855aef2c2e31b2"
            ]
        ]
    },
    {
        "id": "af26c5ad65b6b219",
        "type": "ui_button",
        "z": "eaae323a.31b3",
        "name": "Shutdown",
        "group": "cf91e683186c8470",
        "order": 1,
        "width": 2,
        "height": 2,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "fa-power-off fa-5x",
        "payload": "shutdown",
        "payloadType": "str",
        "topic": "shutdown",
        "topicType": "str",
        "x": 460,
        "y": 520,
        "wires": [
            [
                "f7855aef2c2e31b2"
            ]
        ]
    },
    {
        "id": "a4aecf4439b241d1",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "a83b50ca8f9aca73",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "Reboot",
        "label": "Reboot",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 180,
        "y": 480,
        "wires": []
    },
    {
        "id": "ece5360605499ff4",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "cf91e683186c8470",
        "order": 2,
        "width": 2,
        "height": 1,
        "name": "Shutdown",
        "label": "Shutdown",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 180,
        "y": 520,
        "wires": []
    },
    {
        "id": "e7a7bb9ad10a388b",
        "type": "ui_text",
        "z": "eaae323a.31b3",
        "group": "11cf057a75411666",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Instrument Name",
        "format": "{{msg.payload.acq_instrument_id}}",
        "layout": "row-spread",
        "className": "",
        "x": 790,
        "y": 620,
        "wires": []
    },
    {
        "id": "ab012c06222d5c99",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "eaae323a.31b3",
        "name": "",
        "x": 480,
        "y": 720,
        "wires": [
            [
                "e4a8d854e7271119"
            ]
        ]
    },
    {
        "id": "f7855aef2c2e31b2",
        "type": "link out",
        "z": "eaae323a.31b3",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "6acdec87409926a1"
        ],
        "x": 635,
        "y": 500,
        "wires": []
    },
    {
        "id": "4557d689.a4fa88",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_ship",
        "label": "Name of the ship",
        "tooltip": "",
        "group": "3e1ba03d.f01d8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "sample_ship",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 810,
        "y": 80,
        "wires": [
            [
                "de2cd9caa0e28a7c"
            ]
        ]
    },
    {
        "id": "fcfc31ae.af3af",
        "type": "ui_dropdown",
        "z": "b771c342.49603",
        "name": "sample_sampling_gear",
        "label": "Sampling gear*",
        "tooltip": "",
        "place": "Choose from list",
        "group": "9398d5fb9d55df14",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Concentrated (net and/or filter)",
                "value": "net",
                "type": "str"
            },
            {
                "label": "Not concentrated (Raw water)",
                "value": "raw",
                "type": "str"
            },
            {
                "label": "Culture",
                "value": "culture",
                "type": "str"
            },
            {
                "label": "Test",
                "value": "test",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "sample_sampling_gear",
        "topicType": "str",
        "className": "",
        "x": 770,
        "y": 200,
        "wires": [
            [
                "de2cd9caa0e28a7c"
            ]
        ]
    },
    {
        "id": "82c5fc77.59c97",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_operator",
        "label": "Name of the operator*",
        "tooltip": "",
        "group": "3e1ba03d.f01d8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "sample_operator",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 790,
        "y": 160,
        "wires": [
            [
                "52af9ac0.60eb24",
                "de2cd9caa0e28a7c"
            ]
        ]
    },
    {
        "id": "9c882b37.fde668",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_project",
        "label": "Name of the project*",
        "tooltip": "",
        "group": "3e1ba03d.f01d8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "sample_project",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 800,
        "y": 40,
        "wires": [
            [
                "de2cd9caa0e28a7c"
            ]
        ]
    },
    {
        "id": "94eb4221.9b92c",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_id",
        "label": "Station ID*",
        "tooltip": "",
        "group": "3e1ba03d.f01d8",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "sample_id",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 810,
        "y": 120,
        "wires": [
            [
                "de2cd9caa0e28a7c"
            ]
        ]
    },
    {
        "id": "9f501f49.45645",
        "type": "function",
        "z": "b771c342.49603",
        "name": "set global",
        "func": "global.set(msg.topic,msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 300,
        "wires": [
            [
                "326fb733cc56e902"
            ]
        ]
    },
    {
        "id": "222c851d.5d0a3a",
        "type": "ui_ui_control",
        "z": "b771c342.49603",
        "name": "",
        "events": "change",
        "x": 320,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "52f6b103.1efb6",
        "type": "ui_toast",
        "z": "b771c342.49603",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 710,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "986d960a.c75908",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Check form",
        "func": "var sample_project = global.get(\"sample_project\");\nvar sample_id = global.get(\"sample_id\");\nvar sample_operator = global.get(\"sample_operator\");\nvar sample_sampling_gear = global.get(\"sample_sampling_gear\");\nvar object_lat = global.get(\"object_lat\");\nvar object_lon = global.get(\"object_lon\");\nvar object_date = global.get(\"object_date\");\nvar object_time = global.get(\"object_time\");\nif (sample_project === undefined || sample_project === \"\") {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Sample project\"\n    return [null, msg];\n}\n\nelse if (sample_id === undefined || sample_id === \"\") {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Sample ID\"\n    return [null, msg];\n}\n\nelse if (sample_operator === undefined || sample_operator === \"\") {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Sample operator\"\n    return [null, msg];\n}\n\nelse if (sample_sampling_gear === undefined || sample_sampling_gear === \"\") {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Sample sampling gear\"\n    return [null, msg];\n}\n\nelse if (object_lat === undefined || object_lat === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Latitude of sample\"\n    return [null, msg];\n}\n\nelse if (object_lon === undefined || object_lon === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Longitude of sample\"\n    return [null, msg];\n}\n\nelse if (object_date === undefined || object_date === \"\") {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Date of sample\"\n    return [null, msg];\n}\n\nelse if (object_time === undefined || object_time === \"\") {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Time of sample\"\n    return [null, msg];\n}\nelse if (sample_sampling_gear.startsWith(\"net\")) {\n    var object_lat_end = global.get(\"object_lat_end\");\n    var object_lon_end = global.get(\"object_lon_end\");\n    var object_date_end = global.get(\"object_date_end\");\n    var object_time_end = global.get(\"object_time_end\");\n    var sample_gear_net_opening = global.get(\"sample_gear_net_opening\");\n\n    if (object_lat_end === undefined || object_lat_end === null) {\n        msg.topic = \"Missing entry :\"\n        msg.payload = \"Latitude of retrieval\"\n        return [null, msg];\n    }\n\n    else if (object_lon_end === undefined || object_lon_end === null) {\n        msg.topic = \"Missing entry :\"\n        msg.payload = \"Longitude of retrieval\"\n        return [null, msg];\n    }\n\n    else if (object_date_end === undefined || object_date_end === \"\") {\n        msg.topic = \"Missing entry :\"\n        msg.payload = \"Date of retrieval\"\n        return [null, msg];\n    }\n\n    else if (object_time_end === undefined || object_time_end === \"\") {\n        msg.topic = \"Missing entry :\"\n        msg.payload = \"Time of retrieval\"\n        return [null, msg];\n    }\n\n    else if (sample_gear_net_opening === undefined || sample_gear_net_opening === \"\") {\n        msg.topic = \"Missing entry :\"\n        msg.payload = \"Net opening dimension\"\n        return [null, msg];\n    }\n\n    if (sample_sampling_gear == \"net_decknet\") {\n        var sample_total_volume = global.get(\"sample_total_volume\");\n        if (sample_total_volume === undefined || sample_total_volume === \"\") {\n            msg.topic = \"Missing entry :\"\n            msg.payload = \"Decknet flowmeter readings\"\n            return [null, msg];\n        }\n    }\n}\nmsg.topic = \"config_save\"\nmsg.payload = { \"tab\": \"Optical Configuration\" };\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1160,
        "wires": [
            [
                "16426cdfcadc3056"
            ],
            [
                "52f6b103.1efb6"
            ]
        ],
        "outputLabels": [
            "message",
            "error"
        ]
    },
    {
        "id": "18f44504.cac66b",
        "type": "gpsd",
        "z": "b771c342.49603",
        "name": "",
        "hostname": "127.0.0.1",
        "port": "2947",
        "tpv": true,
        "sky": false,
        "info": false,
        "device": false,
        "gst": false,
        "att": false,
        "x": 230,
        "y": 1400,
        "wires": [
            [
                "8a3e288349643aae"
            ]
        ]
    },
    {
        "id": "726a7822.cd6298",
        "type": "ui_ui_control",
        "z": "b771c342.49603",
        "name": "",
        "events": "change",
        "x": 700,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "16de754c.cc969b",
        "type": "ui_button",
        "z": "b771c342.49603",
        "name": "",
        "group": "5517c651.b2f668",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Previous",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "icon": "keyboard_return",
        "payload": "{\"tab\":\"Home\"}",
        "payloadType": "json",
        "topic": "",
        "x": 160,
        "y": 1120,
        "wires": [
            [
                "222c851d.5d0a3a"
            ]
        ]
    },
    {
        "id": "84f3d040.5f7ea",
        "type": "ui_button",
        "z": "b771c342.49603",
        "name": "",
        "group": "5517c651.b2f668",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Continue",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_tab",
        "payload": "{\"tab\":\"Home\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 160,
        "y": 1160,
        "wires": [
            [
                "986d960a.c75908"
            ]
        ]
    },
    {
        "id": "a3272681.f271c8",
        "type": "function",
        "z": "b771c342.49603",
        "name": "get sample_sampling_gear",
        "func": "msg.topic = \"sample_sampling_gear\"\nif (msg.payload.sample_sampling_gear === undefined){\n    msg.payload = \"net\";\n}\nelse\n{\n    msg.payload = msg.payload.sample_sampling_gear;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 200,
        "wires": [
            [
                "fcfc31ae.af3af"
            ]
        ]
    },
    {
        "id": "a6907a38.f6611",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "b771c342.49603",
        "name": "",
        "env": [],
        "x": 100,
        "y": 320,
        "wires": [
            [
                "1729e84341dbb369"
            ]
        ]
    },
    {
        "id": "7116e906.9f50f",
        "type": "ui_text",
        "z": "b771c342.49603",
        "group": "fc5e4e6f.5b1c8",
        "order": 1,
        "width": 10,
        "height": 1,
        "name": "GPS Status Display",
        "label": "GPS Status:",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "x": 730,
        "y": 1240,
        "wires": []
    },
    {
        "id": "9c7f7fc9.c8d3a",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "object_depth_max",
        "label": "Max sampling depth (m)",
        "tooltip": "in m",
        "group": "9398d5fb9d55df14",
        "order": 4,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "object_depth_max",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 790,
        "y": 280,
        "wires": [
            [
                "de2cd9caa0e28a7c"
            ]
        ]
    },
    {
        "id": "317eeeb7.8d3042",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "object_depth_min",
        "label": "Min sampling depth (m)",
        "tooltip": "in m",
        "group": "9398d5fb9d55df14",
        "order": 3,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "object_depth_min",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 790,
        "y": 320,
        "wires": [
            [
                "de2cd9caa0e28a7c"
            ]
        ]
    },
    {
        "id": "52af9ac0.60eb24",
        "type": "link out",
        "z": "b771c342.49603",
        "name": "Sample Operator",
        "links": [
            "35eb925e.5f8016"
        ],
        "x": 995,
        "y": 160,
        "wires": []
    },
    {
        "id": "cbb123ab.fd3428",
        "type": "ui_ui_control",
        "z": "b771c342.49603",
        "name": "show/hide net groups",
        "events": "change",
        "x": 1280,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "642ff403.1ed91c",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_concentrated_sample_volume",
        "label": "Concentrated sample volume (mL)",
        "tooltip": "Volume extracted from the net codend (in mL)",
        "group": "9398d5fb9d55df14",
        "order": 9,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "sample_concentrated_sample_volume",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 730,
        "y": 480,
        "wires": [
            [
                "de2cd9caa0e28a7c"
            ]
        ]
    },
    {
        "id": "e967b844.46aa48",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_gear_net_opening",
        "label": "Net opening dimension (mm)",
        "tooltip": "Size of the net mouth opening (in mm)",
        "group": "cf5d9f0e.d57e7",
        "order": 1,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "sample_gear_net_opening",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 760,
        "y": 360,
        "wires": [
            [
                "de2cd9caa0e28a7c"
            ]
        ]
    },
    {
        "id": "c0ce5626.b6c5",
        "type": "ui_toast",
        "z": "b771c342.49603",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1250,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "c33f1124.af6688",
        "type": "ui_form",
        "z": "b771c342.49603",
        "name": "single_location",
        "label": "Single Location",
        "group": "f48d09d4b6deee50",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Latitude (36.574439°N or 36°57.4439'N)",
                "value": "object_lat",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Longitude (110.42100°W or 110°4.2100'W)",
                "value": "object_lon",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Date (YYYY-MM-DD, UTC)",
                "value": "object_date",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Time (HH:MM(:SS), UTC 24h)",
                "value": "object_time",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "object_lat": "",
            "object_lon": "",
            "object_date": "",
            "object_time": ""
        },
        "payload": "",
        "submit": "Validate",
        "cancel": "Reset",
        "topic": "single_location",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 500,
        "y": 880,
        "wires": [
            [
                "1d4dc8f8b427ac1d"
            ]
        ]
    },
    {
        "id": "358908cd.416ab",
        "type": "ui_form",
        "z": "b771c342.49603",
        "name": "net_throw_location",
        "label": "Net Location",
        "group": "cf5d9f0e.d57e7",
        "order": 3,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Latitude (36.9574°N or 36°57.4439'N)",
                "value": "object_lat",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Longitude (110.0702°W or 110°4.2100'W)",
                "value": "object_lon",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Date (YYYY-MM-DD UTC)",
                "value": "object_date",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Time (HH:MM, UTC 24h)",
                "value": "object_time",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Starting Latitude (36.9574°N or 36°57.4439'N)",
                "value": "object_lat_end",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Ending Longitude (110.0702°W or 110°4.2100'W)",
                "value": "object_lon_end",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Date (YYYY-MM-DD UTC)",
                "value": "object_date_end",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Time (HH:MM, UTC 24h)",
                "value": "object_time_end",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "object_lat": "",
            "object_lon": "",
            "object_date": "",
            "object_time": "",
            "object_lat_end": "",
            "object_lon_end": "",
            "object_date_end": "",
            "object_time_end": ""
        },
        "payload": "",
        "submit": "Validate",
        "cancel": "",
        "topic": "net_throw_location",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 490,
        "y": 940,
        "wires": [
            [
                "0f4d8caad27e928f"
            ]
        ]
    },
    {
        "id": "14658615.47c862",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Validate Location / Timestamp",
        "func": "// Code added here will be run once\n// whenever the node is started.\nfunction ConvertDDMMToDD(input) {\n    // Input Format 36°57.4439'N, 110°4.2100'W\n    // From https://stackoverflow.com/questions/1140189/converting-latitude-and-longitude-to-decimal-values\n    if (! input.match(/\\d+°\\d+\\.*\\d*\\'?[NSEW]/)){\n    \treturn \"parsing error 1\"\n    }\n    var parts = input.split(/[^\\d.]+/)\n    if (parts.length < 2){\n    \treturn \"parsing error 2\"\n    }\n    var dd = Number(parts[0]) + Number(parts[1])/60\n    return dd.toFixed(6) + input.slice(-1)\n}\n\nfunction ValidateCoordinates(input, lat){\n    // Input Format 36.574439°N, 110.42100°W\n    // Or 36°57.4439'N, 110°4.2100'W\n    if (input.match(/\\d°\\d/)){\n        input = ConvertDDMMToDD(input)\n    }\n    \n    var error = {}\n\n    if (input.startsWith(\"parsing error\")){\n        error.topic = \"Error with the \" + input\n        error.payload = \"You need to respect the format example, 36.574439°N or 36°57.4439'N\"\n        return [null, error]\n    }\n    \n    var direction = input.match(/[NSEW]/)\n    var position = input.match(/[\\+\\-\\d\\.]+/)\n    \n    if (direction === null){\n        error.topic = \"Error with the \"\n        error.payload = \"You need to explicitely enter N/S/E/W\"\n        return [null, error]\n    }\n    \n    // Test that position is only made of digits!\n    if(/^[\\+\\-]/.test(position)){\n        error.topic = \"Error with the \"\n        error.payload = \"Use of +/- sign is inconsistent with N/S/E/W letter! Please only use N/S/E/W!\"\n        return [null, error]\n    }\n    \n    var dd = Number(position)\n    if (lat){\n        // Check latitude\n        if (direction == \"S\" || direction == \"N\") {\n            if (dd>90.0){\n                error.topic = \"Error with the \"\n                error.payload = \"Latitude is more than 90°\"\n                return [null, error]\n            }\n        }\n        if (direction == \"W\" || direction == \"E\") {\n            error.topic = \"Error with the \"\n            error.payload = \"This is not a Latitude!\"\n            return [null, error]\n        }\n    }\n    else{\n        // Check longitude\n        if (direction == \"W\" || direction == \"E\") {\n            if (dd>180.0){\n                error.topic = \"Error with the \"\n                error.payload = \"Longitude is more than 180°\"\n                return [null, error]\n            }\n        }\n        if (direction == \"N\" || direction == \"S\") {\n            error.topic = \"Error with the \"\n            error.payload = \"This is not a Longitude!\"\n            return [null, error]\n        }\n    }\n    \n    if (direction == \"S\" || direction == \"W\") {\n        dd = dd * -1\n    } // Don't do anything for N or E\n    return [dd.toFixed(4), null]\n    \n}\n\nfunction ValidateDate(input){\n    // Input Format 2020-12-25\n    var error = {};\n    \n    if (! /20\\d{2}-[0-1]\\d-[0-3]\\d/.test(input)){\n        error.topic = \"Error with the date\";\n        error.payload = \"The date should respect the ISO format YYYY-MM-DD\";\n        return [null, error];\n    }\n    else {\n        var date = input.match(/\\d+/g);\n        if (!((2000 < date[0]) && (date[0] < 2100))){\n            error.topic = \"Error with the date\"\n            error.payload = \"The year should be between 2000 and 2100\"\n            return [null, error]\n        }\n        else if (!((0 < date[1]) && (date[1] <= 12))){\n            error.topic = \"Error with the date\"\n            error.payload = \"The month should be between 01 and 12\"\n            return [null, error]\n        }\n        else if (!((0 < date[2]) && (date[2] <= 31))){\n            error.topic = \"Error with the date\"\n            error.payload = \"The day should be between 01 and 31\"\n            return [null, error]\n        }\n    }\n    return [input.replace(/-/g, ''), null]\n}\n\nfunction ValidateTime(input){\n    // Input Format 12:00\n    var error = {}\n    \n    if (! /[0-2]?\\d:[0-5]\\d/.test(input)){\n        error.topic = \"Error with the time\"\n        error.payload = \"The date should respect the ISO format HH:MM\"\n        return [null, error]\n    }\n    else {\n        var time = input.match(/\\d+/g)\n        \n        if (!((0 <= time[0]) && (time[0] < 24))){\n            error.topic = \"Error with the time\"\n            error.payload = \"The hours should be 0 and 23.\"\n            return [null, error]\n        }\n        else if (!((0 <= time[1]) && (time[1] < 60))){\n            error.topic = \"Error with the time\"\n            error.payload = \"The minutes should be between 0 and 59\"\n            return [null, error]\n        }\n    }\n    return [input.replace(/:/g, ''), null]\n}\n\n\nvar ret\nvar payload_for_form = {payload:{}}\nmsg.valid = false\n\nif (msg.topic == \"culture_timestamp\"){\n    ret = ValidateDate(msg.payload.object_date)\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" of the sample\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_date\", ret[0])\n    \n    ret = ValidateTime(msg.payload.object_time)\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" of the sample\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_time\", ret[0])\n    return [{topic: \"Date and time format valid!\", payload: \"All good!\", valid: true}, payload_for_form]\n}\nelse if (msg.topic == \"net_retrieval_location\"){\n    ret = ValidateCoordinates(msg.payload.object_lat_end, true);\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" Latitude\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_lat_end\", ret[0])\n    ret = ValidateCoordinates(msg.payload.object_lon_end, false)\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" Longitude\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_lon_end\", ret[0]);\n    \n    ret = ValidateDate(msg.payload.object_date_end)\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" of the sample retrieval\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_date_end\", ret[0])\n    \n    ret = ValidateTime(msg.payload.object_time_end)\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" of the sample retrieval\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_time_end\", ret[0])\n}\nelse{\n    ret = ValidateCoordinates(msg.payload.object_lat, true);\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" Latitude\";\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_lat\", ret[0]);\n    payload_for_form.payload[\"object_lat_end\"] = msg.payload.object_lat;\n    \n    ret = ValidateCoordinates(msg.payload.object_lon, false);\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" Longitude\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_lon\", ret[0])\n    payload_for_form.payload[\"object_lon_end\"] = msg.payload.object_lon;\n\n    ret = ValidateDate(msg.payload.object_date)\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" of the sample\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_date\", ret[0])\n    payload_for_form.payload[\"object_date_end\"] = msg.payload.object_date;\n    \n    ret = ValidateTime(msg.payload.object_time)\n    if (ret[1] !== null){\n        msg.topic = ret[1].topic + \" of the sample\"\n        msg.payload = ret[1].payload\n        return [msg, null]\n    }\n    global.set(\"object_time\", ret[0])\n    payload_for_form.payload[\"object_time_end\"] = msg.payload.object_time;\n}\nreturn [{topic: \"Coordinates valid!\", payload: \"All good!\", valid: true}, payload_for_form]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 920,
        "wires": [
            [
                "c0ce5626.b6c5"
            ],
            []
        ],
        "inputLabels": [
            "Location form data"
        ],
        "outputLabels": [
            "Message",
            "Location validated"
        ]
    },
    {
        "id": "f408a273.4fb538",
        "type": "function",
        "z": "b771c342.49603",
        "name": "get sample_gear_net_opening",
        "func": "if (msg.payload.sample_gear_net_opening === null || msg.payload.sample_gear_net_opening === undefined){\n    msg.payload = 0;\n    global.set(\"sample_gear_net_opening\",msg.payload);\n}\nelse\n{\n    msg.payload = msg.payload.sample_gear_net_opening;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 360,
        "wires": [
            [
                "e967b844.46aa48"
            ]
        ]
    },
    {
        "id": "8dff1648.82e42",
        "type": "function",
        "z": "b771c342.49603",
        "name": "get object_depth_max",
        "func": "if (msg.payload.object_depth_max === null || msg.payload.object_depth_max === undefined){\n    msg.payload = 0;\n    global.set(\"object_depth_max\",msg.payload);\n}\nelse\n{\n    msg.payload = msg.payload.object_depth_max;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 280,
        "wires": [
            [
                "9c7f7fc9.c8d3a"
            ]
        ]
    },
    {
        "id": "9f04c5ec.75f3d8",
        "type": "function",
        "z": "b771c342.49603",
        "name": "get object_depth_min",
        "func": "if (msg.payload.object_depth_min === null || msg.payload.object_depth_min === undefined){\n    msg.payload = 0;\n    global.set(\"object_depth_min\",msg.payload);\n}\nelse\n{\n    msg.payload = msg.payload.object_depth_min;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 320,
        "wires": [
            [
                "317eeeb7.8d3042"
            ]
        ]
    },
    {
        "id": "9a18a4b4.178448",
        "type": "function",
        "z": "b771c342.49603",
        "name": "calculate sample_total_volume",
        "func": "\n/*object_lat = 33.95 \nobject_lon = 118.4  \nobject_lat_end = 40.6333 \nobject_lon_end = 73.78333\nsample_gear_net_opening = 40*/\n\n// Copyright 1997 Ed Williams. All rights reserved\n// Adapted by Romain Bazile - Ocean Trotter - 01-2021\n\nvar decpl = 4  // Dec places of minutes output\n\nvar ellipse = { \"name\": \"WSG84\", \"a\": 6378.137 / 1.852, \"invf\": 298.257223563 }\n\nfunction ComputeDistance(lat1, lon1, lat2, lon2) {\n    var d, crs12, crs21\n    var argacos\n    var a, invf\n\n    // lat and lon in radian\n    lat1 = (Math.PI / 180) * lat1\n    lat2 = (Math.PI / 180) * lat2\n    lon1 = (Math.PI / 180) * lon1\n    lon2 = (Math.PI / 180) * lon2\n\n    //alert(\"lat1=\" + lat1 + \"lon1=\" + lon1 +\"\\nlat2=\" +lat2+ \"lon2=\"+lon2)\n\n    /* get distance conversion factor */\n    var dc = 1.852 //km\n    //alert(\"dc=\" +dc)\n\n    //showProps(ellipse,\"ellipse\")\n\n    // elliptic code\n    d = crsdist_ell(lat1, -lon1, lat2, -lon2, ellipse)  // ellipse uses East negative\n    d = d * dc  // go to physical units\n\n    //alert(\"d=\"+d+\"  crs12=\"+crs12+\"   crs21=\"+crs21)\n    return d\n}\n\nfunction crsdist(lat1, lon1, lat2, lon2) { // radian args\n    /* compute course and distance (spherical) */\n    if ((lat1 + lat2 === 0) && (Math.abs(lon1 - lon2) == Math.PI) &&\n        (Math.abs(lat1) != (Math.PI / 180) * 90)) {\n        console.log(\"Course between antipodal points is undefined\")\n    }\n\n    var d = Math.acos(Math.sin(lat1) * Math.sin(lat2) + Math.cos(lat1) * Math.cos(lat2) * Math.cos(lon1 - lon2))\n    return d\n}\n\nfunction crsdist_ell(glat1, glon1, glat2, glon2, ellipse) {\n    // glat1 initial geodetic latitude in radians N positive \n    // glon1 initial geodetic longitude in radians E positive \n    // glat2 final geodetic latitude in radians N positive \n    // glon2 final geodetic longitude in radians E positive \n    var a = ellipse.a\n    var f = 1 / ellipse.invf\n    //alert(\"a=\"+a+\" f=\"+f)\n    var r, tu1, tu2, cu1, su1, cu2, s1, b1, f1\n    var x, sx, cx, sy, cy, y, sa, c2a, cz, e, c, d\n    var EPS = 0.00000000005\n    var faz, baz, s\n    var iter = 1\n    var MAXITER = 100\n    if ((glat1 + glat2 === 0) && (Math.abs(glon1 - glon2) == Math.PI)) {\n        console.log(\"Course and distance between antipodal points is undefined\")\n        glat1 = glat1 + 0.00001 // allow algorithm to complete\n    }\n    if (glat1 == glat2 && (glon1 == glon2 || Math.abs(Math.abs(glon1 - glon2) - 2 * Math.PI) < EPS)) {\n        console.log(\"Points 1 and 2 are identical- course undefined\")\n        // @ts-ignore\n        var out = new MakeArray(0)\n        out.d = 0\n        out.crs12 = 0\n        out.crs21 = Math.PI\n        return out\n    }\n    r = 1 - f\n    tu1 = r * Math.tan(glat1)\n    tu2 = r * Math.tan(glat2)\n    cu1 = 1 / Math.sqrt(1 + tu1 * tu1)\n    su1 = cu1 * tu1\n    cu2 = 1 / Math.sqrt(1 + tu2 * tu2)\n    s1 = cu1 * cu2\n    b1 = s1 * tu2\n    f1 = b1 * tu1\n    x = glon2 - glon1\n    d = x + 1 // force one pass\n    while ((Math.abs(d - x) > EPS) && (iter < MAXITER)) {\n        iter = iter + 1\n        sx = Math.sin(x)\n        //       alert(\"sx=\"+sx)\n        cx = Math.cos(x)\n        tu1 = cu2 * sx\n        tu2 = b1 - su1 * cu2 * cx\n        sy = Math.sqrt(tu1 * tu1 + tu2 * tu2)\n        cy = s1 * cx + f1\n        y = atan2(sy, cy)\n        sa = s1 * sx / sy\n        c2a = 1 - sa * sa\n        cz = f1 + f1\n        if (c2a > 0)\n            cz = cy - cz / c2a\n        e = cz * cz * 2 - 1\n        c = ((-3 * c2a + 4) * f + 4) * c2a * f / 16\n        d = x\n        x = ((e * cy * c + cz) * sy * c + y) * sa\n        x = (1 - c) * x * f + glon2 - glon1\n    }\n    x = Math.sqrt((1 / (r * r) - 1) * c2a + 1)\n    x += 1\n    x = (x - 2) / x\n    c = 1 - x\n    c = (x * x / 4 + 1) / c\n    d = (0.375 * x * x - 1) * x\n    x = e * cy\n    d = ((((sy * sy * 4 - 3) * (1 - e - e) * cz * d / 6 - x) * d / 4 + cz) * sy * d + y) * c * a * r\n    if (Math.abs(iter - MAXITER) < EPS) {\n        console.log(\"Algorithm did not converge\")\n    }\n    return d\n}\n\n\n//***************Utility***************\nfunction atan2(y, x) {\n    var out\n    if (x < 0) { out = Math.atan(y / x) + Math.PI }\n    if ((x > 0) && (y >= 0)) { out = Math.atan(y / x) }\n    if ((x > 0) && (y < 0)) { out = Math.atan(y / x) + 2 * Math.PI }\n    if ((x === 0) && (y > 0)) { out = Math.PI / 2 }\n    if ((x === 0) && (y < 0)) { out = 3 * Math.PI / 2 }\n    if ((x === 0) && (y === 0)) {\n        console.log(\"atan2(0,0) undefined\")\n        out = 0\n    }\n    return out\n}\n\nfunction showProps(obj, objName) {\n    var result = \"\"\n    for (var i in obj) {\n        result += objName + \".\" + i + \" = \" + obj[i] + \"\\n\"\n    }\n    console.log(result)\n}\n\n\nif (msg.valid) {\n    msg.topic = \"sample_total_volume\"\n\n    var object_lat_end = global.get(\"object_lat_end\")\n    var object_lon_end = global.get(\"object_lon_end\")\n    var sample_sampling_gear = global.get(\"sample_sampling_gear\")\n\n    if (sample_sampling_gear.startsWith(\"net\") && sample_sampling_gear != \"net_decknet\") {\n        if (!(isNaN(object_lat_end) && isNaN(object_lon_end))) {\n            var object_lat = global.get(\"object_lat\")\n            var object_lon = global.get(\"object_lon\")\n            var sample_gear_net_opening = global.get(\"sample_gear_net_opening\");\n\n            var distance_km = ComputeDistance(object_lat, object_lon, object_lat_end, object_lon_end)\n\n            var sample_total_volume = distance_km * (Math.PI * (sample_gear_net_opening / 2) * (sample_gear_net_opening / 2)) // liters\n            sample_total_volume = Math.round(sample_total_volume + Number.EPSILON)\n            msg.payload = sample_total_volume\n            return msg\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1000,
        "wires": [
            [
                "4f6afc5a.81e454"
            ]
        ]
    },
    {
        "id": "4fb4e0ad.c417c",
        "type": "ui_text",
        "z": "b771c342.49603",
        "group": "fc5e4e6f.5b1c8",
        "order": 6,
        "width": 5,
        "height": 1,
        "name": "Latitude",
        "label": "Latitude",
        "format": "{{msg.payload.lat.deg}}&deg{{msg.payload.lat.min}}'{{msg.payload.lat.sec}}{{msg.payload.lat.dir}}",
        "layout": "col-center",
        "x": 700,
        "y": 1280,
        "wires": []
    },
    {
        "id": "8d2b5026.13e6e8",
        "type": "ui_text",
        "z": "b771c342.49603",
        "group": "fc5e4e6f.5b1c8",
        "order": 7,
        "width": 5,
        "height": 1,
        "name": "Longitude",
        "label": "Longitude",
        "format": "{{msg.payload.lon.deg}}&deg{{msg.payload.lon.min}}'{{msg.payload.lon.sec}}{{msg.payload.lon.dir}}",
        "layout": "col-center",
        "x": 700,
        "y": 1320,
        "wires": []
    },
    {
        "id": "258b4562.9f778a",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Convert DD to DMS",
        "func": "function ConvertDDToDMS(D, lng){\n    // from https://stackoverflow.com/a/5786281/2108279\n    return {\n        dir : D<0?lng?'W':'S':lng?'E':'N',\n        deg : 0|(D<0?D=-D:D),\n        min : 0|D%1*60,\n        sec :(0|D*60%1*6000)/100\n    };\n}\n\nmsg.payload = {\n    \"lat\":ConvertDDToDMS(msg.payload.lat, false),\n    \"lon\":ConvertDDToDMS(msg.payload.lon, true)\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 500,
        "y": 1300,
        "wires": [
            [
                "4fb4e0ad.c417c",
                "8d2b5026.13e6e8"
            ]
        ]
    },
    {
        "id": "7c4ce5f3.62dd5c",
        "type": "ui_text",
        "z": "b771c342.49603",
        "group": "fc5e4e6f.5b1c8",
        "order": 4,
        "width": 2,
        "height": 1,
        "name": "Speed",
        "label": "Speed",
        "format": "{{msg.payload}} kts",
        "layout": "col-center",
        "x": 690,
        "y": 1360,
        "wires": []
    },
    {
        "id": "54e37580.fdc31c",
        "type": "ui_text",
        "z": "b771c342.49603",
        "group": "fc5e4e6f.5b1c8",
        "order": 5,
        "width": 2,
        "height": 1,
        "name": "Direction",
        "label": "Direction",
        "format": "{{msg.payload.track}} °",
        "layout": "col-center",
        "x": 700,
        "y": 1400,
        "wires": []
    },
    {
        "id": "cc21ca16.b92928",
        "type": "function",
        "z": "b771c342.49603",
        "name": "GPS Mode",
        "func": "switch (msg.payload.mode){\n case 1:msg.payload = \"No Fix\"; break\n case 2:msg.payload = \"2D Fix\"; break\n case 3:msg.payload = \"3D Fix\"; break\n default: msg.payload = \"No info\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 1240,
        "wires": [
            [
                "7116e906.9f50f"
            ]
        ]
    },
    {
        "id": "4a4de52c.cf2884",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Speed conversion",
        "func": "msg.payload = (0|msg.payload.speed) * 1.9438\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 490,
        "y": 1360,
        "wires": [
            [
                "7c4ce5f3.62dd5c"
            ]
        ]
    },
    {
        "id": "35ad311f.344c76",
        "type": "ui_text",
        "z": "b771c342.49603",
        "group": "fc5e4e6f.5b1c8",
        "order": 2,
        "width": 5,
        "height": 1,
        "name": "Time",
        "label": "Time",
        "format": "{{msg.payload.time}}",
        "layout": "col-center",
        "x": 690,
        "y": 1440,
        "wires": []
    },
    {
        "id": "73c4a14a.9b93c8",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Convert time",
        "func": "msg.payload.time = msg.payload.time.replace('T', ' ')\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 1440,
        "wires": [
            [
                "35ad311f.344c76"
            ]
        ]
    },
    {
        "id": "58de1340.3cc354",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_dilution_factor",
        "label": "Dilution Factor",
        "tooltip": "0.5 if diluted by two; 2 if concentrated by a factor 2",
        "group": "9398d5fb9d55df14",
        "order": 10,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "sample_dilution_factor",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 780,
        "y": 520,
        "wires": [
            [
                "de2cd9caa0e28a7c"
            ]
        ]
    },
    {
        "id": "4f6afc5a.81e454",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_total_volume",
        "label": "Filtered volume (in L)",
        "tooltip": "Calculated or hand filled",
        "group": "9398d5fb9d55df14",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "sample_total_volume",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1140,
        "y": 1000,
        "wires": [
            [
                "e1f2f6eb.fe1dd"
            ]
        ]
    },
    {
        "id": "e1f2f6eb.fe1dd",
        "type": "function",
        "z": "b771c342.49603",
        "name": "set global",
        "func": "global.set(msg.topic,msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1340,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "cdd4181922eecf11",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "sample_speed_through_water",
        "label": "Speed Through Water (kts)",
        "tooltip": "in knots",
        "group": "cf5d9f0e.d57e7",
        "order": 2,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "sample_speed_through_water",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 750,
        "y": 560,
        "wires": [
            [
                "de2cd9caa0e28a7c"
            ]
        ]
    },
    {
        "id": "1aad56b31b5647ce",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "acq_minimum_mesh",
        "label": "Minimal fraction size (μm)",
        "tooltip": "Net mesh pore size or minimal filtration mesh pore size",
        "group": "9398d5fb9d55df14",
        "order": 7,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "acq_minimum_mesh",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 780,
        "y": 400,
        "wires": [
            [
                "de2cd9caa0e28a7c"
            ]
        ]
    },
    {
        "id": "10eb31a2d7a6590c",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "acq_maximum_mesh",
        "label": "Maximal fraction size (μm)",
        "tooltip": "Maximal filtration mesh pore size",
        "group": "9398d5fb9d55df14",
        "order": 8,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "300",
        "topic": "acq_maximum_mesh",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 780,
        "y": 440,
        "wires": [
            [
                "de2cd9caa0e28a7c"
            ]
        ]
    },
    {
        "id": "3ac7b631f5d8ef90",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Test check",
        "func": "if (msg.topic.startsWith(\"sample_sampling_\")){\n    var sample_sampling_gear = global.get(\"sample_sampling_gear\")\n    var sample_sampling_direction = global.get(\"sample_sampling_gear\")\n    if (sample_sampling_gear === undefined || sample_sampling_gear === \"\" || sample_sampling_direction === undefined || sample_sampling_direction === \"\") {\n        return [null, null];\n    }\n\n    var activation_msg = {}\n    var date_msg = {}\n    var timestamp=new Date().toISOString();\n\n    if (sample_sampling_gear === \"net\") {\n        if (sample_sampling_direction === \"vertical\") {\n            activation_msg.payload = { \"group\": { \"show\": [\"Sample_Start_Location\"], \"hide\": [\"Sample_End_Location\", \"Sample_Culture_Date_and_Time\", \"Sample_Net_Metadata\"] } };\n        }\n        else if (sample_sampling_direction === \"horizontal\") {\n            activation_msg.payload = { \"group\": { \"show\": [\"Sample_End_Location\", \"Sample_Start_Location\"], \"hide\": [\"Sample_Culture_Date_and_Time\", \"Sample_Net_Metadata\"] } };\n        }\n        return [activation_msg, null]\n    }\n    else if (sample_sampling_gear === \"culture\") {\n        activation_msg.payload = { \"group\": { \"show\": [\"Sample_Culture_Date_and_Time\"], \"hide\": [\"Sample_End_Location\", \"Sample_Start_Location\", \"Sample_Net_Metadata\"] } };\n        global.set(\"object_lat\", \"-90.0000\")\n        global.set(\"object_lon\", \"0.0000\")\n        global.set(\"object_date\", timestamp.split('T')[0])\n        global.set(\"object_time\", timestamp.split('T')[1].split('.')[0])\n        date_msg.payload = 1\n        return [activation_msg, date_msg]\n    }\n    else if (msg.payload === \"test\"){\n        activation_msg.payload = { \"group\": { \"hide\": [\"Sample_Culture_Date_and_Time\", \"Sample_End_Location\", \"Sample_Start_Location\", \"Sample_Net_Metadata\"]}};\n        global.set(\"object_lat\", \"-90.0000\")\n        global.set(\"object_lon\", \"0.0000\")\n        global.set(\"object_date\", timestamp.split('T')[0])\n        global.set(\"object_time\", timestamp.split('T')[1].split('.')[0])\n        return [activation_msg, null]\n    }\n}\nreturn [null, null]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 240,
        "wires": [
            [
                "cbb123ab.fd3428"
            ],
            [
                "5b88e33dbcf41f14",
                "bfac95f2ee0f1478"
            ]
        ],
        "outputLabels": [
            "decknet activation",
            ""
        ]
    },
    {
        "id": "1d4dc8f8b427ac1d",
        "type": "function",
        "z": "b771c342.49603",
        "name": "return payload to sender",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 880,
        "wires": [
            [
                "14658615.47c862",
                "c33f1124.af6688"
            ]
        ]
    },
    {
        "id": "0f4d8caad27e928f",
        "type": "function",
        "z": "b771c342.49603",
        "name": "return payload to sender",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 940,
        "wires": [
            [
                "14658615.47c862",
                "358908cd.416ab"
            ]
        ]
    },
    {
        "id": "14737194ac3d940d",
        "type": "function",
        "z": "b771c342.49603",
        "name": "Calculate volume",
        "func": "if (msg.topic == \"sample_total_flowmeter_start\"){\n    context.set(\"sample_total_flowmeter_start\", msg.payload);\n}\nif (msg.topic == \"sample_total_flowmeter_end\"){\n    context.set(\"sample_total_flowmeter_end\", msg.payload);\n}\n\nif (context.keys().length == 2){\n    var sample_total_volume = context.get(\"sample_total_flowmeter_end\") - context.get(\"sample_total_flowmeter_start\");\n    msg.topic=\"sample_total_volume\"\n    msg.payload=sample_total_volume\n    return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "5b88e33dbcf41f14",
        "type": "change",
        "z": "b771c342.49603",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "object_date",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "object_date",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 500,
        "wires": [
            [
                "0126230a51e7ea9f"
            ]
        ]
    },
    {
        "id": "71336564ebc2015d",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "",
        "label": "Culture collection time",
        "tooltip": "Time of culture collection (HH:MM(:SS) UTC)",
        "group": "7bc0a4c416e4545c",
        "order": 1,
        "width": 10,
        "height": 2,
        "passthru": true,
        "mode": "text",
        "delay": "500",
        "topic": "object_time",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1300,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "bfac95f2ee0f1478",
        "type": "change",
        "z": "b771c342.49603",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "object_time",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "object_time",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 540,
        "wires": [
            [
                "71336564ebc2015d"
            ]
        ]
    },
    {
        "id": "0126230a51e7ea9f",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "",
        "label": "Culture collection date",
        "tooltip": "Date of culture collection (YYYY-MM-DD)",
        "group": "7bc0a4c416e4545c",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "object_date",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1300,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "72156c972a6c262f",
        "type": "ui_dropdown",
        "z": "b771c342.49603",
        "name": "sample_sampling_direction",
        "label": "Sampling direction*",
        "tooltip": "Choose if the sample was obtained moving vertically through the water column, horizontally or static.",
        "place": "Choose from list",
        "group": "9398d5fb9d55df14",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "horizontal",
                "type": "str"
            },
            {
                "label": "",
                "value": "vertical",
                "type": "str"
            },
            {
                "label": "",
                "value": "static",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "sample_sampling_direction",
        "topicType": "str",
        "className": "",
        "x": 760,
        "y": 240,
        "wires": [
            [
                "de2cd9caa0e28a7c"
            ]
        ]
    },
    {
        "id": "9ca1283cbf96e038",
        "type": "function",
        "z": "b771c342.49603",
        "name": "get sample_sampling_direction",
        "func": "msg.topic = \"sample_sampling_direction\"\nif (msg.payload.sample_sampling_direction === undefined){\n    msg.payload = \"static\";\n}\nelse\n{\n    msg.payload = msg.payload.sample_sampling_direction;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 240,
        "wires": [
            [
                "72156c972a6c262f"
            ]
        ]
    },
    {
        "id": "aeea671ef9b81d7c",
        "type": "ui_switch",
        "z": "b771c342.49603",
        "name": "",
        "label": "Volume auto calculation",
        "tooltip": "",
        "group": "9398d5fb9d55df14",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "user_autovolumecalc",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 770,
        "y": 600,
        "wires": [
            [
                "de2cd9caa0e28a7c"
            ]
        ]
    },
    {
        "id": "ddf55be3c2b5f95f",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "",
        "label": "Sampling time",
        "tooltip": "Time of sampling (HH:MM(:SS) UTC)",
        "group": "cef1e703.bcf3c8",
        "order": 6,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "500",
        "topic": "object_time",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 260,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "a2d77b1a739782ae",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "",
        "label": "Sampling date",
        "tooltip": "Date of sampling (YYYY-MM-DD)",
        "group": "cef1e703.bcf3c8",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "object_date",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 260,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "bf864cde6c5b2b5f",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "",
        "label": "Sampling Latitude",
        "tooltip": "Latitude (36.574439°N or 36°57.4439'N)",
        "group": "cef1e703.bcf3c8",
        "order": 1,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "500",
        "topic": "object_lat",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 270,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "97f47b9e87bf939b",
        "type": "ui_text_input",
        "z": "b771c342.49603",
        "name": "",
        "label": "Sampling Longitude",
        "tooltip": "Longitude (110.42100°W or 110°4.2100'W)",
        "group": "cef1e703.bcf3c8",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "object_lon",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 280,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "7058910effbf6fe3",
        "type": "ui_text",
        "z": "b771c342.49603",
        "group": "cef1e703.bcf3c8",
        "order": 2,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Longitude",
        "format": "(110.42100°W or 110°4.2100'W)",
        "layout": "row-left",
        "className": "",
        "x": 80,
        "y": 700,
        "wires": []
    },
    {
        "id": "19ee2680865bb205",
        "type": "subflow:4ed26b8b.253504",
        "z": "b771c342.49603",
        "name": "",
        "x": 720,
        "y": 1160,
        "wires": []
    },
    {
        "id": "f5013705b182c45c",
        "type": "change",
        "z": "b771c342.49603",
        "name": "sample_project",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sample_project",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 40,
        "wires": [
            [
                "9c882b37.fde668"
            ]
        ]
    },
    {
        "id": "0df15c4740bd6864",
        "type": "change",
        "z": "b771c342.49603",
        "name": "sample_ship",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sample_ship",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 80,
        "wires": [
            [
                "4557d689.a4fa88"
            ]
        ]
    },
    {
        "id": "5d6ac2dd07567c4a",
        "type": "change",
        "z": "b771c342.49603",
        "name": "sample_id",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sample_id",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 120,
        "wires": [
            [
                "94eb4221.9b92c"
            ]
        ]
    },
    {
        "id": "6e725f92fcd3d59d",
        "type": "change",
        "z": "b771c342.49603",
        "name": "sample_operator",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sample_operator",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 160,
        "wires": [
            [
                "82c5fc77.59c97"
            ]
        ]
    },
    {
        "id": "1c40ac7b4bce5f8d",
        "type": "change",
        "z": "b771c342.49603",
        "name": "acq_minimum_mesh",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "acq_minimum_mesh",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 400,
        "wires": [
            [
                "1aad56b31b5647ce"
            ]
        ]
    },
    {
        "id": "097413ca3cb3c769",
        "type": "change",
        "z": "b771c342.49603",
        "name": "acq_maximum_mesh",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "acq_maximum_mesh",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 440,
        "wires": [
            [
                "10eb31a2d7a6590c"
            ]
        ]
    },
    {
        "id": "c64d36611877bb57",
        "type": "change",
        "z": "b771c342.49603",
        "name": "sample_concentrated_sample_volume",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sample_concentrated_sample_volume",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 480,
        "wires": [
            [
                "642ff403.1ed91c"
            ]
        ]
    },
    {
        "id": "afc4243eee1c0cf6",
        "type": "change",
        "z": "b771c342.49603",
        "name": "sample_dilution_factor",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sample_dilution_factor",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 520,
        "wires": [
            [
                "58de1340.3cc354"
            ]
        ]
    },
    {
        "id": "f0fd533e8181002f",
        "type": "change",
        "z": "b771c342.49603",
        "name": "sample_speed_through_water",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sample_speed_through_water",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 560,
        "wires": [
            [
                "cdd4181922eecf11"
            ]
        ]
    },
    {
        "id": "326fb733cc56e902",
        "type": "subflow:4ed26b8b.253504",
        "z": "b771c342.49603",
        "name": "",
        "x": 1280,
        "y": 300,
        "wires": []
    },
    {
        "id": "8f2340504cec3332",
        "type": "change",
        "z": "b771c342.49603",
        "name": "user_autovolumecalc",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "user_autovolumecalc",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 600,
        "wires": [
            [
                "aeea671ef9b81d7c"
            ]
        ]
    },
    {
        "id": "6a84252a.d52a0c",
        "type": "ui_template",
        "z": "bccd1f23.87219",
        "group": "833bc5bb.217ba8",
        "name": "Stream Pi Camera",
        "order": 1,
        "width": 18,
        "height": 14,
        "format": "<span ng-bind-html=\"msg.payload\"></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 590,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "dc48dc42.98d18",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "set global",
        "func": "global.set(msg.topic,msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 440,
        "wires": [
            [
                "0449fb3f7205c9f1"
            ]
        ]
    },
    {
        "id": "811cd88c.daf528",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "right",
        "group": "fbd92986.1028c8",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": true,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-double-right fa-3x",
        "payload": "RIGHT",
        "payloadType": "str",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 550,
        "y": 1080,
        "wires": [
            [
                "65ad39d.b6d4d48"
            ]
        ]
    },
    {
        "id": "edda4df4.76de2",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "left",
        "group": "fbd92986.1028c8",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-double-left fa-3x",
        "payload": "LEFT",
        "payloadType": "str",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 550,
        "y": 1040,
        "wires": [
            [
                "65ad39d.b6d4d48"
            ]
        ]
    },
    {
        "id": "68962547.34a67c",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "name": "user_pump_manual_volume",
        "label": "Volume to pass (ml)",
        "tooltip": "Tiny values are accepted down to 0.001mL",
        "group": "707d9797.c8e798",
        "order": 3,
        "width": 2,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "300",
        "topic": "user_pump_manual_volume",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 620,
        "y": 420,
        "wires": [
            [
                "dc48dc42.98d18"
            ]
        ]
    },
    {
        "id": "6c792043.b6ff9",
        "type": "ui_ui_control",
        "z": "bccd1f23.87219",
        "name": "",
        "events": "change",
        "x": 560,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "902429eb.ceacb8",
        "type": "ui_toast",
        "z": "bccd1f23.87219",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 570,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "fe840e05.b46f3",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "Check form",
        "func": "var acq_fnumber_objective= global.get(\"acq_fnumber_objective\");\n\nif (acq_fnumber_objective === undefined || acq_fnumber_objective === \"\") {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Focal Length of the objective\";\n    return [null, msg];\n}\n\nmsg.topic = \"Change Tab\";\nmsg.payload={\"tab\":\"Fluidic Acquisition\"};\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 330,
        "y": 1180,
        "wires": [
            [
                "6c792043.b6ff9",
                "e574bd9707b1c3cf"
            ],
            [
                "902429eb.ceacb8"
            ]
        ],
        "outputLabels": [
            "message",
            "error"
        ]
    },
    {
        "id": "5846b1d4.7971b",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "Backward",
        "group": "707d9797.c8e798",
        "order": 2,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-rotate-left fa-2x",
        "payload": "BACKWARD",
        "payloadType": "str",
        "topic": "actuator/pump",
        "x": 560,
        "y": 280,
        "wires": [
            [
                "3cb96380.e575ec"
            ]
        ]
    },
    {
        "id": "2cab680b.baf888",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "Forward",
        "group": "707d9797.c8e798",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": true,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-rotate-right fa-2x",
        "payload": "FORWARD",
        "payloadType": "str",
        "topic": "actuator/pump",
        "x": 560,
        "y": 320,
        "wires": [
            [
                "3cb96380.e575ec"
            ]
        ]
    },
    {
        "id": "8038414a.34461",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "Calculate optics",
        "func": "var acq_fnumber_objective = String(global.get(\"acq_fnumber_objective\"));\nvar acq_camera = global.get(\"acq_camera\")\n\n\nif (acq_fnumber_objective == undefined || acq_fnumber_objective == \"\" || acq_camera == undefined || acq_camera == \"\") {\n  return\n}\n\n\nvar acq_magnification = 0;\nvar process_pixel = 0;\nvar sug_min = \"\";\nvar sug_max = \"\";\nvar sug_flowrate = 0;\n\n\n// Those values needs to be recalculated, they are not good!\nif (acq_camera == \"HQ Camera\") {\n  switch (acq_fnumber_objective) {\n    case \"25\":\n      acq_magnification = 0.6;\n      process_pixel = 1.56;\n      sug_min = \"60 µm\";\n      sug_max = \"670 µm\";\n      sug_flowrate = 3;\n      break;\n    case \"16\":\n      acq_magnification = 1.6;\n      process_pixel = 1.01;\n      sug_min = \"40 µm\";\n      sug_max = \"430 µm\";\n      sug_flowrate = 2.4;\n      break;\n    case \"12\":\n      acq_magnification = 1.20;\n      process_pixel = 0.79;\n      sug_min = \"30 µm\";\n      sug_max = \"340 µm\";\n      sug_flowrate = 1.25;\n      break;\n    case \"8\":\n      acq_magnification = 1.78;\n      process_pixel = 0.53;\n      sug_min = \"20 µm\";\n      sug_max = \"230 µm\";\n      sug_flowrate = 0.42;\n      break;\n    case \"6\":\n      acq_magnification = 2.36;\n      process_pixel = 0.41;\n      sug_min = \"15 µm\";\n      sug_max = \"170 µm\";\n      sug_flowrate = 0.32;\n      break;\n  }\n}\nelse if (acq_camera == \"Camera v2.1\") {\n  switch (acq_fnumber_objective) {\n    case \"25\":\n      acq_magnification = 0.6;\n      process_pixel = 1.86;\n      sug_min = \"60 µm\";\n      sug_max = \"670 µm\";\n      sug_flowrate = 3;\n      break;\n    case \"16\":\n      acq_magnification = 1.6;\n      process_pixel = 0.7;\n      sug_min = \"40 µm\";\n      sug_max = \"430 µm\";\n      sug_flowrate = 2.4;\n      break;\n    case \"12\":\n      acq_magnification = 1.20;\n      process_pixel = 0.94;\n      sug_min = \"30 µm\";\n      sug_max = \"340 µm\";\n      sug_flowrate = 1.25;\n      break;\n    case \"8\":\n      acq_magnification = 1.78;\n      process_pixel = 0.63;\n      sug_min = \"20 µm\";\n      sug_max = \"230 µm\";\n      sug_flowrate = 0.42;\n      break;\n    case \"6\":\n      acq_magnification = 2.36;\n      process_pixel = 0.48;\n      sug_min = \"15 µm\";\n      sug_max = \"170 µm\";\n      sug_flowrate = 0.32;\n      break;\n  }\n} else {\n  acq_magnification = \"ERROR\";\n  process_pixel = \"ERROR\";\n  sug_min = \"ERROR\";\n  sug_max = \"ERROR\";\n  sug_flowrate = \"ERROR\";\n}\n\nvar process_pixel_fixed = global.get(\"process_pixel_fixed\")\n\nif (process_pixel_fixed !== undefined && process_pixel_fixed !== \"\") {\n  process_pixel = process_pixel_fixed\n}\n\nglobal.set(\"process_pixel\", process_pixel);\n\nglobal.set(\"acq_magnification\", acq_magnification);\n\n\nreturn {\n  payload: {\n    \"acq_fnumber_objective\": acq_fnumber_objective + \" mm\",\n    \"acq_magnification\": \"x\" + acq_magnification,\n    \"process_pixel\": process_pixel + \" µm\",\n    \"min_size\": sug_min,\n    \"max_size\": sug_max\n  }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 120,
        "wires": [
            [
                "c65831ab7ac30d1c",
                "91c9fea3086ea04b",
                "ff54a3f3f8faf34e",
                "243ebe4cd79ee939",
                "a84ca5b96b4b1838"
            ]
        ],
        "inputLabels": [
            "acq_fnumber_objective"
        ],
        "outputLabels": [
            "acq_magnification"
        ]
    },
    {
        "id": "f61aaed5.1e64",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "",
        "group": "7a0b4877.a5d268",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Previous",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_return",
        "payload": "{\"tab\":\"Sample\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 140,
        "y": 1140,
        "wires": [
            [
                "6c792043.b6ff9"
            ]
        ]
    },
    {
        "id": "9ba6ec0a.22c96",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "",
        "group": "7a0b4877.a5d268",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Continue",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_tab",
        "payload": "{\"tab\":\"Home\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 140,
        "y": 1180,
        "wires": [
            [
                "fe840e05.b46f3"
            ]
        ]
    },
    {
        "id": "3cb96380.e575ec",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "pump",
        "func": "var manual_volume = global.get(\"user_pump_manual_volume\");\nvar flowrate = global.get(\"user_pump_flowrate\");\n\nif (manual_volume === undefined || manual_volume === \"\" || manual_volume === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Volume to pass\";\n    return [null, msg];\n}\nelse if (flowrate === undefined || flowrate === \"\" || flowrate === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Flowrate\";\n    return [null, msg];\n}\nelse {\n    msg.topic = \"actuator/pump\";\n    // msg.payload is FORWARD or BACKWARD here\n    msg.payload={\"action\":\"move\", \n                \"direction\":msg.payload,\n                \"volume\":manual_volume,\n                \"flowrate\":flowrate};\n}\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 300,
        "wires": [
            [
                "bdc8ce57.de1f08"
            ],
            [
                "8bcce348.efc1a"
            ]
        ],
        "inputLabels": [
            "direction"
        ],
        "outputLabels": [
            "message",
            "error"
        ]
    },
    {
        "id": "8bcce348.efc1a",
        "type": "ui_toast",
        "z": "bccd1f23.87219",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 970,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "bdc8ce57.de1f08",
        "type": "mqtt out",
        "z": "bccd1f23.87219",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "8dc3722c.06efa8",
        "x": 950,
        "y": 240,
        "wires": []
    },
    {
        "id": "d71d224f.0585d8",
        "type": "ui_toast",
        "z": "bccd1f23.87219",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 970,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "65ad39d.b6d4d48",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "focus",
        "func": "var distance = global.get(\"user_focus_distance\");\nvar speed = global.get(\"user_focus_speed\");\n\nif (distance === undefined || distance === \"\" || distance === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Distance\";\n    return [null, msg]\n}\nif (speed === undefined || speed === \"\" || speed === null) {\n    msg.topic = \"Missing entry :\"\n    msg.payload = \"Speed\";\n    return [null, msg]\n}\n\nif (msg.payload == \"LEFT\") {\n    msg.payload = \"UP\"\n}\nif (msg.payload == \"RIGHT\") {\n    msg.payload = \"DOWN\"\n}\n// msg.payload is UP or DOWN here\nmsg.payload={\"action\":\"move\", \n            \"direction\":msg.payload,\n            \"distance\":(distance/1000),\n            \"speed\": (speed/1000)\n};\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1060,
        "wires": [
            [
                "62030521.88317c"
            ],
            [
                "d71d224f.0585d8"
            ]
        ],
        "inputLabels": [
            "direction"
        ],
        "outputLabels": [
            "message",
            "error"
        ]
    },
    {
        "id": "1962d999.4a97e6",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "stop focus",
        "group": "fbd92986.1028c8",
        "order": 11,
        "width": 5,
        "height": 1,
        "passthru": true,
        "label": "Focus STOP",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "fa-pause fa-2x",
        "payload": "{\"action\":\"stop\"}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 570,
        "y": 840,
        "wires": [
            [
                "23d77b28fecb55bb"
            ]
        ]
    },
    {
        "id": "62030521.88317c",
        "type": "mqtt out",
        "z": "bccd1f23.87219",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "8dc3722c.06efa8",
        "x": 950,
        "y": 920,
        "wires": []
    },
    {
        "id": "3bd43039.bc5fb8",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "",
        "group": "fbd92986.1028c8",
        "order": 1,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Left 1mm",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-left fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"UP\",\"distance\":1}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 560,
        "y": 880,
        "wires": [
            [
                "23d77b28fecb55bb"
            ]
        ]
    },
    {
        "id": "c0663029.2d03b",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "",
        "group": "fbd92986.1028c8",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Right 1mm",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-right fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"DOWN\",\"distance\":1}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 570,
        "y": 1000,
        "wires": [
            [
                "23d77b28fecb55bb"
            ]
        ]
    },
    {
        "id": "71f55a58.d7eaf4",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: 500µm",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "500",
        "payloadType": "num",
        "x": 80,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "9a1d0e7c.2d5a1",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "f0775525.cf806"
            ]
        ]
    },
    {
        "id": "f782a471.447748",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: 2mL/min",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 90,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "73b8252a.5ca754",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: 2mL",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 70,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "6451f991.aaac1",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "stop pump",
        "group": "707d9797.c8e798",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "label": " STOP PUMP",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "icon": "fa-pause fa-2x",
        "payload": "{\"action\":\"stop\"}",
        "payloadType": "json",
        "topic": "actuator/pump",
        "x": 570,
        "y": 240,
        "wires": [
            [
                "bdc8ce57.de1f08"
            ]
        ]
    },
    {
        "id": "cfc783d7.d6ceb",
        "type": "link in",
        "z": "bccd1f23.87219",
        "name": "Optics recalculation",
        "links": [
            "559a8085.1d6b9",
            "5d5ad36d2c50dcc2"
        ],
        "x": 885,
        "y": 120,
        "wires": [
            [
                "8038414a.34461"
            ]
        ]
    },
    {
        "id": "2d371e59.b0e50a",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: 1000µm/s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "1000",
        "payloadType": "num",
        "x": 90,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "167cda35.c9b6ae",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "",
        "group": "fbd92986.1028c8",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Left 100um",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-left fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"UP\",\"distance\":0.1}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 570,
        "y": 920,
        "wires": [
            [
                "23d77b28fecb55bb"
            ]
        ]
    },
    {
        "id": "72a7c597.9374fc",
        "type": "ui_button",
        "z": "bccd1f23.87219",
        "name": "",
        "group": "fbd92986.1028c8",
        "order": 5,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Right 100um",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-angle-right fa-3x",
        "payload": "{\"action\":\"move\",\"direction\":\"DOWN\",\"distance\":0.1}",
        "payloadType": "json",
        "topic": "actuator/focus",
        "topicType": "str",
        "x": 570,
        "y": 960,
        "wires": [
            [
                "23d77b28fecb55bb"
            ]
        ]
    },
    {
        "id": "f0775525.cf806",
        "type": "ui_multistate_switch",
        "z": "bccd1f23.87219",
        "name": "light_control",
        "group": "8c38a81e.9897a8",
        "order": 1,
        "width": 6,
        "height": 1,
        "label": "Light  ",
        "stateField": "payload",
        "enableField": "enable",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "options": [
            {
                "label": "Off",
                "value": "off",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "On",
                "value": "on",
                "valueType": "str",
                "color": "#999999"
            }
        ],
        "x": 290,
        "y": 120,
        "wires": [
            [
                "99ae4886.8d43c"
            ]
        ]
    },
    {
        "id": "99ae4886.8d43c",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "Prepare message",
        "func": "msg.topic = \"light\"\nmsg.payload = {\"action\":msg.payload}\n\nvar led_output = flow.get('led_output')\nif (led_output !== undefined && led_output !== \"\") {\n    msg.payload[\"led\"] = led_output\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 750,
        "y": 180,
        "wires": [
            [
                "bdc8ce57.de1f08"
            ]
        ]
    },
    {
        "id": "4535ab65.009354",
        "type": "ui_multistate_switch",
        "z": "bccd1f23.87219",
        "name": "led_output",
        "group": "8c38a81e.9897a8",
        "order": 2,
        "width": 6,
        "height": 1,
        "label": "LED output",
        "stateField": "payload",
        "enableField": "enable",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "options": [
            {
                "label": "1",
                "value": "1",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "2",
                "value": "2",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "x": 290,
        "y": 180,
        "wires": [
            [
                "152f58e5.ca51df"
            ]
        ]
    },
    {
        "id": "703d6ecd.62af88",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: 1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 100,
        "y": 180,
        "wires": [
            [
                "4535ab65.009354"
            ]
        ]
    },
    {
        "id": "152f58e5.ca51df",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "led_output",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "on",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 180,
        "wires": [
            [
                "f0775525.cf806",
                "99ae4886.8d43c"
            ]
        ]
    },
    {
        "id": "8ea9dc9a.c7d87",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "Encapsulate settings",
        "func": "global.set(msg.topic, msg.payload)\n\nmsg.payload = {\n    \"action\":\"settings\", \n    \"settings\": { [msg.topic.replace(\"user_\", \"\")]:msg.payload}\n}\n\nmsg.topic = \"imager/image\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 580,
        "wires": [
            [
                "7094dee99bbbe6ca"
            ]
        ]
    },
    {
        "id": "5765a825.a595c8",
        "type": "ui_slider",
        "z": "bccd1f23.87219",
        "name": "Shutter speed slider",
        "label": "Shutter Speed",
        "tooltip": "In microseconds, up to 1000µs, 125µs by default",
        "group": "8c38a81e.9897a8",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "user_shutter_speed",
        "topicType": "str",
        "min": "125",
        "max": "1000",
        "step": "1",
        "className": "",
        "x": 600,
        "y": 580,
        "wires": [
            [
                "8ea9dc9a.c7d87"
            ]
        ]
    },
    {
        "id": "845e06e1.0d812",
        "type": "mqtt out",
        "z": "bccd1f23.87219",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "8dc3722c.06efa8",
        "x": 1290,
        "y": 680,
        "wires": []
    },
    {
        "id": "2350e507.d4e302",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: 125µs",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "125",
        "payloadType": "num",
        "x": 800,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "5e147425.7666ec",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "Encapsulate wb gain settings",
        "func": "var value = Math.round(msg.payload * 100)\nvalue = Math.max(0,value)\nvalue = Math.min(800,value)\n\nglobal.set(\"user_\" + msg.topic + \"_gain\", msg.payload)\n\nmsg.payload = {\n    \"action\":\"settings\", \n    \"settings\":{\"white_balance_gain\":{\n        [msg.topic]: value\n        }\n    }\n}\nmsg.topic = \"imager/image\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 760,
        "wires": [
            [
                "7094dee99bbbe6ca"
            ]
        ]
    },
    {
        "id": "82722a3c.846b3",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 710,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "60e44330.50bdec",
        "type": "ui_switch",
        "z": "bccd1f23.87219",
        "name": "AWB",
        "label": "Auto White Balance",
        "tooltip": "",
        "group": "8c38a81e.9897a8",
        "order": 7,
        "width": 3,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "user_white_balance",
        "topicType": "str",
        "style": "",
        "onvalue": "auto",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 550,
        "y": 620,
        "wires": [
            [
                "8ea9dc9a.c7d87"
            ]
        ]
    },
    {
        "id": "6be64480.7e7e24",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Get user_red_gain",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.user_red_gain",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 740,
        "wires": [
            [
                "d5415af6.e06cc"
            ]
        ]
    },
    {
        "id": "6d49d161.13628",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Get user_blue_gain",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.user_blue_gain",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 780,
        "wires": [
            [
                "dba68c1f.e3144"
            ]
        ]
    },
    {
        "id": "8ef294ba.12213",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Get user_analog_gain",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.user_analog_gain",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 660,
        "wires": [
            [
                "a6c7eec4.f7a918"
            ]
        ]
    },
    {
        "id": "8e336e58.14722",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Get user_digital_gain",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.user_digital_gain",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 700,
        "wires": [
            [
                "66b37eef.f3f9e"
            ]
        ]
    },
    {
        "id": "a6c7eec4.f7a918",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "d": true,
        "name": "Analog gain field",
        "label": "Analog Gain",
        "tooltip": "From 1.0 to 12.0",
        "group": "8c38a81e.9897a8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "analog",
        "topicType": "str",
        "x": 590,
        "y": 660,
        "wires": [
            [
                "44e02933.a66688",
                "d361a2c4.0990f8"
            ]
        ]
    },
    {
        "id": "66b37eef.f3f9e",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "d": true,
        "name": "Digital gain field",
        "label": "Digital Gain",
        "tooltip": "From 1.0 to 64.0. Overexpose starting at 4.0",
        "group": "8c38a81e.9897a8",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "digital",
        "topicType": "str",
        "x": 580,
        "y": 700,
        "wires": [
            [
                "44e02933.a66688",
                "d361a2c4.0990f8"
            ]
        ]
    },
    {
        "id": "44e02933.a66688",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "Encapsulate image gain settings",
        "func": "global.set(\"user_\" + msg.topic + \"_gain\", msg.payload)\n\nmsg.payload = {\n    \"action\":\"settings\", \n    \"settings\":{\"image_gain\":{\n        [msg.topic]:Math.round(msg.payload*100)\n        }\n    }\n}\nmsg.topic = \"imager/image\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 660,
        "wires": [
            [
                "7094dee99bbbe6ca"
            ]
        ]
    },
    {
        "id": "d361a2c4.0990f8",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "topic *_gain",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "topic&'_gain'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "d8d006bf.2947f",
        "type": "inject",
        "z": "bccd1f23.87219",
        "name": "Default: ISO 100",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 790,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "9feb06fb.43b558",
        "type": "ui_multistate_switch",
        "z": "bccd1f23.87219",
        "name": "ISO selector",
        "group": "8c38a81e.9897a8",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "ISO",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "change",
        "inputMsg": "all",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "100",
                "value": "100",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "200",
                "value": "200",
                "valueType": "num",
                "color": "#999999"
            },
            {
                "label": "320",
                "value": "320",
                "valueType": "num",
                "color": "#ff6666"
            },
            {
                "label": "400",
                "value": "400",
                "valueType": "num",
                "color": "#009999"
            },
            {
                "label": "500",
                "value": "500",
                "valueType": "num",
                "color": "#cccc00"
            },
            {
                "label": "640",
                "value": "640",
                "valueType": "num",
                "color": "#ff33cc"
            },
            {
                "label": "800",
                "value": "800",
                "valueType": "num",
                "color": "#cc6600"
            }
        ],
        "topic": "user_iso",
        "x": 570,
        "y": 540,
        "wires": [
            [
                "8ea9dc9a.c7d87"
            ]
        ]
    },
    {
        "id": "be33e564.029358",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "name": "user_focus_distance",
        "label": "Focus Distance (in µm)",
        "tooltip": "in µm, 25µm resolution",
        "group": "fbd92986.1028c8",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "user_focus_distance",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 600,
        "y": 460,
        "wires": [
            [
                "dc48dc42.98d18"
            ]
        ]
    },
    {
        "id": "3a86de51.765b9a",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "name": "user_focus_speed",
        "label": "Focus Speed (in µm/sec)",
        "tooltip": "in µm/sec",
        "group": "fbd92986.1028c8",
        "order": 7,
        "width": 4,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "user_focus_speed",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 590,
        "y": 500,
        "wires": [
            [
                "dc48dc42.98d18"
            ]
        ]
    },
    {
        "id": "cb2d5174.cfe9f",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "name": "user_pump_flowrate",
        "label": "Flowrate (ml/min)*",
        "tooltip": "",
        "group": "707d9797.c8e798",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": "500",
        "topic": "user_pump_flowrate",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 600,
        "y": 380,
        "wires": [
            [
                "dc48dc42.98d18"
            ]
        ]
    },
    {
        "id": "d5415af6.e06cc",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "name": "WB Red input",
        "label": "WB: Red",
        "tooltip": "From 0.0 to 8.0",
        "group": "8c38a81e.9897a8",
        "order": 8,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "500",
        "topic": "red",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 580,
        "y": 740,
        "wires": [
            [
                "6365d9c509df290a"
            ]
        ]
    },
    {
        "id": "dba68c1f.e3144",
        "type": "ui_text_input",
        "z": "bccd1f23.87219",
        "name": "WB Blue input",
        "label": "WB: Blue",
        "tooltip": "From 0.0 to 8.0",
        "group": "8c38a81e.9897a8",
        "order": 9,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": "500",
        "topic": "blue",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 580,
        "y": 780,
        "wires": [
            [
                "6365d9c509df290a"
            ]
        ]
    },
    {
        "id": "142bc61a0bde1ba9",
        "type": "link in",
        "z": "bccd1f23.87219",
        "name": "Cam Stream",
        "links": [
            "49111a72f4e32740"
        ],
        "x": 205,
        "y": 40,
        "wires": [
            [
                "3ca8be38ddb269e9"
            ]
        ]
    },
    {
        "id": "3ca8be38ddb269e9",
        "type": "template",
        "z": "bccd1f23.87219",
        "name": "Prepare stream HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<center>\n  <img src=\"http://{{payload}}:8000/stream.mjpg\"\n    onerror=\"this.onerror=null; this.src='http://{{payload}}:80/error.svg'\"\n    alt=\"If you see this, there probably is an error either with your camera or with the python service. Please restart your machine.\"\n    width=\"100%\" height=\"100%\">\n</center>",
        "output": "str",
        "x": 360,
        "y": 40,
        "wires": [
            [
                "6a84252a.d52a0c"
            ]
        ]
    },
    {
        "id": "6365d9c509df290a",
        "type": "function",
        "z": "bccd1f23.87219",
        "name": "Constrain wb value",
        "func": "if (msg.payload < 0.0 || msg.payload > 8.0){\n    msg.payload = Math.max(0.00, msg.payload)\n    msg.payload = Math.min(8.00, msg.payload)\n    if (msg.topic == \"red\"){\n        return [null,msg,null]\n    }\n    if (msg.topic == \"blue\"){\n        return [null,null,msg]\n    }\n}\nreturn [msg,null,null];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 760,
        "wires": [
            [
                "d361a2c4.0990f8",
                "5e147425.7666ec"
            ],
            [
                "d5415af6.e06cc"
            ],
            [
                "dba68c1f.e3144"
            ]
        ]
    },
    {
        "id": "72f349eaaa54ea06",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "bccd1f23.87219",
        "name": "",
        "x": 80,
        "y": 580,
        "wires": [
            [
                "78265e7fd1ec2e41"
            ]
        ]
    },
    {
        "id": "e574bd9707b1c3cf",
        "type": "subflow:4ed26b8b.253504",
        "z": "bccd1f23.87219",
        "name": "",
        "x": 580,
        "y": 1180,
        "wires": []
    },
    {
        "id": "c65831ab7ac30d1c",
        "type": "ui_text",
        "z": "bccd1f23.87219",
        "group": "4248342d.e55fac",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Objective lens aperture",
        "format": "{{msg.payload.acq_fnumber_objective}}",
        "layout": "row-spread",
        "className": "",
        "x": 1270,
        "y": 40,
        "wires": []
    },
    {
        "id": "91c9fea3086ea04b",
        "type": "ui_text",
        "z": "bccd1f23.87219",
        "group": "4248342d.e55fac",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Magnification",
        "format": "{{msg.payload.acq_magnification}}",
        "layout": "row-spread",
        "className": "",
        "x": 1230,
        "y": 80,
        "wires": []
    },
    {
        "id": "ff54a3f3f8faf34e",
        "type": "ui_text",
        "z": "bccd1f23.87219",
        "group": "4248342d.e55fac",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Pixel resolution",
        "format": "{{msg.payload.process_pixel}}",
        "layout": "row-spread",
        "className": "",
        "x": 1240,
        "y": 120,
        "wires": []
    },
    {
        "id": "243ebe4cd79ee939",
        "type": "ui_text",
        "z": "bccd1f23.87219",
        "group": "4248342d.e55fac",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Smallest cells to explore",
        "format": "{{msg.payload.min_size}}",
        "layout": "row-spread",
        "className": "",
        "x": 1270,
        "y": 160,
        "wires": []
    },
    {
        "id": "a84ca5b96b4b1838",
        "type": "ui_text",
        "z": "bccd1f23.87219",
        "group": "4248342d.e55fac",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Biggest cells to explore",
        "format": "{{msg.payload.max_size}}",
        "layout": "row-spread",
        "className": "",
        "x": 1270,
        "y": 200,
        "wires": []
    },
    {
        "id": "0449fb3f7205c9f1",
        "type": "subflow:4ed26b8b.253504",
        "z": "bccd1f23.87219",
        "name": "",
        "x": 1320,
        "y": 440,
        "wires": []
    },
    {
        "id": "15ddf0372daab1dc",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Get user_iso",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "100",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.user_iso",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 540,
        "wires": [
            [
                "9feb06fb.43b558"
            ]
        ]
    },
    {
        "id": "2f3cbb68aaad8710",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Get user_analog_gain",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "125",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.user_shutter_speed",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 580,
        "wires": [
            [
                "5765a825.a595c8"
            ]
        ]
    },
    {
        "id": "2b3217c91c188c10",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Get user_analog_gain",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.user_white_balance",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 620,
        "wires": [
            [
                "60e44330.50bdec"
            ]
        ]
    },
    {
        "id": "72ef9b9fcfdb5950",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Get user_focus_speed",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "1000",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.user_focus_speed",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 500,
        "wires": [
            [
                "3a86de51.765b9a"
            ]
        ]
    },
    {
        "id": "56634eabb8a82142",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Get user_focus_distance",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "500",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.user_focus_distance",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 460,
        "wires": [
            [
                "be33e564.029358"
            ]
        ]
    },
    {
        "id": "0adc5c5766629ac4",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Get user_pump_manual_volume",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.user_pump_manual_volume",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 420,
        "wires": [
            [
                "68962547.34a67c"
            ]
        ]
    },
    {
        "id": "982f7dbad4a6e35f",
        "type": "change",
        "z": "bccd1f23.87219",
        "name": "Get user_pump_flowrate",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.user_pump_flowrate",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 380,
        "wires": [
            [
                "cb2d5174.cfe9f"
            ]
        ]
    },
    {
        "id": "6b34c456.83178c",
        "type": "ui_text_input",
        "z": "baa1e3d9.cb29d",
        "name": "acq_id",
        "label": "Acquisition unique ID*",
        "tooltip": "",
        "group": "4322c187.e73e5",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "acq_id",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 730,
        "y": 300,
        "wires": [
            [
                "e18598223b99a72b"
            ]
        ]
    },
    {
        "id": "cc0ca68b.4263a8",
        "type": "ui_dropdown",
        "z": "baa1e3d9.cb29d",
        "name": "acq_celltype",
        "label": "Flowcell thickness*",
        "tooltip": "",
        "place": "Select option",
        "group": "4322c187.e73e5",
        "order": 6,
        "width": 5,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "200 μm µ-Slide I Luer",
                "value": 200,
                "type": "num"
            },
            {
                "label": "300 µm capillary",
                "value": 300,
                "type": "num"
            },
            {
                "label": "400 μm µ-Slide I Luer",
                "value": 400,
                "type": "num"
            },
            {
                "label": "600 μm µ-Slide I Luer",
                "value": 600,
                "type": "num"
            },
            {
                "label": "800 μm µ-Slide I Luer",
                "value": 800,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "acq_celltype",
        "topicType": "str",
        "className": "",
        "x": 710,
        "y": 140,
        "wires": [
            [
                "99b11fe4.2795d",
                "e18598223b99a72b"
            ]
        ]
    },
    {
        "id": "fb887036.12429",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "set global",
        "func": "global.set(msg.topic, msg.payload);\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 260,
        "wires": [
            [
                "52ea7d01.711034",
                "5b7343f86e64be38"
            ]
        ]
    },
    {
        "id": "bb2bb7ce.1d1458",
        "type": "ui_template",
        "z": "baa1e3d9.cb29d",
        "group": "858a0e3c.987fe",
        "name": "Stream Pi Camera",
        "order": 1,
        "width": 20,
        "height": 15,
        "format": "<span ng-bind-html=\"msg.payload\"></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 550,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "d0c5b57d.590818",
        "type": "ui_ui_control",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "events": "change",
        "x": 400,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "c72f8fae.23bd4",
        "type": "ui_button",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "group": "b7919ae2.c01788",
        "order": 1,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Previous",
        "tooltip": "",
        "color": "#097479",
        "bgcolor": "white",
        "className": "",
        "icon": "keyboard_return",
        "payload": "{\"tab\":\"Optical Configuration\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 180,
        "y": 640,
        "wires": [
            [
                "d0c5b57d.590818"
            ]
        ]
    },
    {
        "id": "29be525e.0c87fe",
        "type": "ui_template",
        "z": "baa1e3d9.cb29d",
        "group": "b5d61bc7.54fe48",
        "name": "Show Metadata",
        "order": 9,
        "width": 0,
        "height": 0,
        "format": "<div>\n    <table style=\"text-align: center; width:100%\">\n        <tr style=\"vertical-align: top\">\n            <td>\n                <h2>Sample</h2>\n                <p><strong>id:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_id\"></span></p>\n                <p><strong>project:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_project\"></span></p>\n                <p><strong>ship:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_ship\"></span></p>\n                <p><strong>operator:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_operator\"></span></p>\n                <p><strong>sampling gear:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_sampling_gear\"></span></p>\n                <p><strong>concentrated volume:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_concentrated_sample_volume\"></span></p>\n                <p ng-if=msg.payload.config.sample_gear_net_opening><strong>gear net opening:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_gear_net_opening\"></span></p>\n                <p ng-if=msg.payload.config.sample_total_volume><strong>total volume filtered:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.sample_total_volume\"></span></p>\n            </td>\n            <td>\n                <h2>Acquisition</h2>\n                <p><strong>id:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_id\"></span></p>\n                <p><strong>instrument:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_instrument\"></span></p>\n                <p><strong>instrument id:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_instrument_id\"></span></p>\n                <p><strong>camera:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_camera\"></span></p>\n                <p><strong>celltype:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_celltype\"></span>\n                </p>\n                <p><strong>minimum mesh:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_minimum_mesh\"></span></p>\n                <p><strong>maximum mesh:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_maximum_mesh\"></span></p>\n                <p><strong>min esd:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_min_esd\"></span>\n                </p>\n                <p><strong>max esd:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_max_esd\"></span>\n                </p>\n                <p><strong>volume:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_volume\"></span></p>\n                <p><strong>magnification:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_magnification\"></span></p>\n                <p><strong>fnumber objective:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_fnumber_objective\"></span></p>\n                <p><strong>software:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.acq_software\"></span>\n                </p>\n            </td>\n        </tr>\n        <tr style=\"vertical-align: top\">\n            <td>\n                <h2>Object</h2>\n                <p><strong>latitude:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_lat\"></span>\n                </p>\n                <p><strong>longitude:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_lon\"></span>\n                </p>\n                <p ng-if=msg.payload.config.object_lat_end><strong>latitude end:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_lat_end\"></span></p>\n                <p ng-if=msg.payload.config.object_lon_end><strong>longitude end:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_lon_end\"></span></p>\n                <p><strong>date:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_date\"></span></p>\n                <p><strong>time:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_time\"></span></p>\n                <p ng-if=msg.payload.config.object_date_end><strong>date end:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_date_end\"></span></p>\n                <p ng-if=msg.payload.config.object_time_end><strong>time end:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_time_end\"></span></p>\n                <p><strong>depth min:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_depth_min\"></span></p>\n                <p><strong>depth max:</strong>\n                    <span id=\"max_size\" ng-bind-html=\"msg.payload.config.object_depth_max\"></span></p>\n            </td>\n            <td>\n                <h2>Process</h2>\n                <p><strong>pixel:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.process_pixel\"></span>\n                </p>\n                <p><strong>id:</strong> <span id=\"max_size\" ng-bind-html=\"msg.payload.config.process_id\"></span></p>\n            </td>\n        </tr>\n    </table>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1180,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "4b489713.ccde5",
        "type": "ui_button",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "group": "4322c187.e73e5",
        "order": 12,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Start Acquisition",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "camera",
        "payload": "",
        "payloadType": "str",
        "topic": "imager/image",
        "x": 420,
        "y": 440,
        "wires": [
            [
                "c9f510c0.7d1328"
            ]
        ]
    },
    {
        "id": "c9f510c0.7d1328",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "Image control",
        "func": "// Reset the number of images taken\nflow.set('img_counter', 0);\n\nvar pump_direction = flow.get(\"pump_direction\");\nvar user_sleep_before = flow.get(\"user_sleep_before\");\n\nvar acq_celltype = global.get(\"acq_celltype\");\nvar acq_minimum_mesh = global.get(\"acq_minimum_mesh\");\nvar acq_maximum_mesh = global.get(\"acq_maximum_mesh\");\nvar user_imaging_pump_volume = global.get(\"user_imaging_pump_volume\");\nvar acq_id = global.get(\"acq_id\");\nvar acq_nb_frame = global.get(\"acq_nb_frame\");\nvar object_date = global.get(\"object_date\");\n\nif (acq_celltype === undefined || acq_celltype === \"\") {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Type of the flowcell\";\n    return [null, msg];\n} else if (acq_minimum_mesh === undefined || acq_minimum_mesh === \"\") {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Lower fraction size\";\n    return [null, msg];\n} else if (acq_maximum_mesh === undefined || acq_maximum_mesh === \"\") {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Upper fraction size\";\n    return [null, msg];\n} else if (user_imaging_pump_volume === undefined || user_imaging_pump_volume === \"\" || user_imaging_pump_volume === null) {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Volume inbetween images\";\n    return [null, msg];\n} else if (acq_id === undefined || acq_id === \"\") {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Acquisition ID\";\n    return [null, msg];\n} else if (acq_nb_frame === undefined || acq_nb_frame === \"\" || acq_nb_frame === null) {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Number of image to save\";\n    return [null, msg];\n} else if (pump_direction === undefined || pump_direction === \"\" || pump_direction === null) {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Pump direction\";\n    return [null, msg];\n} else if (user_sleep_before === undefined || user_sleep_before === \"\" || user_sleep_before === null) {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Delay before image\";\n    return [null, msg];\n}else if (object_date === undefined || object_date === \"\" || object_date === null) {\n    msg.topic = \"Missing entry :\";\n    msg.payload = \"Object date\";\n    return [null, msg];\n}\n\nmsg.payload = {\n    \"action\": \"image\",\n    \"sleep\": user_sleep_before,\n    \"pump_direction\": pump_direction,\n    \"volume\": user_imaging_pump_volume,\n    \"acq_nb_frame\": acq_nb_frame,\n}\nmsg.send = true\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 440,
        "wires": [
            [
                "52ea7d01.711034",
                "40c12463.a1f84c",
                "35d1833cb5d7c1e9"
            ],
            [
                "20e0a8c8.edbeb"
            ]
        ]
    },
    {
        "id": "20e0a8c8.edbeb",
        "type": "ui_toast",
        "z": "baa1e3d9.cb29d",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 910,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "c3e50240.82aa58",
        "type": "mqtt out",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "8dc3722c.06efa8",
        "x": 1150,
        "y": 420,
        "wires": []
    },
    {
        "id": "3a4450b1.4459a8",
        "type": "ui_button",
        "z": "baa1e3d9.cb29d",
        "name": "Stop Acquisition",
        "group": "4322c187.e73e5",
        "order": 11,
        "width": 5,
        "height": 1,
        "passthru": true,
        "label": "STOP ACQUISITION",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "icon": "cancel",
        "payload": "{\"action\":\"stop\"}",
        "payloadType": "json",
        "topic": "imager/image",
        "x": 420,
        "y": 480,
        "wires": [
            [
                "d74210ef.edc15"
            ]
        ]
    },
    {
        "id": "d74210ef.edc15",
        "type": "mqtt out",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "8dc3722c.06efa8",
        "x": 610,
        "y": 480,
        "wires": []
    },
    {
        "id": "bb62da8a.ebc328",
        "type": "ui_switch",
        "z": "baa1e3d9.cb29d",
        "name": "Pump direction",
        "label": "Pump direction",
        "tooltip": "BACKWARD / FORWARD",
        "group": "4322c187.e73e5",
        "order": 9,
        "width": 5,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "pump_direction",
        "topicType": "str",
        "style": "",
        "onvalue": "FORWARD",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "BACKWARD",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": true,
        "className": "",
        "x": 420,
        "y": 560,
        "wires": [
            [
                "156e40de9598114b"
            ]
        ]
    },
    {
        "id": "52ea7d01.711034",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "Encapsulate config",
        "func": "msg.payload = {\n\t\"action\": \"update_config\",\n\t\"config\": {\n    \t\"description\": {\n    \t\t\"sample_project\": \"Project's name\",\n    \t\t\"sample_id\": \"Sample ID\",\n    \t\t\"sample_uuid\": \"Sample UUID (Autogenerated)\",\n    \t\t\"sample_ship\": \"Ship's name\",\n    \t\t\"sample_operator\": \"Operator's name\",\n    \t\t\"sample_sampling_gear\": \"Sampling gear used\",\n    \t\t\"sample_concentrated_sample_volume\": \"Volume of concentrated sample, in mL\",\n    \t\t\"sample_total_volume\": \"Total volume filtered by the net used, in L\",\n    \t\t\"sample_dilution_factor\": \"Dilution factor of the sample, 0.5 if diluted by 2, 2 if concentrated by 2\",\n    \t\t\"sample_speed_through_water\": \"Speed of the boat through water when sampling, in kts\",\n    \t\t\"acq_id\": \"Acquisition ID\",\n    \t\t\"acq_uuid\": \"Acquisition UUID (Autogenerated)\",\n    \t\t\"acq_instrument\": \"Instrument type\",\n    \t\t\"acq_instrument_id\": \"Instrument ID\",\n    \t\t\"acq_celltype\": \"Flow cell dimension thickness, in µm\",\n    \t\t\"acq_minimum_mesh\": \"Minimum filtration mesh size, in µm\",\n    \t\t\"acq_maximum_mesh\": \"Maximum filtration mesh size, in µm\",\n    \t\t\"acq_min_esd\": \"\",\n    \t\t\"acq_max_esd\": \"\",\n    \t\t\"acq_volume\": \"Pumped volume, in mL\",\n\t\t    \"acq_imaged_volume\": \"Total imaged volume, in mL\",\n    \t\t\"acq_magnification\": \"Optical magnification\",\n    \t\t\"acq_fnumber_objective\": \"Focal length of the objective, in mm\",\n    \t\t\"acq_camera_name\": \"Name of the camera used\",\n    \t\t\"acq_nb_frame\": \"Number of picture taken\",\n            \"acq_local_datetime\": \"Instrument local datetime\",\n            \"acq_camera_resolution\": \"Resolution of the images\",\n            \"acq_camera_iso\": \"ISO Number of the images\",\n            \"acq_camera_shutter_speed\": \"Shutter speed of the images, in µs\",\n            \"acq_software\": \"Software version number\",\n    \t\t\"object_date\": \"Sample collection date (or beginning if using a net)\",\n    \t\t\"object_time\": \"Sample collection time (or beginning if using a net)\",\n    \t\t\"object_lat\": \"Sample collection latitude (or beginning if using a net)\",\n    \t\t\"object_lon\": \"Sample collection longitude (or beginning if using a net)\",\n    \t\t\"object_depth_min\": \"Sample collection minimal depth, in m\",\n    \t\t\"object_depth_max\": \"Sample collection maximum depth, in m\",\n    \t\t\"process_pixel\": \"Pixel imaging resolution, in µm/pixel\",\n    \t\t\"process_datetime\": \"Segmentation timestamp\",\n    \t\t\"process_id\": \"Segmentation ID\",\n    \t\t\"process_uuid\": \"Segmentation UUID (Autogenerated)\",\n    \t\t\"process_source\": \"Code source link of the executed code\",\n    \t\t\"process_commit\": \"Version reference of the executed code\",\n    \t\t\"sample_gear_net_opening\": \"Sample mouth opening dimension, in mm\",\n    \t\t\"object_date_end\": \"Sample end collection date when using a net\",\n    \t\t\"object_time_end\": \"Sample end collection time when using a net\",\n    \t\t\"object_lat_end\": \"Sample end collection latitude when using a net\",\n    \t\t\"object_lon_end\": \"Sample end collection longitude when using a net\",\n    \t},\n\t\t\"sample_project\": global.get(\"sample_project\"),\n\t\t\"sample_id\": global.get(\"sample_project\") + \"_\" + global.get(\"sample_id\"),\n\t\t\"sample_ship\": global.get(\"sample_ship\"),\n\t\t\"sample_operator\": global.get(\"sample_operator\"),\n\t\t\"sample_sampling_gear\": global.get(\"sample_sampling_gear\"),\n\t\t\"sample_concentrated_sample_volume\": global.get(\"sample_concentrated_sample_volume\"),\n\t\t\"sample_dilution_factor\": global.get(\"sample_dilution_factor\"),\n\t\t\"sample_speed_through_water\": global.get(\"sample_speed_through_water\"),\n\n\t\t\"acq_id\": global.get(\"sample_project\") + \"_\" + global.get(\"sample_id\")+ \"_\" + global.get(\"acq_id\"),\n\t\t\"acq_instrument\": global.get(\"acq_instrument\"),\n\t\t\"acq_instrument_id\": global.get(\"acq_instrument_id\"),\n\t\t\"acq_celltype\": global.get(\"acq_celltype\"),\n\t\t\"acq_minimum_mesh\": global.get(\"acq_minimum_mesh\"),\n\t\t\"acq_maximum_mesh\": global.get(\"acq_maximum_mesh\"),\n\t\t\"acq_min_esd\": global.get(\"acq_min_esd\"),\n\t\t\"acq_max_esd\": global.get(\"acq_max_esd\"),\n\t\t\"acq_volume\": global.get(\"acq_volume\"),\n\t\t\"acq_imaged_volume\": global.get(\"acq_imaged_volume\"),\n\t\t\"acq_magnification\": global.get(\"acq_magnification\"),\n\t\t\"acq_fnumber_objective\": global.get(\"acq_fnumber_objective\"),\n\t\t\"acq_camera\": global.get(\"acq_camera\"),\n\t\t\"acq_nb_frame\": global.get(\"acq_nb_frame\"),\n\t\t\"acq_software\": global.get(\"acq_software\"),\n\n\t\t\"object_date\": global.get(\"object_date\"),\n\t\t\"object_time\": global.get(\"object_time\"),\n\t\t\"object_lat\": global.get(\"object_lat\"),\n\t\t\"object_lon\": global.get(\"object_lon\"),\n\t\t\"object_depth_min\": global.get(\"object_depth_min\"),\n\t\t\"object_depth_max\": global.get(\"object_depth_max\"),\n\n\t\t\"process_pixel\": global.get(\"process_pixel\"),\n\t\t\"process_source\": \"https://www.github.com/PlanktoScope/PlanktoScope\",\n\t\t\"process_commit\": global.get(\"process_commit\")\n\t}\n};\n\nif (msg.payload.config.sample_sampling_gear.startsWith(\"net\")) {\n\tmsg.payload.config[\"sample_gear_net_opening\"] = global.get(\"sample_gear_net_opening\")\n\tmsg.payload.config[\"object_date_end\"] = global.get(\"object_date_end\")\n\tmsg.payload.config[\"object_time_end\"] = global.get(\"object_time_end\")\n\tmsg.payload.config[\"object_lat_end\"] = global.get(\"object_lat_end\")\n\tmsg.payload.config[\"object_lon_end\"] = global.get(\"object_lon_end\")\n\tmsg.payload.config[\"sample_total_volume\"] = global.get(\"sample_total_volume\")\n}\n\nif ( msg.send == true){\n\treturn [msg, msg]\n}\nelse{\n\treturn [msg, null]\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 380,
        "wires": [
            [
                "29be525e.0c87fe"
            ],
            [
                "c3e50240.82aa58"
            ]
        ]
    },
    {
        "id": "40c12463.a1f84c",
        "type": "delay",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 900,
        "y": 420,
        "wires": [
            [
                "c3e50240.82aa58"
            ]
        ]
    },
    {
        "id": "4d1b02cb.83b51c",
        "type": "ui_button",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "group": "4322c187.e73e5",
        "order": 10,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Update config",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "save",
        "payload": "",
        "payloadType": "str",
        "topic": "imager/image",
        "topicType": "str",
        "x": 420,
        "y": 400,
        "wires": [
            [
                "52ea7d01.711034"
            ]
        ]
    },
    {
        "id": "5921d0d0.a3d568",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "env": [],
        "x": 120,
        "y": 220,
        "wires": [
            [
                "6cd7f5eb4747d03e",
                "4e47c3dc695a218a",
                "a4aedb01c7f15599",
                "7fe30a9079514801",
                "de06367fc82a46ed"
            ]
        ]
    },
    {
        "id": "b402f719.55bc98",
        "type": "inject",
        "z": "baa1e3d9.cb29d",
        "name": "Default: FORWARD",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "pump_direction",
        "payload": "FORWARD",
        "payloadType": "str",
        "x": 140,
        "y": 560,
        "wires": [
            [
                "bb62da8a.ebc328"
            ]
        ]
    },
    {
        "id": "51b4d0df.d70a88",
        "type": "ui_text_input",
        "z": "baa1e3d9.cb29d",
        "name": "acq_nb_frame",
        "label": "Number of images to acquire",
        "tooltip": "",
        "group": "4322c187.e73e5",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "acq_nb_frame",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 700,
        "y": 180,
        "wires": [
            [
                "67091ac0.8f9f6c",
                "99b11fe4.2795d",
                "e18598223b99a72b"
            ]
        ]
    },
    {
        "id": "999065ca.27edb8",
        "type": "switch",
        "z": "baa1e3d9.cb29d",
        "name": "topic filter",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "status/pump",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status/focus",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status/light",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status/imager",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 320,
        "y": 780,
        "wires": [
            [
                "a46a1e7f.88a92",
                "6742014e.1bb238"
            ],
            [
                "6742014e.1bb238",
                "c516d9ea.f7f6e"
            ],
            [
                "6742014e.1bb238"
            ],
            [
                "2b9d6988.d84836",
                "307c851e.fb0f7a"
            ]
        ]
    },
    {
        "id": "2b009bd7.c07004",
        "type": "ui_text",
        "z": "baa1e3d9.cb29d",
        "group": "70de8209.68416c",
        "order": 4,
        "width": 3,
        "height": 1,
        "name": "imager",
        "label": "Imager status:",
        "format": "{{msg.payload.status}}",
        "layout": "col-center",
        "x": 770,
        "y": 740,
        "wires": []
    },
    {
        "id": "c516d9ea.f7f6e",
        "type": "ui_text",
        "z": "baa1e3d9.cb29d",
        "group": "70de8209.68416c",
        "order": 1,
        "width": 3,
        "height": 1,
        "name": "focus",
        "label": "Focus status:",
        "format": "{{msg.payload.status}}",
        "layout": "col-center",
        "x": 770,
        "y": 700,
        "wires": []
    },
    {
        "id": "a46a1e7f.88a92",
        "type": "ui_text",
        "z": "baa1e3d9.cb29d",
        "group": "70de8209.68416c",
        "order": 2,
        "width": 3,
        "height": 1,
        "name": "pump",
        "label": "Pump status:",
        "format": "{{msg.payload.status}}",
        "layout": "col-center",
        "x": 770,
        "y": 660,
        "wires": []
    },
    {
        "id": "bb628f8d.98f108",
        "type": "link in",
        "z": "baa1e3d9.cb29d",
        "name": "Status for fluidic module",
        "links": [
            "58f2e0f.4e8b12"
        ],
        "x": 175,
        "y": 780,
        "wires": [
            [
                "999065ca.27edb8"
            ]
        ]
    },
    {
        "id": "307c851e.fb0f7a",
        "type": "switch",
        "z": "baa1e3d9.cb29d",
        "name": "Imaging state",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "$contains(msg.payload.status, \"jpg\")\t",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 540,
        "y": 880,
        "wires": [
            [
                "db8e3dde.44efb8"
            ],
            [
                "6742014e.1bb238"
            ]
        ]
    },
    {
        "id": "db8e3dde.44efb8",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "img_counter",
        "func": "var img_counter=flow.get('img_counter')\nif (img_counter === undefined || img_counter === \"\"){\n    img_counter = 0\n}\nimg_counter=img_counter+1\nflow.set('img_counter',img_counter)\nmsg.payload = img_counter\nmsg.payload = (100 * img_counter / global.get('acq_nb_frame')).toFixed(2)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 900,
        "wires": [
            [
                "1a2e721a.f5e876"
            ]
        ]
    },
    {
        "id": "59164d65.e7993c",
        "type": "ui_toast",
        "z": "baa1e3d9.cb29d",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1240,
        "y": 860,
        "wires": []
    },
    {
        "id": "8c7348aa.1962e8",
        "type": "template",
        "z": "baa1e3d9.cb29d",
        "name": "Create sentence",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "The {{topic}} is {{payload.status}}",
        "output": "str",
        "x": 1060,
        "y": 860,
        "wires": [
            [
                "59164d65.e7993c"
            ]
        ]
    },
    {
        "id": "6742014e.1bb238",
        "type": "change",
        "z": "baa1e3d9.cb29d",
        "name": "Remove high-level topic",
        "rules": [
            {
                "t": "change",
                "p": "topic",
                "pt": "msg",
                "from": "status/",
                "fromt": "str",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 860,
        "wires": [
            [
                "8c7348aa.1962e8"
            ]
        ]
    },
    {
        "id": "1a2e721a.f5e876",
        "type": "ui_gauge",
        "z": "baa1e3d9.cb29d",
        "name": "progress donut",
        "group": "b5d61bc7.54fe48",
        "order": 3,
        "width": 6,
        "height": 3,
        "gtype": "donut",
        "title": "",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#ffa83f",
            "#e6ff02",
            "#00dfe9"
        ],
        "seg1": "50",
        "seg2": "75",
        "x": 1060,
        "y": 900,
        "wires": []
    },
    {
        "id": "9bd72495.a8a098",
        "type": "ui_text",
        "z": "baa1e3d9.cb29d",
        "group": "4322c187.e73e5",
        "order": 5,
        "width": 5,
        "height": 1,
        "name": "Total imaged volume",
        "label": "Total imaged volume",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1260,
        "y": 140,
        "wires": []
    },
    {
        "id": "99b11fe4.2795d",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "imaged volume calc",
        "func": "var camera = global.get(\"acq_camera\");\nvar cell = global.get(\"acq_celltype\");\nvar acq_nb_frame = global.get(\"acq_nb_frame\");\nvar process_pixel = global.get(\"process_pixel\");\n\nvar volume = 0\nif (camera == \"HQ Camera\"){\n    volume = acq_nb_frame * (process_pixel*4056*process_pixel*3040*cell/1000000000) / 1000;\n}\nelse if (camera == \"Camera v2.1\"){\n    volume = acq_nb_frame * (process_pixel*3280*process_pixel*2464*cell/1000000000) / 1000;\n}\nelse{\n    msg.payload = \"The camera is not known to this system\";\n    return msg;\n}\n\nglobal.set(\"acq_imaged_volume\", volume.toFixed(4))\n\nmsg.payload = volume.toFixed(2) + \" mL\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 140,
        "wires": [
            [
                "9bd72495.a8a098",
                "5b7343f86e64be38"
            ]
        ],
        "info": "### Focusing\n##### focus.py `nb_step` `orientation`\n\n- `nb_step` : **integer** (from 1 to 100000) - number of step to perform by the stage (about 31um/step)\n- `orientation` : **string** - orientation of the focus either `up` or `down`\n\nExample:\n\n    python3.7 $HOME/PlanktoScope/scripts/focus.py 650 up\n"
    },
    {
        "id": "8e16aa2f.e40398",
        "type": "ui_text",
        "z": "baa1e3d9.cb29d",
        "group": "4322c187.e73e5",
        "order": 7,
        "width": 5,
        "height": 1,
        "name": "Total pumped volume",
        "label": "Total pumped volume",
        "format": "{{msg.payload}} mL",
        "layout": "col-center",
        "x": 1260,
        "y": 200,
        "wires": []
    },
    {
        "id": "67091ac0.8f9f6c",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "acq_volume calc",
        "func": "var user_imaging_pump_volume = global.get(\"user_imaging_pump_volume\");\nvar acq_nb_frame = global.get(\"acq_nb_frame\");\nvar acq_volume = 0\n\nacq_volume = (Number(acq_nb_frame) * Number(user_imaging_pump_volume)).toFixed(2)\nglobal.set(\"acq_volume\", acq_volume)\n\nmsg.payload = acq_volume\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 200,
        "wires": [
            [
                "8e16aa2f.e40398",
                "5b7343f86e64be38"
            ]
        ],
        "info": "### Focusing\n##### focus.py `nb_step` `orientation`\n\n- `nb_step` : **integer** (from 1 to 100000) - number of step to perform by the stage (about 31um/step)\n- `orientation` : **string** - orientation of the focus either `up` or `down`\n\nExample:\n\n    python3.7 $HOME/PlanktoScope/scripts/focus.py 650 up\n"
    },
    {
        "id": "2b9d6988.d84836",
        "type": "switch",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "status",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "camera_name",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 760,
        "wires": [
            [
                "2b009bd7.c07004"
            ],
            [
                "3bbb756a.84190a"
            ]
        ]
    },
    {
        "id": "3bbb756a.84190a",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "set camera name",
        "func": "global.set(\"acq_camera\", msg.payload.camera_name);\n\nmsg.payload = msg.payload.camera_name;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 810,
        "y": 780,
        "wires": [
            [
                "559a8085.1d6b9"
            ]
        ]
    },
    {
        "id": "559a8085.1d6b9",
        "type": "link out",
        "z": "baa1e3d9.cb29d",
        "name": "Camera Name",
        "links": [
            "30067f35.532f2",
            "572a6daa.6004c4",
            "cfc783d7.d6ceb"
        ],
        "x": 945,
        "y": 780,
        "wires": []
    },
    {
        "id": "49ea1123.ee1768",
        "type": "ui_numeric",
        "z": "baa1e3d9.cb29d",
        "name": "user_sleep_before",
        "label": "Delay to stabilize image (s)",
        "tooltip": "Happens before every capture",
        "group": "4322c187.e73e5",
        "order": 4,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "user_sleep_before",
        "topicType": "str",
        "format": "{{value}}",
        "min": "0.1",
        "max": "5",
        "step": "0.1",
        "className": "",
        "x": 690,
        "y": 260,
        "wires": [
            [
                "e18598223b99a72b"
            ]
        ]
    },
    {
        "id": "572a6daa.6004c4",
        "type": "link in",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "links": [
            "559a8085.1d6b9"
        ],
        "x": 765,
        "y": 100,
        "wires": [
            [
                "99b11fe4.2795d"
            ]
        ]
    },
    {
        "id": "8032ea50.1b57f",
        "type": "ui_template",
        "z": "baa1e3d9.cb29d",
        "group": "b5d61bc7.54fe48",
        "name": "progress header",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<center><h2>Capture progress</h2></center>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 1240,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "df1ea904.cd261",
        "type": "ui_slider",
        "z": "baa1e3d9.cb29d",
        "name": "user_imaging_pump_volume",
        "label": "Pumped volume (mL)",
        "tooltip": "inbetween frames",
        "group": "4322c187.e73e5",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "user_imaging_pump_volume",
        "topicType": "str",
        "min": "0.001",
        "max": "0.5",
        "step": "0.001",
        "className": "",
        "x": 660,
        "y": 220,
        "wires": [
            [
                "67091ac0.8f9f6c",
                "e18598223b99a72b"
            ]
        ]
    },
    {
        "id": "c515edcd8681c244",
        "type": "link in",
        "z": "baa1e3d9.cb29d",
        "name": "Cam Stream",
        "links": [
            "49111a72f4e32740"
        ],
        "x": 195,
        "y": 40,
        "wires": [
            [
                "a77625dc21c8a3cc"
            ]
        ]
    },
    {
        "id": "a77625dc21c8a3cc",
        "type": "template",
        "z": "baa1e3d9.cb29d",
        "name": "Prepare stream HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<center>\n  <img src=\"http://{{payload}}:8000/stream.mjpg\"\n    onerror=\"this.onerror=null; this.src='http://{{payload}}:80/error.svg'\"\n    alt=\"If you see this, there probably is an error either with your camera or with the python service. Please restart your machine.\"\n    width=\"100%\" height=\"100%\">\n</center>",
        "output": "str",
        "x": 340,
        "y": 40,
        "wires": [
            [
                "bb2bb7ce.1d1458"
            ]
        ]
    },
    {
        "id": "ad153212312f0347",
        "type": "ui_ui_control",
        "z": "baa1e3d9.cb29d",
        "name": "onTab",
        "events": "all",
        "x": 450,
        "y": 360,
        "wires": [
            [
                "9b69ea945b587192"
            ]
        ]
    },
    {
        "id": "9b69ea945b587192",
        "type": "function",
        "z": "baa1e3d9.cb29d",
        "name": "check tab",
        "func": "if (msg.name == \"Fluidic Acquisition\"){\n    return { \"topic\": \"imager/ image\" }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 360,
        "wires": [
            [
                "52ea7d01.711034"
            ]
        ],
        "outputLabels": [
            "interface"
        ]
    },
    {
        "id": "156e40de9598114b",
        "type": "change",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pump_direction",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "35d1833cb5d7c1e9",
        "type": "subflow:4ed26b8b.253504",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "x": 920,
        "y": 460,
        "wires": []
    },
    {
        "id": "5b7343f86e64be38",
        "type": "subflow:4ed26b8b.253504",
        "z": "baa1e3d9.cb29d",
        "name": "",
        "x": 1240,
        "y": 260,
        "wires": []
    },
    {
        "id": "6cd7f5eb4747d03e",
        "type": "change",
        "z": "baa1e3d9.cb29d",
        "name": "get acq_celltype",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.acq_celltype",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 140,
        "wires": [
            [
                "cc0ca68b.4263a8"
            ]
        ]
    },
    {
        "id": "de06367fc82a46ed",
        "type": "change",
        "z": "baa1e3d9.cb29d",
        "name": "get acq_nb_frame",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.acq_nb_frame",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 180,
        "wires": [
            [
                "51b4d0df.d70a88"
            ]
        ]
    },
    {
        "id": "a4aedb01c7f15599",
        "type": "change",
        "z": "baa1e3d9.cb29d",
        "name": "get user_sleep_before",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.user_sleep_before",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 260,
        "wires": [
            [
                "49ea1123.ee1768"
            ]
        ]
    },
    {
        "id": "4e47c3dc695a218a",
        "type": "change",
        "z": "baa1e3d9.cb29d",
        "name": "get acq_id",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.acq_id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 300,
        "wires": [
            [
                "6b34c456.83178c"
            ]
        ]
    },
    {
        "id": "7fe30a9079514801",
        "type": "change",
        "z": "baa1e3d9.cb29d",
        "name": "get user_imaging_pump_volume",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.user_imaging_pump_volume",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 220,
        "wires": [
            [
                "df1ea904.cd261"
            ]
        ]
    },
    {
        "id": "9d6abe67.6bb3d",
        "type": "ui_button",
        "z": "cb95299c.2817c8",
        "name": "",
        "group": "64903b47.4034e4",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Home",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "home",
        "payload": "{\"tab\":\"Home\"}",
        "payloadType": "json",
        "topic": "",
        "x": 310,
        "y": 600,
        "wires": [
            [
                "f0fb77cf.8f1c28"
            ]
        ]
    },
    {
        "id": "f0fb77cf.8f1c28",
        "type": "ui_ui_control",
        "z": "cb95299c.2817c8",
        "name": "",
        "events": "change",
        "x": 620,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "8ec68b82.17e3d8",
        "type": "ui_button",
        "z": "cb95299c.2817c8",
        "name": "Start segmentation",
        "group": "abeb6dad.635a2",
        "order": 10,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Start segmentation",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"action\":\"segment\"}",
        "payloadType": "json",
        "topic": "segmenter/segment",
        "x": 250,
        "y": 460,
        "wires": [
            [
                "33c28dc1.238002",
                "c72a1064.1ec388"
            ]
        ]
    },
    {
        "id": "27be7971.b3fbce",
        "type": "ui_button",
        "z": "cb95299c.2817c8",
        "d": true,
        "name": "Stop segmentation",
        "group": "abeb6dad.635a2",
        "order": 12,
        "width": 4,
        "height": 1,
        "passthru": true,
        "label": "Stop segmentation",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "icon": "",
        "payload": "{\"action\":\"stop\"}",
        "payloadType": "json",
        "topic": "segmenter/segment",
        "x": 250,
        "y": 520,
        "wires": [
            [
                "16f3cef4.0acac9"
            ]
        ]
    },
    {
        "id": "16f3cef4.0acac9",
        "type": "mqtt out",
        "z": "cb95299c.2817c8",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "8dc3722c.06efa8",
        "x": 730,
        "y": 520,
        "wires": []
    },
    {
        "id": "8f3788f6.ddcf98",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "obj_counter",
        "func": "obj_counter = flow.get('obj_counter')\nobj_counter = obj_counter + 1\nflow.set('obj_counter', obj_counter)\nmsg.payload = obj_counter\nmsg.topic = \"object count\"\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 690,
        "y": 800,
        "wires": [
            [
                "fa3b7929.ac7da8",
                "9d53dbe2.dbffe8"
            ]
        ]
    },
    {
        "id": "aa38dbbc.cf0a9",
        "type": "switch",
        "z": "cb95299c.2817c8",
        "name": "Segmenter",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "status/segmenter",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status/segmenter/name",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status/segmenter/object_id",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "status/segmenter/metric",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 370,
        "y": 740,
        "wires": [
            [
                "b9a23b91.93638",
                "6919465f.332e5"
            ],
            [
                "49af3d24.1799e4"
            ],
            [
                "8f3788f6.ddcf98"
            ],
            [
                "50ce901f.b5034"
            ]
        ]
    },
    {
        "id": "9d53dbe2.dbffe8",
        "type": "ui_chart",
        "z": "cb95299c.2817c8",
        "name": "counter graph",
        "group": "46be9c86.dea684",
        "order": 7,
        "width": 10,
        "height": 2,
        "label": "",
        "chartType": "horizontalBar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Objects count will be shown here once the segmentation is started",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1200,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "50ce901f.b5034",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "ex : area",
        "func": "// Payload looks like this:\n// {'name': '01_13_28_232066_0',\n//  'metadata': {\n//      'label': 0, 'width': 29, 'height': 80, ....\n\nmsg.payload=msg.payload.metadata.area_exc\nmsg.topic=\"area\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 920,
        "wires": [
            [
                "458cd82e.03d258"
            ]
        ]
    },
    {
        "id": "a4f0f0d1.3aca88",
        "type": "ui_toast",
        "z": "cb95299c.2817c8",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1200,
        "y": 680,
        "wires": []
    },
    {
        "id": "458cd82e.03d258",
        "type": "ui_chart",
        "z": "cb95299c.2817c8",
        "name": "Area chart",
        "group": "46be9c86.dea684",
        "order": 9,
        "width": 10,
        "height": 6,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "Objects area will be shown here once the segmentation is started",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 1190,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "49af3d24.1799e4",
        "type": "debug",
        "z": "cb95299c.2817c8",
        "name": "segmentation name",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 760,
        "wires": []
    },
    {
        "id": "7088a5be.0c79a4",
        "type": "template",
        "z": "cb95299c.2817c8",
        "name": "Create sentence",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "The {{topic}} is {{payload.status}}",
        "output": "str",
        "x": 980,
        "y": 680,
        "wires": [
            [
                "a4f0f0d1.3aca88"
            ]
        ]
    },
    {
        "id": "b9a23b91.93638",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "Remove high-level topic",
        "rules": [
            {
                "t": "change",
                "p": "topic",
                "pt": "msg",
                "from": "status/",
                "fromt": "str",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 680,
        "wires": [
            [
                "7088a5be.0c79a4"
            ]
        ]
    },
    {
        "id": "6919465f.332e5",
        "type": "ui_text",
        "z": "cb95299c.2817c8",
        "group": "46be9c86.dea684",
        "order": 1,
        "width": 10,
        "height": 1,
        "name": "segmenter",
        "label": "Segmenter status:",
        "format": "{{msg.payload.status}}",
        "layout": "row-spread",
        "x": 690,
        "y": 720,
        "wires": []
    },
    {
        "id": "fa3b7929.ac7da8",
        "type": "ui_text",
        "z": "cb95299c.2817c8",
        "group": "46be9c86.dea684",
        "order": 5,
        "width": 4,
        "height": 1,
        "name": "counter",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1180,
        "y": 800,
        "wires": []
    },
    {
        "id": "640ece83.88cab",
        "type": "inject",
        "z": "cb95299c.2817c8",
        "name": "Init graphs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "object count",
        "payload": "0",
        "payloadType": "num",
        "x": 690,
        "y": 880,
        "wires": [
            [
                "ac439738.28bc18",
                "4f3f7c4a.cb21c4"
            ]
        ]
    },
    {
        "id": "25867454.a8e334",
        "type": "link in",
        "z": "cb95299c.2817c8",
        "name": "Segmenter module status",
        "links": [
            "dcf5bd45.16a8d"
        ],
        "x": 175,
        "y": 740,
        "wires": [
            [
                "aa38dbbc.cf0a9"
            ]
        ]
    },
    {
        "id": "c8749cbb.55254",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "set global",
        "func": "global.set(msg.topic, msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 380,
        "wires": [
            [
                "1df09f8edc71d69c"
            ]
        ]
    },
    {
        "id": "d43c3ed9.e6cb1",
        "type": "ui_template",
        "z": "cb95299c.2817c8",
        "group": "46be9c86.dea684",
        "name": "Object counts",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<div><center><h2>Object counts</h2></center></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1200,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "857e90c1.cd25b",
        "type": "ui_template",
        "z": "cb95299c.2817c8",
        "group": "46be9c86.dea684",
        "name": "Area chart",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<div><center><h2>Area chart</h2></center></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 1190,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "33c28dc1.238002",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "prepare segmentation",
        "func": "global.set('obj_counter', 0);\n\nvar segmentation_list = flow.get('segmentation_list')\nif (segmentation_list !== undefined && segmentation_list !== \"\") {\n    msg.payload['path'] = segmentation_list\n}\n\n\nvar force = flow.get('force')\nif (force !== undefined && force !== \"\") {\n    msg.payload['settings'] = {\"force\":Boolean(force)}\n}\n\n\nvar recursive = flow.get('recursive')\nif (recursive !== undefined && recursive !== \"\") {\n    if (\"settings\" in msg.payload){\n        msg.payload.settings[\"recursive\"] = Boolean(recursive)\n    }\n    else{\n        msg.payload['settings'] = {\"recursive\": Boolean(recursive)}\n    }\n}\n\nvar ecotaxa = flow.get('ecotaxa')\nif (ecotaxa !== undefined && ecotaxa !== \"\") {\n    if (\"settings\" in msg.payload){\n        msg.payload.settings[\"ecotaxa\"] = Boolean(ecotaxa)\n    }\n    else{\n        msg.payload['settings'] = {\"ecotaxa\": Boolean(ecotaxa)}\n    }\n}\n\nvar keep = flow.get('keep')\nif (keep !== undefined && keep !== \"\") {\n    if (\"settings\" in msg.payload){\n        msg.payload.settings[\"keep\"] = Boolean(keep)\n    }\n    else{\n        msg.payload['settings'] = {\"keep\": Boolean(keep)}\n    }\n}\n\nvar process_id = global.get('process_id')\nif (process_id !== undefined && process_id !== \"\") {\n    if (\"settings\" in msg.payload){\n        msg.payload.settings[\"process_id\"] = process_id\n    }\n    else{\n        msg.payload['settings'] = {\"process_id\": process_id}\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 460,
        "wires": [
            [
                "16f3cef4.0acac9"
            ]
        ]
    },
    {
        "id": "fa12f9f8.00cfa8",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "cb95299c.2817c8",
        "name": "",
        "env": [],
        "x": 280,
        "y": 380,
        "wires": [
            [
                "3b72d11c.86e9e6"
            ]
        ]
    },
    {
        "id": "3b72d11c.86e9e6",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "get process_id",
        "func": "msg.payload = msg.payload.process_id;\nmsg.topic = \"process_id\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 380,
        "wires": [
            [
                "56971109c8be3b54"
            ]
        ]
    },
    {
        "id": "3ea12061.ce62c",
        "type": "ui_list",
        "z": "cb95299c.2817c8",
        "group": "abeb6dad.635a2",
        "name": "",
        "order": 9,
        "width": 10,
        "height": 11,
        "lineType": "one",
        "actionType": "check",
        "allowHTML": false,
        "outputs": 1,
        "topic": "",
        "x": 710,
        "y": 140,
        "wires": [
            [
                "cb3b87b5.63c4"
            ]
        ]
    },
    {
        "id": "8bd8fb2c.53fa4",
        "type": "dir2files",
        "z": "cb95299c.2817c8",
        "name": "",
        "dirname": "/home/pi/data/img/",
        "pathRegex": "",
        "isRecursive": true,
        "findDir": true,
        "isArray": true,
        "x": 340,
        "y": 140,
        "wires": [
            [
                "ba2947.c854deb8"
            ]
        ]
    },
    {
        "id": "127d4ee.f8ad1b1",
        "type": "ui_button",
        "z": "cb95299c.2817c8",
        "name": "Refresh",
        "group": "abeb6dad.635a2",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Update acquisition's folder list",
        "tooltip": "Refresh the list of previous acquisitions",
        "color": "",
        "bgcolor": "",
        "icon": "mi-find_replace",
        "payload": "",
        "payloadType": "date",
        "topic": "update",
        "x": 140,
        "y": 140,
        "wires": [
            [
                "8bd8fb2c.53fa4",
                "56f845f5.e7c054"
            ]
        ]
    },
    {
        "id": "946ce9ee.092cf",
        "type": "inject",
        "z": "cb95299c.2817c8",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "8bd8fb2c.53fa4",
                "56f845f5.e7c054"
            ]
        ]
    },
    {
        "id": "cb3b87b5.63c4",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "update segmentation_list",
        "func": "var segmentation_list = flow.get('segmentation_list');\n\nif (segmentation_list === undefined || segmentation_list === \"\") {\n    segmentation_list = []\n    console.log(\"error\")\n}\n\npath = \"/home/pi/data/img/\" + msg.payload.title\n\nif (msg.payload.isChecked){\n    if (segmentation_list.includes(path) === false){\n        segmentation_list.push(path)\n    }\n    // Element already in list, don't push it more than once\n    //segmentation_list.push(msg.payload[\"title\"])\n}\nelse {\n    var pos = segmentation_list.indexOf(path)\n    segmentation_list.splice(pos, 1)\n}\n\nflow.set('segmentation_list', segmentation_list)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 910,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "56f845f5.e7c054",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "Reset segmentation_list",
        "rules": [
            {
                "t": "set",
                "p": "segmentation_list",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "7fc72364.8f038c",
        "type": "ui_template",
        "z": "cb95299c.2817c8",
        "group": "abeb6dad.635a2",
        "name": "Update message",
        "order": 1,
        "width": 10,
        "height": 3,
        "format": "<div><left>You can choose here in which folder(s) you want the segmentation script to run. A few details though:\n<br>The segmentation is run recursively in all folders. So if you select a top level folder, the segmentation will be run in all subfolders.\n<br>Also, you will be able to chose wether for force the segmentation for folders in which it has run already.</left></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 150,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "ba2947.c854deb8",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "remove common",
        "func": "function remove_path(item, index, array) {\n  array[index] = item.replace(\"/home/pi/data/img/\", \"\")\n} \n\nmsg.payload.forEach(remove_path)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 140,
        "wires": [
            [
                "3ea12061.ce62c"
            ]
        ]
    },
    {
        "id": "21af0db1.c2c182",
        "type": "ui_multistate_switch",
        "z": "cb95299c.2817c8",
        "name": "recursive toggle",
        "group": "abeb6dad.635a2",
        "order": 4,
        "width": 5,
        "height": 1,
        "label": "Recursive folder",
        "stateField": "payload",
        "enableField": "enable",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "options": [
            {
                "label": "No",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Yes",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "880b192a.88e2d"
            ]
        ]
    },
    {
        "id": "dffb9881.feef8",
        "type": "ui_multistate_switch",
        "z": "cb95299c.2817c8",
        "name": "force toggle",
        "group": "abeb6dad.635a2",
        "order": 3,
        "width": 5,
        "height": 1,
        "label": "Force rework",
        "stateField": "payload",
        "enableField": "enable",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "options": [
            {
                "label": "No",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Yes",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "x": 350,
        "y": 300,
        "wires": [
            [
                "a4f68fa6.5d77f8"
            ]
        ]
    },
    {
        "id": "880b192a.88e2d",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "recursive",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "a4f68fa6.5d77f8",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "force",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "1ef1b43b.b0f064",
        "type": "inject",
        "z": "cb95299c.2817c8",
        "name": "0",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "dffb9881.feef8",
                "a4f68fa6.5d77f8"
            ]
        ]
    },
    {
        "id": "f078c068.eacf58",
        "type": "ui_template",
        "z": "cb95299c.2817c8",
        "group": "46be9c86.dea684",
        "name": "Stream Segmented object",
        "order": 2,
        "width": 10,
        "height": 8,
        "format": "<span ng-bind-html=\"msg.payload\"></span>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 1230,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "43f97b93.b76294",
        "type": "inject",
        "z": "cb95299c.2817c8",
        "name": "1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "21af0db1.c2c182",
                "880b192a.88e2d"
            ]
        ]
    },
    {
        "id": "ac439738.28bc18",
        "type": "function",
        "z": "cb95299c.2817c8",
        "name": "chart init",
        "func": "obj=[{\"series\": [],\"data\": [],\"labels\": []}]\nmsg.payload = obj\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 880,
        "wires": [
            [
                "458cd82e.03d258"
            ]
        ]
    },
    {
        "id": "4f3f7c4a.cb21c4",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "obj_counter",
                "pt": "flow",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 840,
        "wires": [
            [
                "fa3b7929.ac7da8",
                "9d53dbe2.dbffe8"
            ]
        ]
    },
    {
        "id": "6bce0f60.f48998",
        "type": "link in",
        "z": "cb95299c.2817c8",
        "name": "",
        "links": [
            "596fc9d4.46c75"
        ],
        "x": 735,
        "y": 840,
        "wires": [
            [
                "4f3f7c4a.cb21c4",
                "ac439738.28bc18"
            ]
        ]
    },
    {
        "id": "596fc9d4.46c75",
        "type": "link out",
        "z": "cb95299c.2817c8",
        "name": "",
        "links": [
            "6bce0f60.f48998"
        ],
        "x": 595,
        "y": 500,
        "wires": []
    },
    {
        "id": "c72a1064.1ec388",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "Reset counters",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "object count",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 500,
        "wires": [
            [
                "596fc9d4.46c75"
            ]
        ]
    },
    {
        "id": "9367534a.fb8568",
        "type": "ui_multistate_switch",
        "z": "cb95299c.2817c8",
        "name": "Ecotaxa archive",
        "group": "abeb6dad.635a2",
        "order": 6,
        "width": 5,
        "height": 1,
        "label": "Ecotaxa archive",
        "stateField": "payload",
        "enableField": "enable",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "options": [
            {
                "label": "No",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Yes",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "x": 960,
        "y": 220,
        "wires": [
            [
                "25ac4f9a.5b05c8"
            ]
        ]
    },
    {
        "id": "25ac4f9a.5b05c8",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ecotaxa",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "bef78886.8f0b98",
        "type": "inject",
        "z": "cb95299c.2817c8",
        "name": "1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 790,
        "y": 240,
        "wires": [
            [
                "9367534a.fb8568",
                "25ac4f9a.5b05c8"
            ]
        ]
    },
    {
        "id": "32465a4e.8fcac6",
        "type": "ui_multistate_switch",
        "z": "cb95299c.2817c8",
        "name": "Keep objects",
        "group": "abeb6dad.635a2",
        "order": 5,
        "width": 5,
        "height": 1,
        "label": "Keep objects",
        "stateField": "payload",
        "enableField": "enable",
        "rounded": true,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "options": [
            {
                "label": "No",
                "value": "0",
                "valueType": "num",
                "color": "#009933"
            },
            {
                "label": "Yes",
                "value": "1",
                "valueType": "num",
                "color": "#999999"
            }
        ],
        "x": 950,
        "y": 300,
        "wires": [
            [
                "8dd6f57f.b77f98"
            ]
        ]
    },
    {
        "id": "8dd6f57f.b77f98",
        "type": "change",
        "z": "cb95299c.2817c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "keep",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "8090df89.c029e",
        "type": "inject",
        "z": "cb95299c.2817c8",
        "name": "1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 790,
        "y": 280,
        "wires": [
            [
                "32465a4e.8fcac6",
                "8dd6f57f.b77f98"
            ]
        ]
    },
    {
        "id": "56971109c8be3b54",
        "type": "ui_text_input",
        "z": "cb95299c.2817c8",
        "name": "process_id",
        "label": "Process unique ID*",
        "tooltip": "",
        "group": "abeb6dad.635a2",
        "order": 2,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "process_id",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 670,
        "y": 380,
        "wires": [
            [
                "c8749cbb.55254"
            ]
        ]
    },
    {
        "id": "604659d148759b84",
        "type": "link in",
        "z": "cb95299c.2817c8",
        "name": "Cam Stream",
        "links": [
            "49111a72f4e32740"
        ],
        "x": 825,
        "y": 600,
        "wires": [
            [
                "e077b83ad375cb95"
            ]
        ]
    },
    {
        "id": "e077b83ad375cb95",
        "type": "template",
        "z": "cb95299c.2817c8",
        "name": "Prepare stream HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<center>\n    Latest object segmented:<br/>\n    <img src=\"http://{{payload}}:8001/object.mjpg\"\n    onerror=\"this.onerror=null; this.src='http://{{payload}}:80/error.svg'\"\n    alt=\"If you see this, there probably is an error either with your camera or with the python service. Please restart your machine.\"\n    style=\"max-width: 100%;max-height: 100%;\">\n</center>",
        "output": "str",
        "x": 980,
        "y": 600,
        "wires": [
            [
                "f078c068.eacf58"
            ]
        ]
    },
    {
        "id": "1df09f8edc71d69c",
        "type": "subflow:4ed26b8b.253504",
        "z": "cb95299c.2817c8",
        "name": "",
        "x": 1020,
        "y": 380,
        "wires": []
    },
    {
        "id": "2911fbc6.d28c24",
        "type": "ui_template",
        "z": "c1660bc.e7ff7f8",
        "group": "c0ebfc57.42527",
        "name": "Image browser",
        "order": 1,
        "width": 24,
        "height": 24,
        "format": "<center>\n<object data=\"http://{{msg.payload}}:80/\" width=\"1400px\" height=\"1100px\">\n</object>\n</center>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "x": 400,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "3bb4970164f5e7b2",
        "type": "link in",
        "z": "c1660bc.e7ff7f8",
        "name": "Cam Stream",
        "links": [
            "49111a72f4e32740"
        ],
        "x": 255,
        "y": 100,
        "wires": [
            [
                "2911fbc6.d28c24"
            ]
        ]
    },
    {
        "id": "8bd1f3dc.9affe8",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "1",
        "oldrc": false,
        "name": "git user.name",
        "x": 1140,
        "y": 60,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "b40d1f65.39e14",
        "type": "template",
        "z": "9daf9e2b.019fc",
        "name": "git config",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "git config --global --replace-all user.name \"{{payload}}\"",
        "output": "str",
        "x": 960,
        "y": 60,
        "wires": [
            [
                "8bd1f3dc.9affe8"
            ]
        ]
    },
    {
        "id": "35eb925e.5f8016",
        "type": "link in",
        "z": "9daf9e2b.019fc",
        "name": "Git config",
        "links": [
            "52af9ac0.60eb24"
        ],
        "x": 795,
        "y": 100,
        "wires": [
            [
                "b40d1f65.39e14",
                "6d7dd372.3b7814"
            ]
        ]
    },
    {
        "id": "4e5183bd.e77bac",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "1",
        "oldrc": false,
        "name": "git user.email",
        "x": 1130,
        "y": 140,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "6d7dd372.3b7814",
        "type": "template",
        "z": "9daf9e2b.019fc",
        "name": "git config",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "git config --global --replace-all user.email \"{{payload}}\"",
        "output": "str",
        "x": 960,
        "y": 140,
        "wires": [
            [
                "4e5183bd.e77bac"
            ]
        ]
    },
    {
        "id": "e564e9ad.7c312",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "name": "Update",
        "group": "1be83144.4fe4bf",
        "order": 10,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "System Update",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "mi-system_update",
        "payload": " ",
        "payloadType": "str",
        "topic": "update",
        "topicType": "str",
        "x": 220,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "2d2ef1fd.40e6e6",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "command": "bash /home/pi/PlanktoScope/scripts/bash/start_update.sh",
        "addpay": true,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "oldrc": false,
        "name": "Update",
        "x": 380,
        "y": 460,
        "wires": [
            [
                "64f61762.68c788",
                "83c5a708.a5715",
                "d334d264.8a7728"
            ],
            [],
            []
        ]
    },
    {
        "id": "8f08c4eb.db74b8",
        "type": "ui_template",
        "z": "9daf9e2b.019fc",
        "d": true,
        "group": "1be83144.4fe4bf",
        "name": "Update message",
        "order": 1,
        "width": 12,
        "height": 2,
        "format": "<div><center>If you want to update to the latest code version of Node-Red and Python, please click here.\nWe are trying to save your configuration changes with git stash and restore them afterwards, but clearly, things may break!\nIf you have made changes to the flow, you will lose them. Please commit those changes from Node-Red interface, from the Project History tab.</center></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 150,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "64f61762.68c788",
        "type": "ui_toast",
        "z": "9daf9e2b.019fc",
        "position": "dialog",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Update notif",
        "x": 610,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "83c5a708.a5715",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "command": "git --git-dir=/home/pi/PlanktoScope/.git describe --long --tags",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get git revision",
        "x": 620,
        "y": 340,
        "wires": [
            [
                "af2b8d95.195bb8",
                "b6bc9b81.ff942"
            ],
            [],
            []
        ]
    },
    {
        "id": "d334d264.8a7728",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "d": true,
        "command": "git --git-dir=/home/pi/PlanktoScope/.git branch --list",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get git branch",
        "x": 620,
        "y": 260,
        "wires": [
            [
                "e5e8e66c.899588"
            ],
            [],
            []
        ]
    },
    {
        "id": "e4342b66.72972",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "d": true,
        "name": "get git branch",
        "group": "1be83144.4fe4bf",
        "order": 4,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Update branch list",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "mi-compare_arrows",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 360,
        "y": 260,
        "wires": [
            [
                "d334d264.8a7728"
            ]
        ]
    },
    {
        "id": "3f13b9f8.bac94e",
        "type": "ui_dropdown",
        "z": "9daf9e2b.019fc",
        "d": true,
        "name": "Git branch list",
        "label": "Switch branch to",
        "tooltip": "",
        "place": "branch",
        "group": "1be83144.4fe4bf",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "branch",
        "topicType": "str",
        "className": "",
        "x": 1000,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "e5e8e66c.899588",
        "type": "function",
        "z": "9daf9e2b.019fc",
        "name": "filter branch",
        "func": "msg.options = msg.payload.trimEnd().split('\\n')\nmsg.payload = msg.options.find((str) => str.startsWith('*'));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 810,
        "y": 260,
        "wires": [
            [
                "3f13b9f8.bac94e"
            ]
        ]
    },
    {
        "id": "c1fb03f7.e675f8",
        "type": "inject",
        "z": "9daf9e2b.019fc",
        "name": "once",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "start",
        "payloadType": "str",
        "x": 390,
        "y": 300,
        "wires": [
            [
                "d334d264.8a7728",
                "83c5a708.a5715"
            ]
        ]
    },
    {
        "id": "af2b8d95.195bb8",
        "type": "ui_text",
        "z": "9daf9e2b.019fc",
        "group": "1be83144.4fe4bf",
        "order": 2,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Current code version",
        "format": "{{msg.payload.trim()}}",
        "layout": "row-center",
        "className": "",
        "x": 840,
        "y": 320,
        "wires": []
    },
    {
        "id": "b6bc9b81.ff942",
        "type": "function",
        "z": "9daf9e2b.019fc",
        "name": "save process_commit",
        "func": "msg.payload = msg.payload.trim()\n\nglobal.set(\"process_commit\", msg.payload);\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "6c20d6a7.869b6"
            ]
        ]
    },
    {
        "id": "6c20d6a7.869b6",
        "type": "link out",
        "z": "9daf9e2b.019fc",
        "name": "Git revision",
        "links": [
            "9373b3f6.33a2b"
        ],
        "x": 995,
        "y": 360,
        "wires": []
    },
    {
        "id": "7de3a9b4.0ab108",
        "type": "ui_toast",
        "z": "9daf9e2b.019fc",
        "position": "top right",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Git branch update",
        "x": 1190,
        "y": 220,
        "wires": []
    },
    {
        "id": "ccc7d79b.a419f",
        "type": "change",
        "z": "9daf9e2b.019fc",
        "name": "",
        "rules": [
            {
                "p": "payload",
                "t": "set",
                "pt": "msg",
                "to": "List update successfull",
                "tot": "str"
            },
            {
                "p": "topic",
                "t": "set",
                "pt": "msg",
                "to": "Branch list update",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 220,
        "wires": [
            [
                "7de3a9b4.0ab108"
            ]
        ]
    },
    {
        "id": "41257b90b51b91ce",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "name": "",
        "group": "a7d64879.38298",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Reboot",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "icon": "fa-repeat fa-2x",
        "payload": "reboot",
        "payloadType": "str",
        "topic": "reboot",
        "x": 240,
        "y": 760,
        "wires": [
            [
                "f12508dfd319056d"
            ]
        ]
    },
    {
        "id": "f12508dfd319056d",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "command": "sudo",
        "addpay": "payload",
        "append": "now",
        "useSpawn": "false",
        "timer": "2",
        "winHide": false,
        "oldrc": false,
        "name": "sudo cmd now",
        "x": 460,
        "y": 800,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "49395fbf6d8cfefb",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "name": "",
        "group": "a7d64879.38298",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Shutdown",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "icon": "fa-power-off fa-2x",
        "payload": "shutdown",
        "payloadType": "str",
        "topic": "shutdown",
        "x": 240,
        "y": 840,
        "wires": [
            [
                "f12508dfd319056d"
            ]
        ]
    },
    {
        "id": "1641515e5ade39e9",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "command": "python3 -u /home/pi/PlanktoScope/scripts/main.py",
        "addpay": false,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 750,
        "y": 680,
        "wires": [
            [],
            [
                "17878e6769071d34"
            ],
            []
        ]
    },
    {
        "id": "49deafc21b05d761",
        "type": "delay",
        "z": "9daf9e2b.019fc",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 440,
        "y": 680,
        "wires": [
            [
                "1641515e5ade39e9"
            ]
        ]
    },
    {
        "id": "f7a682b749dfc75d",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "name": "Restart Python",
        "group": "a7d64879.38298",
        "order": 2,
        "width": 7,
        "height": 1,
        "passthru": true,
        "label": "Restart Python",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "icon": "fa-refresh fa-2x",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 220,
        "y": 680,
        "wires": [
            [
                "49deafc21b05d761",
                "daf65db104e714f4",
                "518610fc66f47ce5"
            ]
        ]
    },
    {
        "id": "518610fc66f47ce5",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "command": "sudo kill -15 `cat /tmp/pscope_pid`",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Python soft kill",
        "x": 460,
        "y": 740,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "daf65db104e714f4",
        "type": "exec",
        "z": "9daf9e2b.019fc",
        "command": "sudo killall -15 raspimjpeg",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Raspimjpeg soft kill",
        "x": 470,
        "y": 620,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "582dee9788d75a1e",
        "type": "ui_button",
        "z": "9daf9e2b.019fc",
        "name": "",
        "group": "a7d64879.38298",
        "order": 5,
        "width": 8,
        "height": 1,
        "passthru": true,
        "label": "Clear Log",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-eraser",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 730,
        "y": 780,
        "wires": [
            [
                "f4f8319db44c1d0d"
            ]
        ]
    },
    {
        "id": "9f87479dc1d74fac",
        "type": "catch",
        "z": "9daf9e2b.019fc",
        "name": "Catch Errors",
        "scope": null,
        "uncaught": false,
        "x": 720,
        "y": 740,
        "wires": [
            [
                "b96b19d850a399f2"
            ]
        ]
    },
    {
        "id": "b96b19d850a399f2",
        "type": "function",
        "z": "9daf9e2b.019fc",
        "name": "Get error",
        "func": "msg.payload = \"Node Red Error: \" + msg.error + \" created by the message \" + msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 740,
        "wires": [
            [
                "17878e6769071d34"
            ]
        ]
    },
    {
        "id": "f4f8319db44c1d0d",
        "type": "function",
        "z": "9daf9e2b.019fc",
        "name": "Clear log",
        "func": "flow.set(\"python_log\", \"Log cleared!\");\nmsg.payload =\"Log cleared!\\n\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 780,
        "wires": [
            [
                "c0f3e5b0db2242f9"
            ]
        ]
    },
    {
        "id": "0652ac03a2a3482b",
        "type": "inject",
        "z": "9daf9e2b.019fc",
        "name": "once",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "start",
        "payloadType": "str",
        "x": 50,
        "y": 680,
        "wires": [
            [
                "f7a682b749dfc75d"
            ]
        ]
    },
    {
        "id": "90687eca9c539a55",
        "type": "link in",
        "z": "9daf9e2b.019fc",
        "name": "Python restart",
        "links": [
            "e41870d7.300eb8"
        ],
        "x": 75,
        "y": 640,
        "wires": [
            [
                "f7a682b749dfc75d"
            ]
        ]
    },
    {
        "id": "6acdec87409926a1",
        "type": "link in",
        "z": "9daf9e2b.019fc",
        "name": "Shutdown",
        "links": [
            "e08cfcb8.2a67e8",
            "f7855aef2c2e31b2"
        ],
        "x": 275,
        "y": 800,
        "wires": [
            [
                "f12508dfd319056d"
            ]
        ]
    },
    {
        "id": "17878e6769071d34",
        "type": "function",
        "z": "9daf9e2b.019fc",
        "name": "",
        "func": "msg.payload =  flow.get(\"python_log\") + msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 680,
        "wires": [
            [
                "c0f3e5b0db2242f9"
            ]
        ]
    },
    {
        "id": "35a607238a94f14b",
        "type": "function",
        "z": "9daf9e2b.019fc",
        "name": "",
        "func": "flow.set(\"python_log\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "c0f3e5b0db2242f9",
        "type": "ui_template",
        "z": "9daf9e2b.019fc",
        "group": "a7d64879.38298",
        "name": "",
        "order": 1,
        "width": 12,
        "height": 9,
        "format": "\n<!DOCTYPE html>\n<html>\n<body>\n\n\n<textarea id=\"textarea\" style=\"height:100%;background-color: #000;border: 1px solid #000;color: #00ff00;padding: 8px;font-family: courier new;font-size:12px;overflow: auto\">{{msg.payload}}</textarea>\n<md-button onclick=\"copy()\"style=\"margin: 5px 0px 5px 0px;padding: 20px;\" id=\"button\">Copy Logs</md-button>\n\n<script>\nfunction copy() {\n  // Get the text field\n  var copyText = document.getElementById(\"textarea\");\n\n  // Select the text field\n  copyText.select();\n\n  // Copy the text inside the text field\n  document.execCommand('copy');\n}\n\n\n</script>\n\n</body>\n</html>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1180,
        "y": 760,
        "wires": [
            [
                "35a607238a94f14b"
            ]
        ]
    },
    {
        "id": "2c8c45ab.610c0a",
        "type": "ui_gauge",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "b5ba3f26.2e722",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "CPU Temperature",
        "label": "°C",
        "format": "{{value}}",
        "min": "30",
        "max": "55",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 610,
        "y": 20,
        "wires": []
    },
    {
        "id": "ddcbbfa5.cd158",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "vcgencmd measure_temp | tr -d \"temp=\" | tr -d \"'C\" | tr -d \"\\n\"",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "RPi Temp.",
        "x": 330,
        "y": 40,
        "wires": [
            [
                "98beb1efbd08e8a5"
            ],
            [],
            []
        ]
    },
    {
        "id": "cef370c7.1f7a",
        "type": "ui_chart",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "b5ba3f26.2e722",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "30",
        "ymax": "70",
        "removeOlder": "20",
        "removeOlderPoints": "200",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 570,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "55749fd8.3aca5",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "top -d 0.5 -b -n2 | grep \"Cpu(s)\"|tail -n 1 | awk '{print $2 + $4}' | tr -d \"\\n\"",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "CPU Load",
        "x": 330,
        "y": 120,
        "wires": [
            [
                "f21e596e496d5dcb"
            ],
            [],
            []
        ]
    },
    {
        "id": "c2b8d8b.0d90328",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "free | grep Mem | awk '{print 100*($2-$7)/$2}' | awk '{print int($1+0.5)}' | tr -d \"\\n\"",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Free Memory",
        "x": 330,
        "y": 200,
        "wires": [
            [
                "e366df7d663670c8"
            ],
            [],
            []
        ]
    },
    {
        "id": "e046247c.c466e8",
        "type": "ui_gauge",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "3da7da8f.179606",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Processor",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 580,
        "y": 100,
        "wires": []
    },
    {
        "id": "e84f6e08.5d147",
        "type": "ui_gauge",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "806d69c8.67fc58",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Memory",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 580,
        "y": 180,
        "wires": []
    },
    {
        "id": "3910d662.fa1f7a",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "df -h | grep /dev/root | awk -F ' ' '{print $5}' | tr -d % | tr \"\\n$\" \"\\ \" |  sed 's/,/./' | tr -d \" \"",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Disk Usage",
        "x": 330,
        "y": 280,
        "wires": [
            [
                "dd364f1f9eaba649"
            ],
            [],
            []
        ]
    },
    {
        "id": "45e1912a.36a23",
        "type": "ui_gauge",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "405183bc.d8991c",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Disk",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 570,
        "y": 260,
        "wires": []
    },
    {
        "id": "4b2b9a70.6a9af4",
        "type": "ui_chart",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "3da7da8f.179606",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "20",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 570,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c7c8d192.3df27",
        "type": "ui_chart",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "806d69c8.67fc58",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "20",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 570,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "84ac8611.1a6ac8",
        "type": "ui_chart",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "405183bc.d8991c",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "100",
        "removeOlder": "4",
        "removeOlderPoints": "200",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 570,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "1cd5b4c0.46af9b",
        "type": "inject",
        "z": "1371dec5.76e671",
        "name": "update: 15s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "3910d662.fa1f7a",
                "c2b8d8b.0d90328",
                "55749fd8.3aca5",
                "ddcbbfa5.cd158"
            ]
        ]
    },
    {
        "id": "e2f39a35.f57298",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "1371dec5.76e671",
        "name": "",
        "env": [],
        "x": 200,
        "y": 500,
        "wires": [
            [
                "bdc6718a.dd5d48",
                "a400a97e.e333a8",
                "f783aefd.c3bfd8"
            ]
        ]
    },
    {
        "id": "3e64877a.9684b",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "store version",
        "func": "msg.payload = \"PlanktoScope \"+msg.payload.trim()\n\nglobal.set(\"acq_software\",msg.payload);\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 400,
        "wires": [
            [
                "8343fa69.49339",
                "632034bd6eae09e3"
            ]
        ]
    },
    {
        "id": "bdc6718a.dd5d48",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "ce9e278.781eed8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Instrument Type",
        "format": "{{msg.payload.acq_instrument}}",
        "layout": "row-spread",
        "x": 600,
        "y": 500,
        "wires": []
    },
    {
        "id": "a400a97e.e333a8",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "ce9e278.781eed8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Instrument Name",
        "format": "{{msg.payload.acq_instrument_id}}",
        "layout": "row-spread",
        "className": "",
        "x": 610,
        "y": 540,
        "wires": []
    },
    {
        "id": "8343fa69.49339",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "ce9e278.781eed8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Software version",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 610,
        "y": 420,
        "wires": []
    },
    {
        "id": "f783aefd.c3bfd8",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "ce9e278.781eed8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Camera Name",
        "format": "{{msg.payload.acq_camera}}",
        "layout": "row-spread",
        "className": "",
        "x": 600,
        "y": 460,
        "wires": []
    },
    {
        "id": "30067f35.532f2",
        "type": "link in",
        "z": "1371dec5.76e671",
        "name": "Camera Name",
        "links": [
            "559a8085.1d6b9"
        ],
        "x": 265,
        "y": 460,
        "wires": [
            [
                "f783aefd.c3bfd8"
            ]
        ]
    },
    {
        "id": "eaf74a43.fa27d",
        "type": "switch",
        "z": "1371dec5.76e671",
        "name": "if disk > 90%",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "90",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 590,
        "y": 340,
        "wires": [
            [
                "6d09f428.930bcc"
            ]
        ]
    },
    {
        "id": "46d5e78b.15f998",
        "type": "ui_toast",
        "z": "1371dec5.76e671",
        "position": "dialog",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1090,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "24df077a.cb252",
        "type": "change",
        "z": "1371dec5.76e671",
        "name": "full disk msg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"Your drive has reached 90% capacity, you should do a backup to an external drive and a purge.\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 340,
        "wires": [
            [
                "46d5e78b.15f998"
            ]
        ]
    },
    {
        "id": "f344dc9e.3c9278",
        "type": "ui_button",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "3ca00bf9.e5cac4",
        "order": 1,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Home",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "home",
        "payload": "{\"tab\":\"Home\"}",
        "payloadType": "json",
        "topic": "",
        "x": 430,
        "y": 680,
        "wires": [
            [
                "5f94b366.e4d3a4"
            ]
        ]
    },
    {
        "id": "5f94b366.e4d3a4",
        "type": "ui_ui_control",
        "z": "1371dec5.76e671",
        "name": "",
        "events": "change",
        "x": 580,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "f30bf784.90d58",
        "type": "ui_dropdown",
        "z": "1371dec5.76e671",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Choose USB device",
        "group": "52d1b77.28369c8",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "No Drive Detected",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "device_path",
        "x": 840,
        "y": 740,
        "wires": [
            [
                "d1b9fed3.f3ead8"
            ]
        ]
    },
    {
        "id": "fe29acc2.c25d18",
        "type": "ui_button",
        "z": "1371dec5.76e671",
        "d": true,
        "name": "Detect drive",
        "group": "52d1b77.28369c8",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Detect drive",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-usb fa-2x",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 150,
        "y": 740,
        "wires": [
            [
                "4c00cd96.6b2f6c"
            ]
        ]
    },
    {
        "id": "4c00cd96.6b2f6c",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "lsblk --bytes --json --paths --output-all",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "detect drive",
        "x": 330,
        "y": 740,
        "wires": [
            [
                "2dc1e43d.cd3d64"
            ],
            [],
            []
        ]
    },
    {
        "id": "2dc1e43d.cd3d64",
        "type": "json",
        "z": "1371dec5.76e671",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 740,
        "wires": [
            [
                "6b730649.09351"
            ]
        ]
    },
    {
        "id": "6b730649.09351",
        "type": "change",
        "z": "1371dec5.76e671",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "[payload.blockdevices.children[mountpoint=null].name]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 740,
        "wires": [
            [
                "f30bf784.90d58"
            ]
        ]
    },
    {
        "id": "1ece8d8e.1008e2",
        "type": "ui_button",
        "z": "1371dec5.76e671",
        "d": true,
        "name": "Backup to USB",
        "group": "52d1b77.28369c8",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Backup to USB",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "archive",
        "payload": "",
        "payloadType": "str",
        "topic": "USB Backup",
        "topicType": "str",
        "x": 160,
        "y": 820,
        "wires": [
            [
                "6b2fed77.883c0c"
            ]
        ]
    },
    {
        "id": "d1b9fed3.f3ead8",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "set local",
        "func": "flow.set(msg.topic,msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1000,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "6b2fed77.883c0c",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "get device_path",
        "func": "msg.payload = flow.get(\"device_path\");\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 340,
        "y": 820,
        "wires": [
            [
                "df4d4d6a.24787"
            ]
        ]
    },
    {
        "id": "c74fe76.bcba718",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "sudo /home/pi/PlanktoScope/scripts/bash/usb_backup.sh",
        "addpay": true,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "oldrc": false,
        "name": "usb_backup.sh",
        "x": 720,
        "y": 840,
        "wires": [
            [
                "72f5e8d4.40fcb8"
            ],
            [],
            [
                "a2c36500.6d376"
            ]
        ]
    },
    {
        "id": "df4d4d6a.24787",
        "type": "switch",
        "z": "1371dec5.76e671",
        "name": "No Drive",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "No Drive Detected",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 520,
        "y": 820,
        "wires": [
            [
                "9a577caa.1535a"
            ],
            [
                "7f205e82db28120e"
            ]
        ]
    },
    {
        "id": "9a577caa.1535a",
        "type": "ui_toast",
        "z": "1371dec5.76e671",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 710,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "72f5e8d4.40fcb8",
        "type": "ui_toast",
        "z": "1371dec5.76e671",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 920,
        "y": 820,
        "wires": []
    },
    {
        "id": "81a48376.27a66",
        "type": "ui_toast",
        "z": "1371dec5.76e671",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1110,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "a2c36500.6d376",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "return code",
        "func": "switch (msg.payload.code){\ncase 0:\n    msg.payload = \"All files successfully copied, you can remove your usb drive!\";\n    break;\ncase 1:\n    msg.payload = \"There was an error!\";\n    break;\ncase 2:\n    msg.payload = \"Error: your device is already mounted\"\n    break;\ncase 3:\n    msg.payload = \"Error while mounting the device\"\n    break;\ncase 4:\n    msg.payload = \"Error: some files were corrupted during the copy!\"\n    break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 860,
        "wires": [
            [
                "81a48376.27a66"
            ]
        ]
    },
    {
        "id": "dde0025c.3df9f",
        "type": "ui_button",
        "z": "1371dec5.76e671",
        "d": true,
        "name": "Purge local",
        "group": "52d1b77.28369c8",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Purge local data",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "delete_forever",
        "payload": "THIS IS GOING TO WIPE ALL THE LOCAL DATA. MAKE SURE YOU DID A BACKUP TO AN USB DRIVE BEFOREHAND.",
        "payloadType": "str",
        "topic": "BE EXTRA CAREFUL",
        "topicType": "str",
        "x": 150,
        "y": 940,
        "wires": [
            [
                "ba72704a.8a38a"
            ]
        ]
    },
    {
        "id": "ba72704a.8a38a",
        "type": "ui_toast",
        "z": "1371dec5.76e671",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "GO BACK",
        "cancel": "YES I'M SURE, I WANT TO PURGE THE DATA",
        "raw": false,
        "topic": "Data purge",
        "name": "",
        "x": 330,
        "y": 940,
        "wires": [
            [
                "d80e6307.3aaf8"
            ]
        ]
    },
    {
        "id": "d80e6307.3aaf8",
        "type": "switch",
        "z": "1371dec5.76e671",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "YES I'M SURE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 940,
        "wires": [
            [
                "4a8cb5d4.52e4bc"
            ]
        ]
    },
    {
        "id": "4a8cb5d4.52e4bc",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "rm -rf /home/pi/data/img /home/pi/data/objects /home/pi/data/export",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "rm data",
        "x": 700,
        "y": 940,
        "wires": [
            [
                "c5b1e763.d1bba8"
            ],
            [],
            []
        ]
    },
    {
        "id": "c5b1e763.d1bba8",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "error message",
        "func": "// TODO revoir cette partie\n\nswitch (msg.rc.code){\ncase 0:\n    msg.payload = \"/home/pi/data was purged successfully!\";\n    break;\ndefault:\n    msg.payload = \"There was an error! The error is \" + msg.rc.message;\n    break;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 900,
        "y": 940,
        "wires": [
            [
                "81a48376.27a66"
            ]
        ]
    },
    {
        "id": "6d09f428.930bcc",
        "type": "delay",
        "z": "1371dec5.76e671",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 760,
        "y": 340,
        "wires": [
            [
                "24df077a.cb252"
            ]
        ]
    },
    {
        "id": "4997446.5176d3c",
        "type": "change",
        "z": "1371dec5.76e671",
        "name": "Backup starting message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"The backup is starting now, please wait for the complete message before removing the drive\"",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 900,
        "wires": [
            [
                "81a48376.27a66"
            ]
        ]
    },
    {
        "id": "6c7f0cc5.ea30d4",
        "type": "gpsd",
        "z": "1371dec5.76e671",
        "name": "",
        "hostname": "127.0.0.1",
        "port": "2947",
        "tpv": true,
        "sky": false,
        "info": false,
        "device": false,
        "gst": false,
        "att": false,
        "x": 170,
        "y": 1180,
        "wires": [
            [
                "55e67dfea72aa576"
            ]
        ]
    },
    {
        "id": "96bc0179.5c37",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "cfe2288f.a8862",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "GPS Status Display",
        "label": "GPS Status:",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "x": 650,
        "y": 1040,
        "wires": []
    },
    {
        "id": "8c731f52.2b5f3",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "cfe2288f.a8862",
        "order": 5,
        "width": 3,
        "height": 1,
        "name": "Latitude",
        "label": "Latitude",
        "format": "{{msg.payload.lat.deg}}&deg{{msg.payload.lat.min}}'{{msg.payload.lat.sec}}{{msg.payload.lat.dir}}",
        "layout": "col-center",
        "x": 620,
        "y": 1080,
        "wires": []
    },
    {
        "id": "34e4b5ea.27b4a2",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "cfe2288f.a8862",
        "order": 6,
        "width": 3,
        "height": 1,
        "name": "Longitude",
        "label": "Longitude",
        "format": "{{msg.payload.lon.deg}}&deg{{msg.payload.lon.min}}'{{msg.payload.lon.sec}}{{msg.payload.lon.dir}}",
        "layout": "col-center",
        "x": 620,
        "y": 1120,
        "wires": []
    },
    {
        "id": "906072b1.42c7c8",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "Convert DD to DMS",
        "func": "function ConvertDDToDMS(D, lng){\n    // from https://stackoverflow.com/a/5786281/2108279\n    return {\n        dir : D<0?lng?'W':'S':lng?'E':'N',\n        deg : 0|(D<0?D=-D:D),\n        min : 0|D%1*60,\n        sec :(0|D*60%1*6000)/100\n    };\n}\n\nmsg.payload = {\n    \"lat\":ConvertDDToDMS(msg.payload.lat, false),\n    \"lon\":ConvertDDToDMS(msg.payload.lon, true)\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 1100,
        "wires": [
            [
                "8c731f52.2b5f3",
                "34e4b5ea.27b4a2"
            ]
        ]
    },
    {
        "id": "4584c817.0be238",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "cfe2288f.a8862",
        "order": 3,
        "width": 3,
        "height": 1,
        "name": "Speed",
        "label": "Speed",
        "format": "{{msg.payload}} kts",
        "layout": "col-center",
        "x": 610,
        "y": 1240,
        "wires": []
    },
    {
        "id": "cd3b05d6.5a3e2",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "cfe2288f.a8862",
        "order": 4,
        "width": 3,
        "height": 1,
        "name": "Direction",
        "label": "Direction",
        "format": "{{msg.payload.track}} °",
        "layout": "col-center",
        "x": 620,
        "y": 1160,
        "wires": []
    },
    {
        "id": "9b29e0e2.475e08",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "GPS Mode",
        "func": "switch (msg.payload.mode){\n case 1:msg.payload = \"No Fix\"; break\n case 2:msg.payload = \"2D Fix\"; break\n case 3:msg.payload = \"3D Fix\"; break\n default: msg.payload = \"No info\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 1040,
        "wires": [
            [
                "96bc0179.5c37"
            ]
        ]
    },
    {
        "id": "96fefa8b.b7d538",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "Speed conversion",
        "func": "msg.payload = (0|msg.payload.speed) * 1.9438\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 1240,
        "wires": [
            [
                "4584c817.0be238"
            ]
        ]
    },
    {
        "id": "49a98fe9.9450d8",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "cfe2288f.a8862",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "GPS UTC datetime",
        "label": "GPS UTC datetime",
        "format": "{{msg.payload.time}}",
        "layout": "col-center",
        "x": 650,
        "y": 1200,
        "wires": []
    },
    {
        "id": "3c3f334e.d691ac",
        "type": "ui_button",
        "z": "1371dec5.76e671",
        "name": "",
        "group": "cfe2288f.a8862",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Force local clock update",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "x": 670,
        "y": 1320,
        "wires": [
            [
                "c60030d4.317418"
            ]
        ]
    },
    {
        "id": "c60030d4.317418",
        "type": "exec",
        "z": "1371dec5.76e671",
        "command": "sudo hwclock -w",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 920,
        "y": 1320,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "6d144078.508d9",
        "type": "ui_text",
        "z": "1371dec5.76e671",
        "group": "cfe2288f.a8862",
        "order": 2,
        "width": 6,
        "height": 1,
        "name": "Local UTC datetime",
        "label": "Local UTC datetime",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 660,
        "y": 1280,
        "wires": []
    },
    {
        "id": "f2a62d0.f5e135",
        "type": "function",
        "z": "1371dec5.76e671",
        "name": "",
        "func": "msg.payload = new Date()\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 1280,
        "wires": [
            [
                "6d144078.508d9"
            ]
        ]
    },
    {
        "id": "9373b3f6.33a2b",
        "type": "link in",
        "z": "1371dec5.76e671",
        "name": "Git Rev",
        "links": [
            "6c20d6a7.869b6"
        ],
        "x": 265,
        "y": 400,
        "wires": [
            [
                "3e64877a.9684b"
            ]
        ]
    },
    {
        "id": "632034bd6eae09e3",
        "type": "subflow:4ed26b8b.253504",
        "z": "1371dec5.76e671",
        "name": "",
        "x": 600,
        "y": 380,
        "wires": []
    },
    {
        "id": "b9bf06d6.26c518",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "sudo iwlist wlan0 scan | grep ESSID | sed 's/ESSID://g;s/\"//g;s/^ *//;s/ *$//'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "scan",
        "x": 270,
        "y": 80,
        "wires": [
            [
                "9642cb31.663b4"
            ],
            [],
            []
        ]
    },
    {
        "id": "9642cb31.663b4",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "parseOptions",
        "func": "var ssids = msg.payload.split('\\n').filter(s => !!s)\n\nssids = [...new Set(ssids)];\n\nmsg.options = ssids\nmsg.payload = null\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 80,
        "wires": [
            [
                "dbc0d44.5361b28"
            ]
        ]
    },
    {
        "id": "dbc0d44.5361b28",
        "type": "ui_dropdown",
        "z": "f21ba04.c26266",
        "name": "",
        "label": "Wifi",
        "tooltip": "",
        "place": "Select a WIFI network",
        "group": "9e409235.73cd7",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 550,
        "y": 80,
        "wires": [
            [
                "cdfa9013.b91278"
            ]
        ]
    },
    {
        "id": "2bf338e3.966468",
        "type": "ui_button",
        "z": "f21ba04.c26266",
        "name": "",
        "group": "9e409235.73cd7",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Network scan",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-wifi fa-2x",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "topicType": "str",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "b9bf06d6.26c518"
            ]
        ]
    },
    {
        "id": "4c0400c.69a1e8",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "ip -j addr show",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "getInfo",
        "x": 450,
        "y": 180,
        "wires": [
            [
                "88e05f37a8745216"
            ],
            [],
            []
        ]
    },
    {
        "id": "bcb20e39.00cea8",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "parse IP Info",
        "func": "var ip = \"\";\nvar broadcast = \"\";\nvar iface = \"\";\nvar iface_up = false;\n\nif (msg.rc.code === 0){\n    payload = msg.payload\n    for (let info in payload) {\n      if (payload[info].operstate === \"UP\") {\n      \tif (iface_up){\n        \t// We have two concurrent interfaces up\n          // We need to deactivate one\n          ip = \"Remove Ethernet cable or disconnect wifi\"\n          broadcast = \"Remove Ethernet cable or disconnect wifi\"\n          iface = \"Remove Ethernet cable or disconnect wifi\"\n          break\n        }\n        if (payload[info].ifname === \"eth0\") {\n          iface = \"Ethernet\"\n        } else if (payload[info].ifname === \"wifi0\" || payload[info].ifname === \"wlan0\") {\n          iface = \"Wifi\"\n        }\n        ip = payload[info].addr_info[0].local;\n        broadcast = payload[info].addr_info[0].broadcast;\n        iface_up = true;\n      }\n    }\n}\n\nif (iface_up) {\n  return([{\n    topic: 'interface',\n    payload: iface\n  }, {\n    topic: 'ip',\n    payload: ip\n  }, {\n    topic: 'broadcast',\n    payload: broadcast\n  }])\n}\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 180,
        "wires": [
            [
                "67d052ba.99ff24"
            ],
            [
                "d71c8185.800fd",
                "49111a72f4e32740"
            ],
            [
                "dc305a26.b33fc"
            ]
        ],
        "outputLabels": [
            "interface",
            "ip",
            "broadcast"
        ]
    },
    {
        "id": "d71c8185.800fd",
        "type": "ui_text",
        "z": "f21ba04.c26266",
        "group": "919923a3.d10868",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "IP",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "x": 930,
        "y": 180,
        "wires": []
    },
    {
        "id": "67d052ba.99ff24",
        "type": "ui_text",
        "z": "f21ba04.c26266",
        "group": "919923a3.d10868",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Interface",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "x": 940,
        "y": 140,
        "wires": []
    },
    {
        "id": "dc305a26.b33fc",
        "type": "ui_text",
        "z": "f21ba04.c26266",
        "group": "919923a3.d10868",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Broadcast",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "x": 940,
        "y": 220,
        "wires": []
    },
    {
        "id": "94b2e8fc.aa20e",
        "type": "ui_form",
        "z": "f21ba04.c26266",
        "name": "",
        "label": "Update",
        "group": "9e409235.73cd7",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "SSID",
                "value": "ssid",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "ssid": "",
            "password": ""
        },
        "payload": "",
        "submit": "Add the network",
        "cancel": "Reset fields",
        "topic": "",
        "x": 820,
        "y": 80,
        "wires": [
            [
                "d59021e3.1b63e8"
            ]
        ]
    },
    {
        "id": "cdfa9013.b91278",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "insert ssid",
        "func": "\nmsg.payload = {ssid: msg.payload}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 80,
        "wires": [
            [
                "94b2e8fc.aa20e"
            ]
        ]
    },
    {
        "id": "448b4c37.be50bc",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "iw dev wlan0 info",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "getCurrentSSID",
        "x": 480,
        "y": 260,
        "wires": [
            [
                "151819d4.0dbe56"
            ],
            [],
            []
        ]
    },
    {
        "id": "c8a5ae48.ef1308",
        "type": "ui_text",
        "z": "f21ba04.c26266",
        "group": "919923a3.d10868",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SSID",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "x": 930,
        "y": 259,
        "wires": []
    },
    {
        "id": "151819d4.0dbe56",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "parse SSID",
        "func": "var ssid = \"\"\n\nif (msg.rc.code === 0){\n    ssid = msg.payload.match(/\\sssid (.+)/)[1];\n    return({topic: 'ssid', payload: ssid})\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 260,
        "wires": [
            [
                "c8a5ae48.ef1308"
            ]
        ]
    },
    {
        "id": "ff059f3f.9c0f28",
        "type": "ui_ui_control",
        "z": "f21ba04.c26266",
        "name": "onTab",
        "events": "all",
        "x": 90,
        "y": 240,
        "wires": [
            [
                "f103cd20eb4362a4"
            ]
        ]
    },
    {
        "id": "167d7bd0.679ce4",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "update contry code",
        "func": "var template = `sudo sed -i \\\"s/^country.*/country=\"${msg.payload}\"/\\\" /home/pi/wpa_supplicant.conf`\n// sudo tee /etc/wpa_supplicant/wpa_supplicant.conf <<EOF\n//ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\n//update_config=1\n//country=IT\nmsg.payload = template\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 630,
        "y": 400,
        "wires": [
            [
                "9d30f7b5.aac88"
            ]
        ]
    },
    {
        "id": "9d30f7b5.aac88",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "updateConf",
        "x": 890,
        "y": 400,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "deb8c14e.ff1fd",
        "type": "ui_button",
        "z": "f21ba04.c26266",
        "name": "",
        "group": "9e409235.73cd7",
        "order": 5,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Change Country Code",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "country_code",
        "payloadType": "flow",
        "topic": "",
        "x": 400,
        "y": 400,
        "wires": [
            [
                "167d7bd0.679ce4"
            ]
        ]
    },
    {
        "id": "6d4ce391.04abf4",
        "type": "ui_text_input",
        "z": "f21ba04.c26266",
        "name": "country_code",
        "label": "Country Code",
        "tooltip": "ISO/IEC alpha2 country code",
        "group": "9e409235.73cd7",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "500",
        "topic": "country_code",
        "x": 420,
        "y": 340,
        "wires": [
            [
                "3f60469d.620aea"
            ]
        ]
    },
    {
        "id": "3f60469d.620aea",
        "type": "change",
        "z": "f21ba04.c26266",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "country_code",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "d59021e3.1b63e8",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "add network",
        "func": "var data = msg.payload\n\nvar command = `wpa_passphrase \"${data.ssid}\" \"${data.password}\" | sed '/#psk=\".*\"/d' | sudo tee -a /etc/wpa_supplicant/wpa_supplicant.conf > /dev/null`\n \nmsg.payload = command\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 970,
        "y": 80,
        "wires": [
            [
                "64a1f2f2.3de8b4"
            ]
        ]
    },
    {
        "id": "64a1f2f2.3de8b4",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Save Network",
        "x": 1140,
        "y": 80,
        "wires": [
            [
                "6868b4c4.65987c"
            ],
            [],
            []
        ]
    },
    {
        "id": "6868b4c4.65987c",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "sudo /usr/bin/autohotspotN >/dev/null",
        "addpay": false,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "oldrc": false,
        "name": "reconfigure",
        "x": 1170,
        "y": 180,
        "wires": [
            [
                "59e24c40.e1a4dc"
            ],
            [],
            []
        ]
    },
    {
        "id": "59e24c40.e1a4dc",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "showMessage",
        "func": "msg.payload = \"Wifi configuration updated successfully, please connect to the network you just setup.\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 280,
        "wires": [
            [
                "4ecb6be2.ad39f4"
            ]
        ]
    },
    {
        "id": "4ecb6be2.ad39f4",
        "type": "ui_toast",
        "z": "f21ba04.c26266",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1170,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "991d1df9.3ffb3",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "reset wpa_supplicant.conf",
        "func": "country_code = flow.get(\"country_code\")\n\nvar template = `sudo tee /etc/wpa_supplicant/wpa_supplicant.conf <<EOF\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=${country_code}\n\nEOF`\n\nmsg.payload = template\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 650,
        "y": 460,
        "wires": [
            [
                "2124997d.2cbf0e"
            ]
        ]
    },
    {
        "id": "2124997d.2cbf0e",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "resetConf",
        "x": 880,
        "y": 460,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "8b3a1ecb.c4d2e8",
        "type": "ui_button",
        "z": "f21ba04.c26266",
        "name": "",
        "group": "9e409235.73cd7",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset wifi networks",
        "tooltip": "",
        "color": "",
        "bgcolor": "#AD1625",
        "icon": "",
        "payload": "country_code",
        "payloadType": "flow",
        "topic": "",
        "x": 410,
        "y": 460,
        "wires": [
            [
                "991d1df9.3ffb3"
            ]
        ]
    },
    {
        "id": "49111a72f4e32740",
        "type": "link out",
        "z": "f21ba04.c26266",
        "name": "IP",
        "links": [
            "142bc61a0bde1ba9",
            "c515edcd8681c244",
            "7fb91a7fd6d2518c",
            "604659d148759b84",
            "3bb4970164f5e7b2"
        ],
        "x": 1035,
        "y": 160,
        "wires": []
    },
    {
        "id": "3db572cd.cf972e",
        "type": "inject",
        "z": "f21ba04.c26266",
        "name": "once",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "9f6292fdacabb97e"
            ]
        ]
    },
    {
        "id": "88e05f37a8745216",
        "type": "json",
        "z": "f21ba04.c26266",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 590,
        "y": 180,
        "wires": [
            [
                "bcb20e39.00cea8"
            ]
        ]
    },
    {
        "id": "f103cd20eb4362a4",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "check tab",
        "func": "//needed to update the ip address to connect to in those tabs\nif ([\"Optic Configuration\", \"Fluidic Acquisition\", \"Segmentation\", \"Gallery\"].includes(msg.name)) {\n    return [msg, null]\n}\n\n\n// current tab, let's update all the fields\nif (msg.name === \"Wifi\"){\n    return [msg, msg]\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 240,
        "wires": [
            [
                "9f6292fdacabb97e"
            ],
            [
                "448b4c37.be50bc",
                "1d100e88fcfa16f0"
            ]
        ],
        "outputLabels": [
            "interface",
            "ip"
        ]
    },
    {
        "id": "fa459124e59c656a",
        "type": "ui_button",
        "z": "f21ba04.c26266",
        "name": "Shutdown network power",
        "group": "614405b228e411bf",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Power OFF the wireless networks <i class=\"fa fa-fw fa-warning fa-2x\" ng-class=\"icon\"></i>",
        "tooltip": "This WILL shutdown your wifi connection to the device, with no hope to recover it without a physical Ethernet connection to it.",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "fa-warning fa-2x",
        "payload": "block",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 150,
        "y": 760,
        "wires": [
            [
                "a61a5930e2a347cc"
            ]
        ]
    },
    {
        "id": "8efd2bb8d1cc8152",
        "type": "ui_text",
        "z": "f21ba04.c26266",
        "group": "614405b228e411bf",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Wifi Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 850,
        "y": 640,
        "wires": []
    },
    {
        "id": "622252bc9f52bd81",
        "type": "ui_text",
        "z": "f21ba04.c26266",
        "group": "614405b228e411bf",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Bluetooth Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 860,
        "y": 680,
        "wires": []
    },
    {
        "id": "1d100e88fcfa16f0",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "rfkill -J",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "get Wireless status",
        "x": 310,
        "y": 660,
        "wires": [
            [
                "5728ef9095fe60b0"
            ],
            [],
            []
        ]
    },
    {
        "id": "5728ef9095fe60b0",
        "type": "json",
        "z": "f21ba04.c26266",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 470,
        "y": 660,
        "wires": [
            [
                "600add8a091a7cbd"
            ]
        ]
    },
    {
        "id": "cde1e39645fa1781",
        "type": "inject",
        "z": "f21ba04.c26266",
        "name": "once",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 660,
        "wires": [
            [
                "1d100e88fcfa16f0"
            ]
        ]
    },
    {
        "id": "600add8a091a7cbd",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "parse wireless status",
        "func": "var wlan = \"\"\nvar bluetooth = \"\"\nvar wlanposition = 0\nvar btposition = 0\n\nmsg.payload = msg.payload[\"\"]\n\nif (msg.rc.code === 0){\n  if (msg.payload[0].type == \"wlan\") {\n    wlanposition = 0\n    btposition = 1\n  }\n  else if (msg.payload[0].type == \"bluetooth\") {\n    wlanposition = 1\n    btposition = 0\n  }\n\n  if (msg.payload[btposition].soft == \"blocked\" && msg.payload[btposition].hard == \"blocked\") {\n    bluetooth = \"Full block\"\n  }\n  else if (msg.payload[btposition].soft == \"blocked\") {\n    bluetooth = \"Softblocked\"\n  }\n  else if (msg.payload[btposition].hard == \"blocked\") {\n    bluetooth = \"Hardblocked\"\n  }\n\n  if (msg.payload[wlanposition].soft == \"blocked\" && msg.payload[wlanposition].hard == \"blocked\") {\n    wlan = \"Full block\"\n  }\n  else if (msg.payload[wlanposition].soft == \"blocked\") {\n    wlan = \"Softblocked\"\n  }\n  else if (msg.payload[wlanposition].hard == \"blocked\") {\n    wlan = \"Hardblocked\"\n  }\n\n}\n\nif (wlan == \"\") {\n  wlan = \"Unblocked\"\n}\n\nif (bluetooth == \"\") {\n  bluetooth = \"Unblocked\"\n}\n\n\nreturn ([{\n  topic: 'wlan',\n  payload: wlan\n}, {\n  topic: 'bluetooth',\n  payload: bluetooth\n}])",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 660,
        "wires": [
            [
                "8efd2bb8d1cc8152"
            ],
            [
                "622252bc9f52bd81"
            ]
        ],
        "outputLabels": [
            "interface",
            "ip"
        ]
    },
    {
        "id": "a61a5930e2a347cc",
        "type": "exec",
        "z": "f21ba04.c26266",
        "command": "rfkill ",
        "addpay": "payload",
        "append": "1",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Cut wireless networks",
        "x": 440,
        "y": 780,
        "wires": [
            [
                "e4d310b9ce93a426"
            ],
            [],
            []
        ]
    },
    {
        "id": "e4d310b9ce93a426",
        "type": "function",
        "z": "f21ba04.c26266",
        "name": "check rc code",
        "func": "\nif (msg.rc.code === 0){\n    return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 780,
        "wires": [
            [
                "1d100e88fcfa16f0"
            ]
        ]
    },
    {
        "id": "239e739a3a5ea3fd",
        "type": "ui_button",
        "z": "f21ba04.c26266",
        "name": "Start network power",
        "group": "614405b228e411bf",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Power On the wireless networks <i class=\"fa fa-fw fa-warning fa-2x\" ng-class=\"icon\"></i>",
        "tooltip": "This will poweron the wifi and bluetooth networks of the device.",
        "color": "",
        "bgcolor": "#AD1625",
        "className": "",
        "icon": "fa-warning fa-2x",
        "payload": "unblock",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 160,
        "y": 800,
        "wires": [
            [
                "a61a5930e2a347cc"
            ]
        ]
    },
    {
        "id": "b698e3406e2a842d",
        "type": "ui_template",
        "z": "f21ba04.c26266",
        "group": "614405b228e411bf",
        "name": "Wifi power status",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div>\n    <center>This widget gives you the status of the wireless connections of the device.<br><br>\n        If you cut the power of the wireless cards, you <b>WILL</b> lose all wifi access to the device.<br><br>\n        To restore the wireless access, you will have to physically connect to the machine with an Ethernet cable.\n    </center>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 870,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "1fdf77b5.24e4e",
        "type": "mqtt in",
        "z": "9a22e67a.378818",
        "name": "",
        "topic": "status/#",
        "qos": "0",
        "datatype": "json",
        "broker": "8dc3722c.06efa8",
        "inputs": 0,
        "x": 270,
        "y": 200,
        "wires": [
            [
                "fa73983d.318188"
            ]
        ]
    },
    {
        "id": "4a1e9e3e.27506",
        "type": "switch",
        "z": "9a22e67a.378818",
        "name": "Filter segmenter out",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "cont",
                "v": "status/segmenter",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 200,
        "wires": [
            [
                "58f2e0f.4e8b12"
            ],
            [
                "dcf5bd45.16a8d"
            ]
        ]
    },
    {
        "id": "fa73983d.318188",
        "type": "json",
        "z": "9a22e67a.378818",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 410,
        "y": 200,
        "wires": [
            [
                "4a1e9e3e.27506"
            ]
        ]
    },
    {
        "id": "58f2e0f.4e8b12",
        "type": "link out",
        "z": "9a22e67a.378818",
        "name": "Fluidic module status",
        "links": [
            "bb628f8d.98f108"
        ],
        "x": 775,
        "y": 180,
        "wires": []
    },
    {
        "id": "dcf5bd45.16a8d",
        "type": "link out",
        "z": "9a22e67a.378818",
        "name": "Segmenter module status",
        "links": [
            "25867454.a8e334"
        ],
        "x": 775,
        "y": 220,
        "wires": []
    },
    {
        "id": "e10f5e55.00b828",
        "type": "change",
        "z": "1eaf21c8.f7a21e",
        "name": "Get hard_stepper_type",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.hard_stepper_type",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 360,
        "wires": [
            [
                "dee52a36.2af72"
            ]
        ]
    },
    {
        "id": "dee52a36.2af72",
        "type": "ui_dropdown",
        "z": "1eaf21c8.f7a21e",
        "name": "stepper_type",
        "label": "",
        "tooltip": "",
        "place": "",
        "group": "6be36295.0ab324",
        "order": 4,
        "width": 3,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "adafruit",
                "type": "str"
            },
            {
                "label": "",
                "value": "waveshare",
                "type": "str"
            },
            {
                "label": "",
                "value": "pscope_hat",
                "type": "str"
            },
            {
                "label": "",
                "value": "waveshare2.1",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "stepper_type",
        "topicType": "str",
        "className": "",
        "x": 670,
        "y": 360,
        "wires": [
            [
                "13d04338daf07495",
                "2068e7f.f4efb18"
            ]
        ]
    },
    {
        "id": "e41870d7.300eb8",
        "type": "link out",
        "z": "1eaf21c8.f7a21e",
        "name": "Stepper config change",
        "links": [
            "45a7b5aa.2ed20c",
            "90687eca9c539a55"
        ],
        "x": 1175,
        "y": 320,
        "wires": []
    },
    {
        "id": "2068e7f.f4efb18",
        "type": "delay",
        "z": "1eaf21c8.f7a21e",
        "name": "1s before restart",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 980,
        "y": 320,
        "wires": [
            [
                "e41870d7.300eb8"
            ]
        ]
    },
    {
        "id": "c534fd26.13741",
        "type": "change",
        "z": "1eaf21c8.f7a21e",
        "name": "Get hard_stepper_reverse",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.hard_stepper_reverse",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 440,
        "wires": [
            [
                "cd1987c7.027f58"
            ]
        ]
    },
    {
        "id": "cd1987c7.027f58",
        "type": "ui_switch",
        "z": "1eaf21c8.f7a21e",
        "name": "stepper_reverse",
        "label": "Invert stepper output",
        "tooltip": "Stepper 1 is controlled by output 1 or the other way around",
        "group": "6be36295.0ab324",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "false",
        "topic": "stepper_reverse",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 660,
        "y": 440,
        "wires": [
            [
                "13d04338daf07495",
                "2068e7f.f4efb18"
            ]
        ]
    },
    {
        "id": "54ba7f16.709ad8",
        "type": "change",
        "z": "1eaf21c8.f7a21e",
        "name": "Get hard_pump_steps_per_ml",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.hard_pump_steps_per_ml",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "ee58b91c.396108"
            ]
        ]
    },
    {
        "id": "ee58b91c.396108",
        "type": "ui_text_input",
        "z": "1eaf21c8.f7a21e",
        "name": "pump_steps_per_ml",
        "label": "Pump: steps per mL",
        "tooltip": "",
        "group": "6be36295.0ab324",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "2000",
        "topic": "pump_steps_per_ml",
        "topicType": "str",
        "x": 640,
        "y": 400,
        "wires": [
            [
                "13d04338daf07495",
                "2068e7f.f4efb18"
            ]
        ]
    },
    {
        "id": "be888117.5cd67",
        "type": "ui_template",
        "z": "1eaf21c8.f7a21e",
        "group": "6be36295.0ab324",
        "name": "Stepper controller type header",
        "order": 3,
        "width": 3,
        "height": 1,
        "format": "<div>Stepper controller type</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 450,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7534dfd9.8cf3e8",
        "type": "ui_template",
        "z": "1eaf21c8.f7a21e",
        "group": "6be36295.0ab324",
        "name": "Information",
        "order": 2,
        "width": 6,
        "height": 3,
        "format": "<div style=\"text-align: center;\">\n    <p>Changing one of these values will make the python back-end to restart.</p>\n    <p><strong style=\"font-size: large;\">If you are not sure, you probably should not be touching anything here!</strong></p>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 450,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "a7e5c7f4.644678",
        "type": "ui_dropdown",
        "z": "1eaf21c8.f7a21e",
        "name": "Machine Version",
        "label": "Machine version",
        "tooltip": "",
        "place": "Select option",
        "group": "6be36295.0ab324",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "PlanktoScope v1.0",
                "type": "str"
            },
            {
                "label": "PlanktoScope 2.1 (adafruit version)",
                "value": "PlanktoScope v2.1",
                "type": "str"
            },
            {
                "label": "PlanktoScope 2.2 (waveshare hat)",
                "value": "PlanktoScope v2.2",
                "type": "str"
            },
            {
                "label": "PlanktoScope 2.3 (custom hat)",
                "value": "PlanktoScope v2.3",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "acq_instrument",
        "topicType": "str",
        "className": "",
        "x": 650,
        "y": 160,
        "wires": [
            [
                "3e2c5c1c.4c57b4"
            ]
        ]
    },
    {
        "id": "3e2c5c1c.4c57b4",
        "type": "function",
        "z": "1eaf21c8.f7a21e",
        "name": "Set and update settings",
        "func": "global.set(msg.topic, msg.payload)\n\nif (msg.payload.includes(\"2.1\")) {\n    msg.payload[\"hard_stepper_type\"] = \"adafruit\"\n    msg.payload[\"hard_pump_steps_per_ml\"] = 1600\n}\nelse if (msg.payload.includes(\"2.2\")) {\n    msg.payload[\"hard_stepper_type\"] = \"waveshare\"\n    msg.payload[\"hard_pump_steps_per_ml\"] = 2000\n}\nelse if (msg.payload.includes(\"2.3\")) {\n    msg.payload[\"hard_stepper_type\"] = \"pscope_hat\"\n    msg.payload[\"hard_pump_steps_per_ml\"] = 3200\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 320,
        "wires": [
            [
                "32a01567c2f95ebe",
                "13d04338daf07495",
                "2068e7f.f4efb18"
            ]
        ]
    },
    {
        "id": "427c312.fc5e65",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "1eaf21c8.f7a21e",
        "name": "",
        "env": [],
        "x": 100,
        "y": 160,
        "wires": [
            [
                "32a01567c2f95ebe",
                "8dad11c1f29007e8"
            ]
        ]
    },
    {
        "id": "c67c305004f87e39",
        "type": "change",
        "z": "1eaf21c8.f7a21e",
        "name": "Get process_pixel_fixed",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.process_pixel_fixed",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 480,
        "wires": [
            [
                "244ca5dd62df2bcd"
            ]
        ]
    },
    {
        "id": "244ca5dd62df2bcd",
        "type": "ui_text_input",
        "z": "1eaf21c8.f7a21e",
        "name": "process_pixel_fixed",
        "label": "Pixel size calibration",
        "tooltip": "Object size in µm / pixel. 0 will remove this calibration.",
        "group": "6be36295.0ab324",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "number",
        "delay": "1000",
        "topic": "process_pixel_fixed",
        "topicType": "str",
        "x": 650,
        "y": 480,
        "wires": [
            [
                "f9b47f4b1da15778"
            ]
        ]
    },
    {
        "id": "f9b47f4b1da15778",
        "type": "function",
        "z": "1eaf21c8.f7a21e",
        "name": "Set or remove if null",
        "func": "if (msg.payload == 0){\n    global.set(msg.topic,undefined)\n}\nelse {\n    global.set(msg.topic,msg.payload);\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 480,
        "wires": [
            [
                "5d5ad36d2c50dcc2",
                "285e3db1405b123b"
            ]
        ]
    },
    {
        "id": "5d5ad36d2c50dcc2",
        "type": "link out",
        "z": "1eaf21c8.f7a21e",
        "name": "Process_pixel calibration",
        "links": [
            "cfc783d7.d6ceb"
        ],
        "x": 1175,
        "y": 480,
        "wires": []
    },
    {
        "id": "6146ba22df928516",
        "type": "ui_dropdown",
        "z": "1eaf21c8.f7a21e",
        "name": "acq_fnumber_objective",
        "label": "M12 Lens",
        "tooltip": "",
        "place": "Select option",
        "group": "6be36295.0ab324",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "f 25mm 1/2\" 5MP IR",
                "value": 25,
                "type": "num"
            },
            {
                "label": "f 16mm 1/2.5\" 5MP IR",
                "value": 16,
                "type": "num"
            },
            {
                "label": "f 12mm 1/2.5\" 5MP IR",
                "value": 12,
                "type": "num"
            },
            {
                "label": "f 8mm 1/2.5\" 5MP IR",
                "value": 8,
                "type": "num"
            },
            {
                "label": "f 6mm 1/2.5\" 5MP IR",
                "value": 6,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "acq_fnumber_objective",
        "topicType": "str",
        "x": 630,
        "y": 520,
        "wires": [
            [
                "a6983d3232b570a7"
            ]
        ]
    },
    {
        "id": "a6983d3232b570a7",
        "type": "change",
        "z": "1eaf21c8.f7a21e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "acq_fnumber_objective",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 520,
        "wires": [
            [
                "5d5ad36d2c50dcc2",
                "285e3db1405b123b"
            ]
        ]
    },
    {
        "id": "11955bbeefc29ab4",
        "type": "change",
        "z": "1eaf21c8.f7a21e",
        "name": "Get acq_fnumber_objective",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.acq_fnumber_objective",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "acq_fnumber_objective",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 520,
        "wires": [
            [
                "6146ba22df928516"
            ]
        ]
    },
    {
        "id": "285e3db1405b123b",
        "type": "subflow:4ed26b8b.253504",
        "z": "1eaf21c8.f7a21e",
        "name": "",
        "x": 1240,
        "y": 400,
        "wires": []
    },
    {
        "id": "8dad11c1f29007e8",
        "type": "change",
        "z": "1eaf21c8.f7a21e",
        "name": "Get acq_instrument",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.acq_instrument",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 160,
        "wires": [
            [
                "a7e5c7f4.644678"
            ]
        ]
    },
    {
        "id": "ced8d8e4ac81c04f",
        "type": "ui_text_input",
        "z": "5195979a0d7a6b2a",
        "name": "Manufacturer",
        "label": "Manufacturer",
        "tooltip": "",
        "group": "2dbaeebc5146e634",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "inst_manufacturer",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 670,
        "y": 220,
        "wires": [
            [
                "268a696e5a548530"
            ]
        ]
    },
    {
        "id": "8089dfdec8cca018",
        "type": "ui_button",
        "z": "5195979a0d7a6b2a",
        "name": "Save",
        "group": "2dbaeebc5146e634",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Save",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 650,
        "y": 340,
        "wires": [
            [
                "461243b16575af56"
            ]
        ]
    },
    {
        "id": "fd2616cc34e495a0",
        "type": "ui_text_input",
        "z": "5195979a0d7a6b2a",
        "name": "Serial Number",
        "label": "Serial Number",
        "tooltip": "",
        "group": "2dbaeebc5146e634",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "inst_serial_number",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 680,
        "y": 260,
        "wires": [
            [
                "a694968c6f2366d3"
            ]
        ]
    },
    {
        "id": "efc1a4f1d74b832b",
        "type": "ui_text_input",
        "z": "5195979a0d7a6b2a",
        "name": "Instrument",
        "label": "Instrument",
        "tooltip": "",
        "group": "2dbaeebc5146e634",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "acq_instrument",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 670,
        "y": 180,
        "wires": [
            [
                "984dab073f748cf3"
            ]
        ]
    },
    {
        "id": "e305f9fdaf2a9eb8",
        "type": "ui_text_input",
        "z": "5195979a0d7a6b2a",
        "name": "Model",
        "label": "Model",
        "tooltip": "",
        "group": "2dbaeebc5146e634",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "inst_model",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 650,
        "y": 300,
        "wires": [
            [
                "88df85935399e67e"
            ]
        ]
    },
    {
        "id": "604adadb85c478c8",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "5195979a0d7a6b2a",
        "name": "",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "51709748447380a2"
            ]
        ]
    },
    {
        "id": "161c9f5e5c07a198",
        "type": "change",
        "z": "5195979a0d7a6b2a",
        "name": "get acq_instrument",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.acq_instrument",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 180,
        "wires": [
            [
                "efc1a4f1d74b832b"
            ]
        ]
    },
    {
        "id": "95c15d65c004903c",
        "type": "change",
        "z": "5195979a0d7a6b2a",
        "name": "get inst_manufacturer",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.inst_manufacturer",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 220,
        "wires": [
            [
                "ced8d8e4ac81c04f"
            ]
        ]
    },
    {
        "id": "3c8899d253ff70cc",
        "type": "change",
        "z": "5195979a0d7a6b2a",
        "name": "get inst_serial_number",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.inst_serial_number",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 260,
        "wires": [
            [
                "fd2616cc34e495a0"
            ]
        ]
    },
    {
        "id": "341734bdbc3e223f",
        "type": "change",
        "z": "5195979a0d7a6b2a",
        "name": "get inst_model",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.inst_model",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 300,
        "wires": [
            [
                "e305f9fdaf2a9eb8"
            ]
        ]
    },
    {
        "id": "984dab073f748cf3",
        "type": "change",
        "z": "5195979a0d7a6b2a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "acq_instrument",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "268a696e5a548530",
        "type": "change",
        "z": "5195979a0d7a6b2a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "inst_manufacturer",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "a694968c6f2366d3",
        "type": "change",
        "z": "5195979a0d7a6b2a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "inst_serial_number",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "88df85935399e67e",
        "type": "change",
        "z": "5195979a0d7a6b2a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "inst_model",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "461243b16575af56",
        "type": "subflow:4ed26b8b.253504",
        "z": "5195979a0d7a6b2a",
        "name": "",
        "x": 880,
        "y": 340,
        "wires": []
    },
    {
        "id": "452af41c.43940c",
        "type": "python3-function",
        "z": "5195979a0d7a6b2a",
        "name": "Get MachineName",
        "func": "import sys\nsys.path.append('/home/pi/PlanktoScope/scripts')\nimport planktoscope.uuidName\n\nmsg['payload'] = planktoscope.uuidName.machineName(machine=planktoscope.uuidName.getSerial())\nmsg['topic'] = \"acq_instrument_id\";\nreturn msg",
        "outputs": 1,
        "x": 390,
        "y": 100,
        "wires": [
            [
                "b2528f5d1a61f174",
                "3378e3b7fbdd1222"
            ]
        ]
    },
    {
        "id": "79077df28d49ce70",
        "type": "ui_button",
        "z": "5195979a0d7a6b2a",
        "name": "",
        "group": "2dbaeebc5146e634",
        "order": 3,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Reload instrument name",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "acq_instrument_id",
        "topicType": "str",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "452af41c.43940c"
            ]
        ]
    },
    {
        "id": "012b19d8b462b3e2",
        "type": "change",
        "z": "5195979a0d7a6b2a",
        "name": "get acq_instrument_id",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.acq_instrument_id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "b2528f5d1a61f174"
            ]
        ]
    },
    {
        "id": "3378e3b7fbdd1222",
        "type": "change",
        "z": "5195979a0d7a6b2a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "acq_instrument_id",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "b2528f5d1a61f174",
        "type": "ui_text",
        "z": "5195979a0d7a6b2a",
        "group": "2dbaeebc5146e634",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Instrument Name",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 690,
        "y": 140,
        "wires": []
    },
    {
        "id": "27dcfdaad28d6ee3",
        "type": "ui_button",
        "z": "073a18d556c8d083",
        "name": "Add",
        "group": "623af0a87f3fb6f1",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Add",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 190,
        "y": 180,
        "wires": [
            [
                "a25b26afee83b350"
            ]
        ]
    },
    {
        "id": "dfbdde55dc7a3a12",
        "type": "ui_text_input",
        "z": "073a18d556c8d083",
        "name": "field value",
        "label": "Field value",
        "tooltip": "",
        "group": "623af0a87f3fb6f1",
        "order": 3,
        "width": 5,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "b79f10923b959824"
            ]
        ]
    },
    {
        "id": "b409248ce2fabbd6",
        "type": "ui_text_input",
        "z": "073a18d556c8d083",
        "name": "field name",
        "label": "Field name",
        "tooltip": "",
        "group": "623af0a87f3fb6f1",
        "order": 2,
        "width": 5,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "b2205dff04a24c9a"
            ]
        ]
    },
    {
        "id": "a25b26afee83b350",
        "type": "function",
        "z": "073a18d556c8d083",
        "name": "set global",
        "func": "var new_name = flow.get(\"new_name\")\nvar new_value = flow.get(\"new_value\")\n\nglobal.set(new_name,new_value)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 180,
        "wires": [
            [
                "2ed32a6f9aa5e16e",
                "e21b375d2e2902ab"
            ]
        ]
    },
    {
        "id": "b2205dff04a24c9a",
        "type": "function",
        "z": "073a18d556c8d083",
        "name": "set flow.new_name",
        "func": "//sanitize input\nmsg.payload = msg.payload.replace(/[^a-z0-9]/gi, '_').toLowerCase()\n\nvar new_prefix = flow.get(\"new_prefix\",\"obj\")\n\nflow.set(\"new_name\",new_prefix+\"_\"+msg.payload)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "943ea036d915f7c4",
        "type": "ui_dropdown",
        "z": "073a18d556c8d083",
        "name": "category",
        "label": "",
        "tooltip": "",
        "place": "Select category",
        "group": "623af0a87f3fb6f1",
        "order": 1,
        "width": 4,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "Acquisition",
                "value": "acq",
                "type": "str"
            },
            {
                "label": "Object",
                "value": "object",
                "type": "str"
            },
            {
                "label": "Image",
                "value": "img",
                "type": "str"
            },
            {
                "label": "Sample",
                "value": "sample",
                "type": "str"
            },
            {
                "label": "Process",
                "value": "process",
                "type": "str"
            },
            {
                "label": "Hardware",
                "value": "hard",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 180,
        "y": 60,
        "wires": [
            [
                "d38d726b43f9fb8b"
            ]
        ]
    },
    {
        "id": "a4b63ae3f8f97fd1",
        "type": "ui_table",
        "z": "073a18d556c8d083",
        "group": "2cfbd3d0b5d8477e",
        "name": "",
        "order": 1,
        "width": 16,
        "height": 11,
        "columns": [
            {
                "field": "category",
                "title": "Categories",
                "width": "",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "key",
                "title": "Variable Name",
                "width": "",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "value",
                "title": "Variable Value",
                "width": "",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Action",
                "title": "Delete",
                "width": "",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 710,
        "y": 220,
        "wires": [
            [
                "fc13c1f6af8a632b"
            ]
        ]
    },
    {
        "id": "fc13c1f6af8a632b",
        "type": "ui_template",
        "z": "073a18d556c8d083",
        "group": "2cfbd3d0b5d8477e",
        "name": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<script>\n    document.addEventListener('DOMContentLoaded', function() {\n        var buttons = document.querySelectorAll('.btn-danger');\n        buttons.forEach(function(button) {\n            button.addEventListener('click', function(event) {\n                // Récupération de l'identifiant du bouton cliqué\n                var id = event.target.id;\n                // Envoi d'un message pour supprimer la ligne correspondante\n                var msg = { payload: id };\n                node.send(msg);\n            });\n        });\n    });\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 840,
        "y": 220,
        "wires": [
            [
                "07f7c8f36489d6f7"
            ]
        ]
    },
    {
        "id": "07f7c8f36489d6f7",
        "type": "function",
        "z": "073a18d556c8d083",
        "name": "Delete var",
        "func": "// Extract the subkey value\nvar subkey = msg.payload.subkey;\n\n// Parse the subkey value to get the value attribute\nvar valueRegex = /value=\"(.*?)\"/;\nvar value = subkey.match(valueRegex)[1];\n\nglobal.set(value, undefined);\n\n// Set the value as the new payload\nmsg.payload = value;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 220,
        "wires": [
            [
                "e21b375d2e2902ab",
                "2ed32a6f9aa5e16e"
            ]
        ]
    },
    {
        "id": "2903f61517c6a91a",
        "type": "inject",
        "z": "073a18d556c8d083",
        "name": "metadata refresh",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 220,
        "wires": [
            [
                "e7ae4f7709ec4f6d"
            ]
        ]
    },
    {
        "id": "d38d726b43f9fb8b",
        "type": "change",
        "z": "073a18d556c8d083",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "new_prefix",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b79f10923b959824",
        "type": "change",
        "z": "073a18d556c8d083",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "new_value",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "e21b375d2e2902ab",
        "type": "function",
        "z": "073a18d556c8d083",
        "name": "get data for table",
        "func": "var payload = {}\n\nconst keys = global.keys()\n\nkeys.forEach(function (key, index, array) {\n    if (key.startsWith('acq')) {\n        payload.acq = payload.acq || {}\n        payload.acq[key] = global.get(key)\n    } else if (key.startsWith('sample')) {\n        payload.sample = payload.sample || {}\n        payload.sample[key] = global.get(key)\n    } else if (key.startsWith('object')) {\n        payload.object = payload.object || {}\n        payload.object[key] = global.get(key)\n    } else if (key.startsWith('process')) {\n        payload.process = payload.process || {}\n        payload.process[key] = global.get(key)\n    } else if (key.startsWith('inst')) {\n        payload.inst = payload.inst || {}\n        payload.inst[key] = global.get(key)\n    } else if (key.startsWith('hard')) {\n        payload.hard = payload.hard || {}\n        payload.hard[key] = global.get(key)\n    } else if (key.startsWith('user')) {\n        payload.user = payload.user || {}\n        payload.user[key] = global.get(key)\n    } else {\n        // Add to \"unknown\" category\n        payload.unknown = payload.unknown || {}\n        payload.unknown[key] = global.get(key)\n    }\n})\n\nvar rows = []\n\nfor (const [category, value] of Object.entries(payload)) {\n    if (typeof value === 'object') {\n        for (const [key, subvalue] of Object.entries(value)) {\n            rows.push({\n                category,\n                key: `<input type=\"text\" value=\"${key}\">`,\n                value: `<input type=\"text\" value=\"${subvalue}\">`,\n                Action: `<button class=\"btn btn-danger\">X</button>`,\n            })\n        }\n    } else {\n        rows.push({\n            category,\n            value: `<input type=\"text\" value=\"${value}\">`,\n            Action: `<button class=\"btn btn-danger\">X</button>`,\n        })\n    }\n}\n\nnode.send({ payload: rows })",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 220,
        "wires": [
            [
                "a4b63ae3f8f97fd1"
            ]
        ]
    },
    {
        "id": "2ed32a6f9aa5e16e",
        "type": "subflow:4ed26b8b.253504",
        "z": "073a18d556c8d083",
        "name": "",
        "x": 1220,
        "y": 180,
        "wires": []
    },
    {
        "id": "e7ae4f7709ec4f6d",
        "type": "subflow:1c24ad9c.bebec2",
        "z": "073a18d556c8d083",
        "name": "",
        "x": 340,
        "y": 220,
        "wires": [
            [
                "e21b375d2e2902ab"
            ]
        ]
    }
]